{"/home/travis/build/npmtest/node-npmtest-webrtc/test.js":"/* istanbul instrument in package npmtest_webrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webrtc/lib.npmtest_webrtc.js":"/* istanbul instrument in package npmtest_webrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webrtc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webrtc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webrtc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webrtc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webrtc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webrtc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webrtc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webrtc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webrtc.__dirname + '/lib.npmtest_webrtc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc/webrtc.js":"var util = require('util');\nvar webrtc = require('webrtcsupport');\nvar WildEmitter = require('wildemitter');\nvar mockconsole = require('mockconsole');\nvar localMedia = require('localmedia');\nvar Peer = require('./peer');\n\n\nfunction WebRTC(opts) {\n    var self = this;\n    var options = opts || {};\n    var config = this.config = {\n            debug: false,\n            // makes the entire PC config overridable\n            peerConnectionConfig: {\n                iceServers: [{\"url\": \"stun:stun.l.google.com:19302\"}]\n            },\n            peerConnectionConstraints: {\n                optional: [\n                    {DtlsSrtpKeyAgreement: true}\n                ]\n            },\n            receiveMedia: {\n                mandatory: {\n                    OfferToReceiveAudio: true,\n                    OfferToReceiveVideo: true\n                }\n            },\n            enableDataChannels: true\n        };\n    var item;\n\n    // expose screensharing check\n    this.screenSharingSupport = webrtc.screenSharing;\n\n    // We also allow a 'logger' option. It can be any object that implements\n    // log, warn, and error methods.\n    // We log nothing by default, following \"the rule of silence\":\n    // http://www.linfo.org/rule_of_silence.html\n    this.logger = function () {\n        // we assume that if you're in debug mode and you didn't\n        // pass in a logger, you actually want to log as much as\n        // possible.\n        if (opts.debug) {\n            return opts.logger || console;\n        } else {\n        // or we'll use your logger which should have its own logic\n        // for output. Or we'll return the no-op.\n            return opts.logger || mockconsole;\n        }\n    }();\n\n    // set options\n    for (item in options) {\n        this.config[item] = options[item];\n    }\n\n    // check for support\n    if (!webrtc.support) {\n        this.logger.error('Your browser doesn\\'t seem to support WebRTC');\n    }\n\n    // where we'll store our peer connections\n    this.peers = [];\n\n    // call localMedia constructor\n    localMedia.call(this, this.config);\n\n    this.on('speaking', function () {\n        if (!self.hardMuted) {\n            // FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\n            self.peers.forEach(function (peer) {\n                if (peer.enableDataChannels) {\n                    var dc = peer.getDataChannel('hark');\n                    if (dc.readyState != 'open') return;\n                    dc.send(JSON.stringify({type: 'speaking'}));\n                }\n            });\n        }\n    });\n    this.on('stoppedSpeaking', function () {\n        if (!self.hardMuted) {\n            // FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\n            self.peers.forEach(function (peer) {\n                if (peer.enableDataChannels) {\n                    var dc = peer.getDataChannel('hark');\n                    if (dc.readyState != 'open') return;\n                    dc.send(JSON.stringify({type: 'stoppedSpeaking'}));\n                }\n            });\n        }\n    });\n    this.on('volumeChange', function (volume, treshold) {\n        if (!self.hardMuted) {\n            // FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\n            self.peers.forEach(function (peer) {\n                if (peer.enableDataChannels) {\n                    var dc = peer.getDataChannel('hark');\n                    if (dc.readyState != 'open') return;\n                    dc.send(JSON.stringify({type: 'volume', volume: volume }));\n                }\n            });\n        }\n    });\n\n    // log events in debug mode\n    if (this.config.debug) {\n        this.on('*', function (event, val1, val2) {\n            var logger;\n            // if you didn't pass in a logger and you explicitly turning on debug\n            // we're just going to assume you're wanting log output with console\n            if (self.config.logger === mockconsole) {\n                logger = console;\n            } else {\n                logger = self.logger;\n            }\n            logger.log('event:', event, val1, val2);\n        });\n    }\n}\n\nutil.inherits(WebRTC, localMedia);\n\nWebRTC.prototype.createPeer = function (opts) {\n    var peer;\n    opts.parent = this;\n    peer = new Peer(opts);\n    this.peers.push(peer);\n    return peer;\n};\n\n// removes peers\nWebRTC.prototype.removePeers = function (id, type) {\n    this.getPeers(id, type).forEach(function (peer) {\n        peer.end();\n    });\n};\n\n// fetches all Peer objects by session id and/or type\nWebRTC.prototype.getPeers = function (sessionId, type) {\n    return this.peers.filter(function (peer) {\n        return (!sessionId || peer.id === sessionId) && (!type || peer.type === type);\n    });\n};\n\n// sends message to all\nWebRTC.prototype.sendToAll = function (message, payload) {\n    this.peers.forEach(function (peer) {\n        peer.send(message, payload);\n    });\n};\n\n// sends message to all using a datachannel\n// only sends to anyone who has an open datachannel\nWebRTC.prototype.sendDirectlyToAll = function (channel, message, payload) {\n    this.peers.forEach(function (peer) {\n        if (peer.enableDataChannels) {\n            peer.sendDirectly(channel, message, payload);\n        }\n    });\n};\n\nmodule.exports = WebRTC;\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtcsupport/index-node.js":"// Once node.js gains a robust module integrating WebRTC that can\n// be easily added to dependencies, we'll update this to expose it\n\nmodule.exports = {\n    support: false,\n    supportRTCPeerConnection: false,\n    supportVp8: false,\n    supportGetUserMedia: false,\n    supportDataChannel: false,\n    supportWebAudio: false,\n    supportMediaStream: false,\n    supportScreenSharing: false,\n    prefix: undefined,\n    AudioContext: undefined,\n    PeerConnection: undefined,\n    SessionDescription: undefined,\n    IceCandidate: undefined,\n    MediaStream: undefined,\n    getUserMedia: undefined\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/adapter_core.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\n// Shimming starts here.\n(function() {\n  // Utils.\n  var logging = require('./utils').log;\n  var browserDetails = require('./utils').browserDetails;\n  // Export to the adapter global object visible in the browser.\n  module.exports.browserDetails = browserDetails;\n  module.exports.extractVersion = require('./utils').extractVersion;\n  module.exports.disableLog = require('./utils').disableLog;\n\n  // Uncomment the line below if you want logging to occur, including logging\n  // for the switch statement below. Can also be turned on in the browser via\n  // adapter.disableLog(false), but then logging from the switch statement below\n  // will not appear.\n  // require('./utils').disableLog(false);\n\n  // Browser shims.\n  var chromeShim = require('./chrome/chrome_shim') || null;\n  var edgeShim = require('./edge/edge_shim') || null;\n  var firefoxShim = require('./firefox/firefox_shim') || null;\n  var safariShim = require('./safari/safari_shim') || null;\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'opera': // fallthrough as it uses chrome shims\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection) {\n        logging('Chrome shim is not included in this adapter release.');\n        return;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      module.exports.browserShim = chromeShim;\n\n      chromeShim.shimGetUserMedia();\n      chromeShim.shimMediaStream();\n      chromeShim.shimSourceObject();\n      chromeShim.shimPeerConnection();\n      chromeShim.shimOnTrack();\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection) {\n        logging('Firefox shim is not included in this adapter release.');\n        return;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      module.exports.browserShim = firefoxShim;\n\n      firefoxShim.shimGetUserMedia();\n      firefoxShim.shimSourceObject();\n      firefoxShim.shimPeerConnection();\n      firefoxShim.shimOnTrack();\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection) {\n        logging('MS edge shim is not included in this adapter release.');\n        return;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      module.exports.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia();\n      edgeShim.shimPeerConnection();\n      break;\n    case 'safari':\n      if (!safariShim) {\n        logging('Safari shim is not included in this adapter release.');\n        return;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      module.exports.browserShim = safariShim;\n\n      safariShim.shimGetUserMedia();\n      break;\n    default:\n      logging('Unsupported browser!');\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/utils.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar logDisabled_ = true;\n\n// Utility methods.\nvar utils = {\n  disableLog: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    logDisabled_ = bool;\n    return (bool) ? 'adapter.js logging disabled' :\n        'adapter.js logging enabled';\n  },\n\n  log: function() {\n    if (typeof window === 'object') {\n      if (logDisabled_) {\n        return;\n      }\n      if (typeof console !== 'undefined' && typeof console.log === 'function') {\n        console.log.apply(console, arguments);\n      }\n    }\n  },\n\n  /**\n   * Extract browser version out of the provided user agent string.\n   *\n   * @param {!string} uastring userAgent string.\n   * @param {!string} expr Regular expression used as match criteria.\n   * @param {!number} pos position in the version string to be returned.\n   * @return {!number} browser version.\n   */\n  extractVersion: function(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  },\n\n  /**\n   * Browser detector.\n   *\n   * @return {object} result containing browser and version\n   *     properties.\n   */\n  detectBrowser: function() {\n    // Returned result object.\n    var result = {};\n    result.browser = null;\n    result.version = null;\n\n    // Fail early if it's not a browser\n    if (typeof window === 'undefined' || !window.navigator) {\n      result.browser = 'Not a browser.';\n      return result;\n    }\n\n    // Firefox.\n    if (navigator.mozGetUserMedia) {\n      result.browser = 'firefox';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Firefox\\/([0-9]+)\\./, 1);\n\n    // all webkit-based browsers\n    } else if (navigator.webkitGetUserMedia) {\n      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now\n      if (window.webkitRTCPeerConnection) {\n        result.browser = 'chrome';\n        result.version = this.extractVersion(navigator.userAgent,\n          /Chrom(e|ium)\\/([0-9]+)\\./, 2);\n\n      // Safari or unknown webkit-based\n      // for the time being Safari has support for MediaStreams but not webRTC\n      } else {\n        // Safari UA substrings of interest for reference:\n        // - webkit version:           AppleWebKit/602.1.25 (also used in Op,Cr)\n        // - safari UI version:        Version/9.0.3 (unique to Safari)\n        // - safari UI webkit version: Safari/601.4.4 (also used in Op,Cr)\n        //\n        // if the webkit version and safari UI webkit versions are equals,\n        // ... this is a stable version.\n        //\n        // only the internal webkit version is important today to know if\n        // media streams are supported\n        //\n        if (navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n          result.browser = 'safari';\n          result.version = this.extractVersion(navigator.userAgent,\n            /AppleWebKit\\/([0-9]+)\\./, 1);\n\n        // unknown webkit-based browser\n        } else {\n          result.browser = 'Unsupported webkit-based browser ' +\n              'with GUM support but no WebRTC support.';\n          return result;\n        }\n      }\n\n    // Edge.\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) {\n      result.browser = 'edge';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Edge\\/(\\d+).(\\d+)$/, 2);\n\n    // Default fallthrough: not supported.\n    } else {\n      result.browser = 'Not a supported browser.';\n      return result;\n    }\n\n    return result;\n  }\n};\n\n// Export.\nmodule.exports = {\n  log: utils.log,\n  disableLog: utils.disableLog,\n  browserDetails: utils.detectBrowser(),\n  extractVersion: utils.extractVersion\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js":"\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar logging = require('../utils.js').log;\nvar browserDetails = require('../utils.js').browserDetails;\n\nvar chromeShim = {\n  shimMediaStream: function() {\n    window.MediaStream = window.MediaStream || window.webkitMediaStream;\n  },\n\n  shimOnTrack: function() {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          var self = this;\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', function(te) {\n              var event = new Event('track');\n              event.track = te.track;\n              event.receiver = {track: te.track};\n              event.streams = [e.stream];\n              self.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function() {\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this._srcObject;\n          },\n          set: function(stream) {\n            var self = this;\n            // Use _srcObject as a private property for this shim\n            this._srcObject = stream;\n            if (this.src) {\n              URL.revokeObjectURL(this.src);\n            }\n\n            if (!stream) {\n              this.src = '';\n              return;\n            }\n            this.src = URL.createObjectURL(stream);\n            // We need to recreate the blob url when a track is added or\n            // removed. Doing it manually since we want to avoid a recursion.\n            stream.addEventListener('addtrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n            stream.addEventListener('removetrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function() {\n    // The RTCPeerConnection object.\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n      // Translate iceTransportPolicy to iceTransports,\n      // see https://code.google.com/p/webrtc/issues/detail?id=4869\n      logging('PeerConnection');\n      if (pcConfig && pcConfig.iceTransportPolicy) {\n        pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n      }\n\n      var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints);\n      var origGetStats = pc.getStats.bind(pc);\n      pc.getStats = function(selector, successCallback, errorCallback) {\n        var self = this;\n        var args = arguments;\n\n        // If selector is a function then we are in the old style stats so just\n        // pass back the original getStats format to avoid breaking old users.\n        if (arguments.length > 0 && typeof selector === 'function') {\n          return origGetStats(selector, successCallback);\n        }\n\n        var fixChromeStats_ = function(response) {\n          var standardReport = {};\n          var reports = response.result();\n          reports.forEach(function(report) {\n            var standardStats = {\n              id: report.id,\n              timestamp: report.timestamp,\n              type: report.type\n            };\n            report.names().forEach(function(name) {\n              standardStats[name] = report.stat(name);\n            });\n            standardReport[standardStats.id] = standardStats;\n          });\n\n          return standardReport;\n        };\n\n        // shim getStats with maplike support\n        var makeMapStats = function(stats, legacyStats) {\n          var map = new Map(Object.keys(stats).map(function(key) {\n            return[key, stats[key]];\n          }));\n          legacyStats = legacyStats || stats;\n          Object.keys(legacyStats).forEach(function(key) {\n            map[key] = legacyStats[key];\n          });\n          return map;\n        };\n\n        if (arguments.length >= 2) {\n          var successCallbackWrapper_ = function(response) {\n            args[1](makeMapStats(fixChromeStats_(response)));\n          };\n\n          return origGetStats.apply(this, [successCallbackWrapper_,\n              arguments[0]]);\n        }\n\n        // promise-support\n        return new Promise(function(resolve, reject) {\n          if (args.length === 1 && typeof selector === 'object') {\n            origGetStats.apply(self, [\n              function(response) {\n                resolve(makeMapStats(fixChromeStats_(response)));\n              }, reject]);\n          } else {\n            // Preserve legacy chrome stats only on legacy access of stats obj\n            origGetStats.apply(self, [\n              function(response) {\n                resolve(makeMapStats(fixChromeStats_(response),\n                    response.result()));\n              }, reject]);\n          }\n        }).then(successCallback, errorCallback);\n      };\n\n      return pc;\n    };\n    window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;\n\n    // wrap static methods. Currently just generateCertificate.\n    if (webkitRTCPeerConnection.generateCertificate) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return webkitRTCPeerConnection.generateCertificate;\n        }\n      });\n    }\n\n    ['createOffer', 'createAnswer'].forEach(function(method) {\n      var nativeMethod = webkitRTCPeerConnection.prototype[method];\n      webkitRTCPeerConnection.prototype[method] = function() {\n        var self = this;\n        if (arguments.length < 1 || (arguments.length === 1 &&\n            typeof arguments[0] === 'object')) {\n          var opts = arguments.length === 1 ? arguments[0] : undefined;\n          return new Promise(function(resolve, reject) {\n            nativeMethod.apply(self, [resolve, reject, opts]);\n          });\n        }\n        return nativeMethod.apply(this, arguments);\n      };\n    });\n\n    // add promise support -- natively available in Chrome 51\n    if (browserDetails.version < 51) {\n      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n          .forEach(function(method) {\n            var nativeMethod = webkitRTCPeerConnection.prototype[method];\n            webkitRTCPeerConnection.prototype[method] = function() {\n              var args = arguments;\n              var self = this;\n              var promise = new Promise(function(resolve, reject) {\n                nativeMethod.apply(self, [args[0], resolve, reject]);\n              });\n              if (args.length < 2) {\n                return promise;\n              }\n              return promise.then(function() {\n                args[1].apply(null, []);\n              },\n              function(err) {\n                if (args.length >= 3) {\n                  args[2].apply(null, [err]);\n                }\n              });\n            };\n          });\n    }\n\n    // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = webkitRTCPeerConnection.prototype[method];\n          webkitRTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                RTCIceCandidate : RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        RTCPeerConnection.prototype.addIceCandidate;\n    RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n};\n\n\n// Expose public methods.\nmodule.exports = {\n  shimMediaStream: chromeShim.shimMediaStream,\n  shimOnTrack: chromeShim.shimOnTrack,\n  shimSourceObject: chromeShim.shimSourceObject,\n  shimPeerConnection: chromeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/chrome/getusermedia.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar logging = require('../utils.js').log;\n\n// Expose public methods.\nmodule.exports = function() {\n  var constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    var cc = {};\n    Object.keys(c).forEach(function(key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      var oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function(mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  var shimConstraints_ = function(constraints, func) {\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && constraints.audio) {\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile, where it defaults to \"user\".\n      var face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode)) {\n        delete constraints.video.facingMode;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          // Look for \"back\" in label, or use last cam (typically back cam).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(function(devices) {\n            devices = devices.filter(function(d) {\n              return d.kind === 'videoinput';\n            });\n            var back = devices.find(function(d) {\n              return d.label.toLowerCase().indexOf('back') !== -1;\n            }) || (devices.length && devices[devices.length - 1]);\n            if (back) {\n              constraints.video.deviceId = face.exact ? {exact: back.deviceId} :\n                                                        {ideal: back.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraintName,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, function(c) {\n      navigator.webkitGetUserMedia(c, onSuccess, function(e) {\n        onError(shimError_(e));\n      });\n    });\n  };\n\n  navigator.getUserMedia = getUserMedia_;\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      navigator.getUserMedia(constraints, resolve, reject);\n    });\n  };\n\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {\n      getUserMedia: getUserMediaPromise_,\n      enumerateDevices: function() {\n        return new Promise(function(resolve) {\n          var kinds = {audio: 'audioinput', video: 'videoinput'};\n          return MediaStreamTrack.getSources(function(devices) {\n            resolve(devices.map(function(device) {\n              return {label: device.label,\n                      kind: kinds[device.kind],\n                      deviceId: device.id,\n                      groupId: ''};\n            }));\n          });\n        });\n      }\n    };\n  }\n\n  // A shim for getUserMedia method on the mediaDevices object.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (!navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      return getUserMediaPromise_(constraints);\n    };\n  } else {\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n    // function which returns a Promise, it does not accept spec-style\n    // constraints.\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, function(c) {\n        return origGetUserMedia(c).then(function(stream) {\n          if (c.audio && !stream.getAudioTracks().length ||\n              c.video && !stream.getVideoTracks().length) {\n            stream.getTracks().forEach(function(track) {\n              track.stop();\n            });\n            throw new DOMException('', 'NotFoundError');\n          }\n          return stream;\n        }, function(e) {\n          return Promise.reject(shimError_(e));\n        });\n      });\n    };\n  }\n\n  // Dummy devicechange event methods.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n    navigator.mediaDevices.addEventListener = function() {\n      logging('Dummy mediaDevices.addEventListener called.');\n    };\n  }\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n    navigator.mediaDevices.removeEventListener = function() {\n      logging('Dummy mediaDevices.removeEventListener called.');\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/edge/edge_shim.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\nvar browserDetails = require('../utils').browserDetails;\n\nvar edgeShim = {\n  shimPeerConnection: function() {\n    if (window.RTCIceGatherer) {\n      // ORTC defines an RTCIceCandidate object but no constructor.\n      // Not implemented in Edge.\n      if (!window.RTCIceCandidate) {\n        window.RTCIceCandidate = function(args) {\n          return args;\n        };\n      }\n      // ORTC does not have a session description object but\n      // other browsers (i.e. Chrome) that will support both PC and ORTC\n      // in the future might have this defined already.\n      if (!window.RTCSessionDescription) {\n        window.RTCSessionDescription = function(args) {\n          return args;\n        };\n      }\n      // this adds an additional event listener to MediaStrackTrack that signals\n      // when a tracks enabled property was changed.\n      var origMSTEnabled = Object.getOwnPropertyDescriptor(\n          MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(MediaStreamTrack.prototype, 'enabled', {\n        set: function(value) {\n          origMSTEnabled.set.call(this, value);\n          var ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n\n    window.RTCPeerConnection = function(config) {\n      var self = this;\n\n      var _eventTarget = document.createDocumentFragment();\n      ['addEventListener', 'removeEventListener', 'dispatchEvent']\n          .forEach(function(method) {\n            self[method] = _eventTarget[method].bind(_eventTarget);\n          });\n\n      this.onicecandidate = null;\n      this.onaddstream = null;\n      this.ontrack = null;\n      this.onremovestream = null;\n      this.onsignalingstatechange = null;\n      this.oniceconnectionstatechange = null;\n      this.onnegotiationneeded = null;\n      this.ondatachannel = null;\n\n      this.localStreams = [];\n      this.remoteStreams = [];\n      this.getLocalStreams = function() {\n        return self.localStreams;\n      };\n      this.getRemoteStreams = function() {\n        return self.remoteStreams;\n      };\n\n      this.localDescription = new RTCSessionDescription({\n        type: '',\n        sdp: ''\n      });\n      this.remoteDescription = new RTCSessionDescription({\n        type: '',\n        sdp: ''\n      });\n      this.signalingState = 'stable';\n      this.iceConnectionState = 'new';\n      this.iceGatheringState = 'new';\n\n      this.iceOptions = {\n        gatherPolicy: 'all',\n        iceServers: []\n      };\n      if (config && config.iceTransportPolicy) {\n        switch (config.iceTransportPolicy) {\n          case 'all':\n          case 'relay':\n            this.iceOptions.gatherPolicy = config.iceTransportPolicy;\n            break;\n          case 'none':\n            // FIXME: remove once implementation and spec have added this.\n            throw new TypeError('iceTransportPolicy \"none\" not supported');\n          default:\n            // don't set iceTransportPolicy.\n            break;\n        }\n      }\n      this.usingBundle = config && config.bundlePolicy === 'max-bundle';\n\n      if (config && config.iceServers) {\n        // Edge does not like\n        // 1) stun:\n        // 2) turn: that does not have all of turn:host:port?transport=udp\n        // 3) turn: with ipv6 addresses\n        var iceServers = JSON.parse(JSON.stringify(config.iceServers));\n        this.iceOptions.iceServers = iceServers.filter(function(server) {\n          if (server && server.urls) {\n            var urls = server.urls;\n            if (typeof urls === 'string') {\n              urls = [urls];\n            }\n            urls = urls.filter(function(url) {\n              return (url.indexOf('turn:') === 0 &&\n                  url.indexOf('transport=udp') !== -1 &&\n                  url.indexOf('turn:[') === -1) ||\n                  (url.indexOf('stun:') === 0 &&\n                    browserDetails.version >= 14393);\n            })[0];\n            return !!urls;\n          }\n          return false;\n        });\n      }\n      this._config = config;\n\n      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n      // everything that is needed to describe a SDP m-line.\n      this.transceivers = [];\n\n      // since the iceGatherer is currently created in createOffer but we\n      // must not emit candidates until after setLocalDescription we buffer\n      // them in this array.\n      this._localIceCandidatesBuffer = [];\n    };\n\n    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {\n      var self = this;\n      var sections = SDPUtils.splitSections(self.localDescription.sdp);\n      // FIXME: need to apply ice candidates in a way which is async but\n      // in-order\n      this._localIceCandidatesBuffer.forEach(function(event) {\n        var end = !event.candidate || Object.keys(event.candidate).length === 0;\n        if (end) {\n          for (var j = 1; j < sections.length; j++) {\n            if (sections[j].indexOf('\\r\\na=end-of-candidates\\r\\n') === -1) {\n              sections[j] += 'a=end-of-candidates\\r\\n';\n            }\n          }\n        } else if (event.candidate.candidate.indexOf('typ endOfCandidates')\n            === -1) {\n          sections[event.candidate.sdpMLineIndex + 1] +=\n              'a=' + event.candidate.candidate + '\\r\\n';\n        }\n        self.localDescription.sdp = sections.join('');\n        self.dispatchEvent(event);\n        if (self.onicecandidate !== null) {\n          self.onicecandidate(event);\n        }\n        if (!event.candidate && self.iceGatheringState !== 'complete') {\n          var complete = self.transceivers.every(function(transceiver) {\n            return transceiver.iceGatherer &&\n                transceiver.iceGatherer.state === 'completed';\n          });\n          if (complete) {\n            self.iceGatheringState = 'complete';\n          }\n        }\n      });\n      this._localIceCandidatesBuffer = [];\n    };\n\n    window.RTCPeerConnection.prototype.getConfiguration = function() {\n      return this._config;\n    };\n\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      this.localStreams.push(clonedStream);\n      this._maybeFireNegotiationNeeded();\n    };\n\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\n      var idx = this.localStreams.indexOf(stream);\n      if (idx > -1) {\n        this.localStreams.splice(idx, 1);\n        this._maybeFireNegotiationNeeded();\n      }\n    };\n\n    window.RTCPeerConnection.prototype.getSenders = function() {\n      return this.transceivers.filter(function(transceiver) {\n        return !!transceiver.rtpSender;\n      })\n      .map(function(transceiver) {\n        return transceiver.rtpSender;\n      });\n    };\n\n    window.RTCPeerConnection.prototype.getReceivers = function() {\n      return this.transceivers.filter(function(transceiver) {\n        return !!transceiver.rtpReceiver;\n      })\n      .map(function(transceiver) {\n        return transceiver.rtpReceiver;\n      });\n    };\n\n    // Determines the intersection of local and remote capabilities.\n    window.RTCPeerConnection.prototype._getCommonCapabilities =\n        function(localCapabilities, remoteCapabilities) {\n          var commonCapabilities = {\n            codecs: [],\n            headerExtensions: [],\n            fecMechanisms: []\n          };\n          localCapabilities.codecs.forEach(function(lCodec) {\n            for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n              var rCodec = remoteCapabilities.codecs[i];\n              if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n                  lCodec.clockRate === rCodec.clockRate) {\n                // number of channels is the highest common number of channels\n                rCodec.numChannels = Math.min(lCodec.numChannels,\n                    rCodec.numChannels);\n                // push rCodec so we reply with offerer payload type\n                commonCapabilities.codecs.push(rCodec);\n\n                // determine common feedback mechanisms\n                rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n                  for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n                    if (lCodec.rtcpFeedback[j].type === fb.type &&\n                        lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n                // FIXME: also need to determine .parameters\n                //  see https://github.com/openpeer/ortc/issues/569\n                break;\n              }\n            }\n          });\n\n          localCapabilities.headerExtensions\n              .forEach(function(lHeaderExtension) {\n                for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n                     i++) {\n                  var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n                  if (lHeaderExtension.uri === rHeaderExtension.uri) {\n                    commonCapabilities.headerExtensions.push(rHeaderExtension);\n                    break;\n                  }\n                }\n              });\n\n          // FIXME: fecMechanisms\n          return commonCapabilities;\n        };\n\n    // Create ICE gatherer, ICE transport and DTLS transport.\n    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =\n        function(mid, sdpMLineIndex) {\n          var self = this;\n          var iceGatherer = new RTCIceGatherer(self.iceOptions);\n          var iceTransport = new RTCIceTransport(iceGatherer);\n          iceGatherer.onlocalcandidate = function(evt) {\n            var event = new Event('icecandidate');\n            event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n            var cand = evt.candidate;\n            var end = !cand || Object.keys(cand).length === 0;\n            // Edge emits an empty object for RTCIceCandidateComplete‥\n            if (end) {\n              // polyfill since RTCIceGatherer.state is not implemented in\n              // Edge 10547 yet.\n              if (iceGatherer.state === undefined) {\n                iceGatherer.state = 'completed';\n              }\n\n              // Emit a candidate with type endOfCandidates to make the samples\n              // work. Edge requires addIceCandidate with this empty candidate\n              // to start checking. The real solution is to signal\n              // end-of-candidates to the other side when getting the null\n              // candidate but some apps (like the samples) don't do that.\n              event.candidate.candidate =\n                  'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';\n            } else {\n              // RTCIceCandidate doesn't have a component, needs to be added\n              cand.component = iceTransport.component === 'RTCP' ? 2 : 1;\n              event.candidate.candidate = SDPUtils.writeCandidate(cand);\n            }\n\n            // update local description.\n            var sections = SDPUtils.splitSections(self.localDescription.sdp);\n            if (event.candidate.candidate.indexOf('typ endOfCandidates')\n                === -1) {\n              sections[event.candidate.sdpMLineIndex + 1] +=\n                  'a=' + event.candidate.candidate + '\\r\\n';\n            } else {\n              sections[event.candidate.sdpMLineIndex + 1] +=\n                  'a=end-of-candidates\\r\\n';\n            }\n            self.localDescription.sdp = sections.join('');\n\n            var complete = self.transceivers.every(function(transceiver) {\n              return transceiver.iceGatherer &&\n                  transceiver.iceGatherer.state === 'completed';\n            });\n\n            // Emit candidate if localDescription is set.\n            // Also emits null candidate when all gatherers are complete.\n            switch (self.iceGatheringState) {\n              case 'new':\n                self._localIceCandidatesBuffer.push(event);\n                if (end && complete) {\n                  self._localIceCandidatesBuffer.push(\n                      new Event('icecandidate'));\n                }\n                break;\n              case 'gathering':\n                self._emitBufferedCandidates();\n                self.dispatchEvent(event);\n                if (self.onicecandidate !== null) {\n                  self.onicecandidate(event);\n                }\n                if (complete) {\n                  self.dispatchEvent(new Event('icecandidate'));\n                  if (self.onicecandidate !== null) {\n                    self.onicecandidate(new Event('icecandidate'));\n                  }\n                  self.iceGatheringState = 'complete';\n                }\n                break;\n              case 'complete':\n                // should not happen... currently!\n                break;\n              default: // no-op.\n                break;\n            }\n          };\n          iceTransport.onicestatechange = function() {\n            self._updateConnectionState();\n          };\n\n          var dtlsTransport = new RTCDtlsTransport(iceTransport);\n          dtlsTransport.ondtlsstatechange = function() {\n            self._updateConnectionState();\n          };\n          dtlsTransport.onerror = function() {\n            // onerror does not set state to failed by itself.\n            dtlsTransport.state = 'failed';\n            self._updateConnectionState();\n          };\n\n          return {\n            iceGatherer: iceGatherer,\n            iceTransport: iceTransport,\n            dtlsTransport: dtlsTransport\n          };\n        };\n\n    // Start the RTP Sender and Receiver for a transceiver.\n    window.RTCPeerConnection.prototype._transceive = function(transceiver,\n        send, recv) {\n      var params = this._getCommonCapabilities(transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n      if (send && transceiver.rtpSender) {\n        params.encodings = transceiver.sendEncodingParameters;\n        params.rtcp = {\n          cname: SDPUtils.localCName\n        };\n        if (transceiver.recvEncodingParameters.length) {\n          params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n        }\n        transceiver.rtpSender.send(params);\n      }\n      if (recv && transceiver.rtpReceiver) {\n        // remove RTX field in Edge 14942\n        if (transceiver.kind === 'video'\n            && transceiver.recvEncodingParameters) {\n          transceiver.recvEncodingParameters.forEach(function(p) {\n            delete p.rtx;\n          });\n        }\n        params.encodings = transceiver.recvEncodingParameters;\n        params.rtcp = {\n          cname: transceiver.cname\n        };\n        if (transceiver.sendEncodingParameters.length) {\n          params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n        }\n        transceiver.rtpReceiver.receive(params);\n      }\n    };\n\n    window.RTCPeerConnection.prototype.setLocalDescription =\n        function(description) {\n          var self = this;\n          var sections;\n          var sessionpart;\n          if (description.type === 'offer') {\n            // FIXME: What was the purpose of this empty if statement?\n            // if (!this._pendingOffer) {\n            // } else {\n            if (this._pendingOffer) {\n              // VERY limited support for SDP munging. Limited to:\n              // * changing the order of codecs\n              sections = SDPUtils.splitSections(description.sdp);\n              sessionpart = sections.shift();\n              sections.forEach(function(mediaSection, sdpMLineIndex) {\n                var caps = SDPUtils.parseRtpParameters(mediaSection);\n                self._pendingOffer[sdpMLineIndex].localCapabilities = caps;\n              });\n              this.transceivers = this._pendingOffer;\n              delete this._pendingOffer;\n            }\n          } else if (description.type === 'answer') {\n            sections = SDPUtils.splitSections(self.remoteDescription.sdp);\n            sessionpart = sections.shift();\n            var isIceLite = SDPUtils.matchPrefix(sessionpart,\n                'a=ice-lite').length > 0;\n            sections.forEach(function(mediaSection, sdpMLineIndex) {\n              var transceiver = self.transceivers[sdpMLineIndex];\n              var iceGatherer = transceiver.iceGatherer;\n              var iceTransport = transceiver.iceTransport;\n              var dtlsTransport = transceiver.dtlsTransport;\n              var localCapabilities = transceiver.localCapabilities;\n              var remoteCapabilities = transceiver.remoteCapabilities;\n\n              var rejected = mediaSection.split('\\n', 1)[0]\n                  .split(' ', 2)[1] === '0';\n\n              if (!rejected && !transceiver.isDatachannel) {\n                var remoteIceParameters = SDPUtils.getIceParameters(\n                    mediaSection, sessionpart);\n                if (isIceLite) {\n                  var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n                  .map(function(cand) {\n                    return SDPUtils.parseCandidate(cand);\n                  })\n                  .filter(function(cand) {\n                    return cand.component === '1';\n                  });\n                  // ice-lite only includes host candidates in the SDP so we can\n                  // use setRemoteCandidates (which implies an\n                  // RTCIceCandidateComplete)\n                  if (cands.length) {\n                    iceTransport.setRemoteCandidates(cands);\n                  }\n                }\n                var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n                    mediaSection, sessionpart);\n                if (isIceLite) {\n                  remoteDtlsParameters.role = 'server';\n                }\n\n                if (!self.usingBundle || sdpMLineIndex === 0) {\n                  iceTransport.start(iceGatherer, remoteIceParameters,\n                      isIceLite ? 'controlling' : 'controlled');\n                  dtlsTransport.start(remoteDtlsParameters);\n                }\n\n                // Calculate intersection of capabilities.\n                var params = self._getCommonCapabilities(localCapabilities,\n                    remoteCapabilities);\n\n                // Start the RTCRtpSender. The RTCRtpReceiver for this\n                // transceiver has already been started in setRemoteDescription.\n                self._transceive(transceiver,\n                    params.codecs.length > 0,\n                    false);\n              }\n            });\n          }\n\n          this.localDescription = {\n            type: description.type,\n            sdp: description.sdp\n          };\n          switch (description.type) {\n            case 'offer':\n              this._updateSignalingState('have-local-offer');\n              break;\n            case 'answer':\n              this._updateSignalingState('stable');\n              break;\n            default:\n              throw new TypeError('unsupported type \"' + description.type +\n                  '\"');\n          }\n\n          // If a success callback was provided, emit ICE candidates after it\n          // has been executed. Otherwise, emit callback after the Promise is\n          // resolved.\n          var hasCallback = arguments.length > 1 &&\n            typeof arguments[1] === 'function';\n          if (hasCallback) {\n            var cb = arguments[1];\n            window.setTimeout(function() {\n              cb();\n              if (self.iceGatheringState === 'new') {\n                self.iceGatheringState = 'gathering';\n              }\n              self._emitBufferedCandidates();\n            }, 0);\n          }\n          var p = Promise.resolve();\n          p.then(function() {\n            if (!hasCallback) {\n              if (self.iceGatheringState === 'new') {\n                self.iceGatheringState = 'gathering';\n              }\n              // Usually candidates will be emitted earlier.\n              window.setTimeout(self._emitBufferedCandidates.bind(self), 500);\n            }\n          });\n          return p;\n        };\n\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n        function(description) {\n          var self = this;\n          var stream = new MediaStream();\n          var receiverList = [];\n          var sections = SDPUtils.splitSections(description.sdp);\n          var sessionpart = sections.shift();\n          var isIceLite = SDPUtils.matchPrefix(sessionpart,\n              'a=ice-lite').length > 0;\n          this.usingBundle = SDPUtils.matchPrefix(sessionpart,\n              'a=group:BUNDLE ').length > 0;\n          sections.forEach(function(mediaSection, sdpMLineIndex) {\n            var lines = SDPUtils.splitLines(mediaSection);\n            var mline = lines[0].substr(2).split(' ');\n            var kind = mline[0];\n            var rejected = mline[1] === '0';\n            var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n\n            var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:');\n            if (mid.length) {\n              mid = mid[0].substr(6);\n            } else {\n              mid = SDPUtils.generateIdentifier();\n            }\n\n            // Reject datachannels which are not implemented yet.\n            if (kind === 'application' && mline[2] === 'DTLS/SCTP') {\n              self.transceivers[sdpMLineIndex] = {\n                mid: mid,\n                isDatachannel: true\n              };\n              return;\n            }\n\n            var transceiver;\n            var iceGatherer;\n            var iceTransport;\n            var dtlsTransport;\n            var rtpSender;\n            var rtpReceiver;\n            var sendEncodingParameters;\n            var recvEncodingParameters;\n            var localCapabilities;\n\n            var track;\n            // FIXME: ensure the mediaSection has rtcp-mux set.\n            var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n            var remoteIceParameters;\n            var remoteDtlsParameters;\n            if (!rejected) {\n              remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n                  sessionpart);\n              remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n                  sessionpart);\n              remoteDtlsParameters.role = 'client';\n            }\n            recvEncodingParameters =\n                SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n            var cname;\n            // Gets the first SSRC. Note that with RTX there might be multiple\n            // SSRCs.\n            var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n                .map(function(line) {\n                  return SDPUtils.parseSsrcMedia(line);\n                })\n                .filter(function(obj) {\n                  return obj.attribute === 'cname';\n                })[0];\n            if (remoteSsrc) {\n              cname = remoteSsrc.value;\n            }\n\n            var isComplete = SDPUtils.matchPrefix(mediaSection,\n                'a=end-of-candidates', sessionpart).length > 0;\n            var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n                .map(function(cand) {\n                  return SDPUtils.parseCandidate(cand);\n                })\n                .filter(function(cand) {\n                  return cand.component === '1';\n                });\n            if (description.type === 'offer' && !rejected) {\n              var transports = self.usingBundle && sdpMLineIndex > 0 ? {\n                iceGatherer: self.transceivers[0].iceGatherer,\n                iceTransport: self.transceivers[0].iceTransport,\n                dtlsTransport: self.transceivers[0].dtlsTransport\n              } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);\n\n              if (isComplete) {\n                transports.iceTransport.setRemoteCandidates(cands);\n              }\n\n              localCapabilities = RTCRtpReceiver.getCapabilities(kind);\n\n              // filter RTX until additional stuff needed for RTX is implemented\n              // in adapter.js\n              localCapabilities.codecs = localCapabilities.codecs.filter(\n                  function(codec) {\n                    return codec.name !== 'rtx';\n                  });\n\n              sendEncodingParameters = [{\n                ssrc: (2 * sdpMLineIndex + 2) * 1001\n              }];\n\n              rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);\n\n              track = rtpReceiver.track;\n              receiverList.push([track, rtpReceiver]);\n              // FIXME: not correct when there are multiple streams but that is\n              // not currently supported in this shim.\n              stream.addTrack(track);\n\n              // FIXME: look at direction.\n              if (self.localStreams.length > 0 &&\n                  self.localStreams[0].getTracks().length >= sdpMLineIndex) {\n                var localTrack;\n                if (kind === 'audio') {\n                  localTrack = self.localStreams[0].getAudioTracks()[0];\n                } else if (kind === 'video') {\n                  localTrack = self.localStreams[0].getVideoTracks()[0];\n                }\n                if (localTrack) {\n                  rtpSender = new RTCRtpSender(localTrack,\n                      transports.dtlsTransport);\n                }\n              }\n\n              self.transceivers[sdpMLineIndex] = {\n                iceGatherer: transports.iceGatherer,\n                iceTransport: transports.iceTransport,\n                dtlsTransport: transports.dtlsTransport,\n                localCapabilities: localCapabilities,\n                remoteCapabilities: remoteCapabilities,\n                rtpSender: rtpSender,\n                rtpReceiver: rtpReceiver,\n                kind: kind,\n                mid: mid,\n                cname: cname,\n                sendEncodingParameters: sendEncodingParameters,\n                recvEncodingParameters: recvEncodingParameters\n              };\n              // Start the RTCRtpReceiver now. The RTPSender is started in\n              // setLocalDescription.\n              self._transceive(self.transceivers[sdpMLineIndex],\n                  false,\n                  direction === 'sendrecv' || direction === 'sendonly');\n            } else if (description.type === 'answer' && !rejected) {\n              transceiver = self.transceivers[sdpMLineIndex];\n              iceGatherer = transceiver.iceGatherer;\n              iceTransport = transceiver.iceTransport;\n              dtlsTransport = transceiver.dtlsTransport;\n              rtpSender = transceiver.rtpSender;\n              rtpReceiver = transceiver.rtpReceiver;\n              sendEncodingParameters = transceiver.sendEncodingParameters;\n              localCapabilities = transceiver.localCapabilities;\n\n              self.transceivers[sdpMLineIndex].recvEncodingParameters =\n                  recvEncodingParameters;\n              self.transceivers[sdpMLineIndex].remoteCapabilities =\n                  remoteCapabilities;\n              self.transceivers[sdpMLineIndex].cname = cname;\n\n              if ((isIceLite || isComplete) && cands.length) {\n                iceTransport.setRemoteCandidates(cands);\n              }\n              if (!self.usingBundle || sdpMLineIndex === 0) {\n                iceTransport.start(iceGatherer, remoteIceParameters,\n                    'controlling');\n                dtlsTransport.start(remoteDtlsParameters);\n              }\n\n              self._transceive(transceiver,\n                  direction === 'sendrecv' || direction === 'recvonly',\n                  direction === 'sendrecv' || direction === 'sendonly');\n\n              if (rtpReceiver &&\n                  (direction === 'sendrecv' || direction === 'sendonly')) {\n                track = rtpReceiver.track;\n                receiverList.push([track, rtpReceiver]);\n                stream.addTrack(track);\n              } else {\n                // FIXME: actually the receiver should be created later.\n                delete transceiver.rtpReceiver;\n              }\n            }\n          });\n\n          this.remoteDescription = {\n            type: description.type,\n            sdp: description.sdp\n          };\n          switch (description.type) {\n            case 'offer':\n              this._updateSignalingState('have-remote-offer');\n              break;\n            case 'answer':\n              this._updateSignalingState('stable');\n              break;\n            default:\n              throw new TypeError('unsupported type \"' + description.type +\n                  '\"');\n          }\n          if (stream.getTracks().length) {\n            self.remoteStreams.push(stream);\n            window.setTimeout(function() {\n              var event = new Event('addstream');\n              event.stream = stream;\n              self.dispatchEvent(event);\n              if (self.onaddstream !== null) {\n                window.setTimeout(function() {\n                  self.onaddstream(event);\n                }, 0);\n              }\n\n              receiverList.forEach(function(item) {\n                var track = item[0];\n                var receiver = item[1];\n                var trackEvent = new Event('track');\n                trackEvent.track = track;\n                trackEvent.receiver = receiver;\n                trackEvent.streams = [stream];\n                self.dispatchEvent(event);\n                if (self.ontrack !== null) {\n                  window.setTimeout(function() {\n                    self.ontrack(trackEvent);\n                  }, 0);\n                }\n              });\n            }, 0);\n          }\n          if (arguments.length > 1 && typeof arguments[1] === 'function') {\n            window.setTimeout(arguments[1], 0);\n          }\n          return Promise.resolve();\n        };\n\n    window.RTCPeerConnection.prototype.close = function() {\n      this.transceivers.forEach(function(transceiver) {\n        /* not yet\n        if (transceiver.iceGatherer) {\n          transceiver.iceGatherer.close();\n        }\n        */\n        if (transceiver.iceTransport) {\n          transceiver.iceTransport.stop();\n        }\n        if (transceiver.dtlsTransport) {\n          transceiver.dtlsTransport.stop();\n        }\n        if (transceiver.rtpSender) {\n          transceiver.rtpSender.stop();\n        }\n        if (transceiver.rtpReceiver) {\n          transceiver.rtpReceiver.stop();\n        }\n      });\n      // FIXME: clean up tracks, local streams, remote streams, etc\n      this._updateSignalingState('closed');\n    };\n\n    // Update the signaling state.\n    window.RTCPeerConnection.prototype._updateSignalingState =\n        function(newState) {\n          this.signalingState = newState;\n          var event = new Event('signalingstatechange');\n          this.dispatchEvent(event);\n          if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n          }\n        };\n\n    // Determine whether to fire the negotiationneeded event.\n    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =\n        function() {\n          // Fire away (for now).\n          var event = new Event('negotiationneeded');\n          this.dispatchEvent(event);\n          if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n          }\n        };\n\n    // Update the connection state.\n    window.RTCPeerConnection.prototype._updateConnectionState = function() {\n      var self = this;\n      var newState;\n      var states = {\n        'new': 0,\n        closed: 0,\n        connecting: 0,\n        checking: 0,\n        connected: 0,\n        completed: 0,\n        failed: 0\n      };\n      this.transceivers.forEach(function(transceiver) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      });\n      // ICETransport.completed and connected are the same for this purpose.\n      states.connected += states.completed;\n\n      newState = 'new';\n      if (states.failed > 0) {\n        newState = 'failed';\n      } else if (states.connecting > 0 || states.checking > 0) {\n        newState = 'connecting';\n      } else if (states.disconnected > 0) {\n        newState = 'disconnected';\n      } else if (states.new > 0) {\n        newState = 'new';\n      } else if (states.connected > 0 || states.completed > 0) {\n        newState = 'connected';\n      }\n\n      if (newState !== self.iceConnectionState) {\n        self.iceConnectionState = newState;\n        var event = new Event('iceconnectionstatechange');\n        this.dispatchEvent(event);\n        if (this.oniceconnectionstatechange !== null) {\n          this.oniceconnectionstatechange(event);\n        }\n      }\n    };\n\n    window.RTCPeerConnection.prototype.createOffer = function() {\n      var self = this;\n      if (this._pendingOffer) {\n        throw new Error('createOffer called while there is a pending offer.');\n      }\n      var offerOptions;\n      if (arguments.length === 1 && typeof arguments[0] !== 'function') {\n        offerOptions = arguments[0];\n      } else if (arguments.length === 3) {\n        offerOptions = arguments[2];\n      }\n\n      var tracks = [];\n      var numAudioTracks = 0;\n      var numVideoTracks = 0;\n      // Default to sendrecv.\n      if (this.localStreams.length) {\n        numAudioTracks = this.localStreams[0].getAudioTracks().length;\n        numVideoTracks = this.localStreams[0].getVideoTracks().length;\n      }\n      // Determine number of audio and video tracks we need to send/recv.\n      if (offerOptions) {\n        // Reject Chrome legacy constraints.\n        if (offerOptions.mandatory || offerOptions.optional) {\n          throw new TypeError(\n              'Legacy mandatory/optional constraints not supported.');\n        }\n        if (offerOptions.offerToReceiveAudio !== undefined) {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n        if (offerOptions.offerToReceiveVideo !== undefined) {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n      if (this.localStreams.length) {\n        // Push local streams.\n        this.localStreams[0].getTracks().forEach(function(track) {\n          tracks.push({\n            kind: track.kind,\n            track: track,\n            wantReceive: track.kind === 'audio' ?\n                numAudioTracks > 0 : numVideoTracks > 0\n          });\n          if (track.kind === 'audio') {\n            numAudioTracks--;\n          } else if (track.kind === 'video') {\n            numVideoTracks--;\n          }\n        });\n      }\n      // Create M-lines for recvonly streams.\n      while (numAudioTracks > 0 || numVideoTracks > 0) {\n        if (numAudioTracks > 0) {\n          tracks.push({\n            kind: 'audio',\n            wantReceive: true\n          });\n          numAudioTracks--;\n        }\n        if (numVideoTracks > 0) {\n          tracks.push({\n            kind: 'video',\n            wantReceive: true\n          });\n          numVideoTracks--;\n        }\n      }\n\n      var sdp = SDPUtils.writeSessionBoilerplate();\n      var transceivers = [];\n      tracks.forEach(function(mline, sdpMLineIndex) {\n        // For each track, create an ice gatherer, ice transport,\n        // dtls transport, potentially rtpsender and rtpreceiver.\n        var track = mline.track;\n        var kind = mline.kind;\n        var mid = SDPUtils.generateIdentifier();\n\n        var transports = self.usingBundle && sdpMLineIndex > 0 ? {\n          iceGatherer: transceivers[0].iceGatherer,\n          iceTransport: transceivers[0].iceTransport,\n          dtlsTransport: transceivers[0].dtlsTransport\n        } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);\n\n        var localCapabilities = RTCRtpSender.getCapabilities(kind);\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n        localCapabilities.codecs.forEach(function(codec) {\n          // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n          // by adding level-asymmetry-allowed=1\n          if (codec.name === 'H264' &&\n              codec.parameters['level-asymmetry-allowed'] === undefined) {\n            codec.parameters['level-asymmetry-allowed'] = '1';\n          }\n        });\n\n        var rtpSender;\n        var rtpReceiver;\n\n        // generate an ssrc now, to be used later in rtpSender.send\n        var sendEncodingParameters = [{\n          ssrc: (2 * sdpMLineIndex + 1) * 1001\n        }];\n        if (track) {\n          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);\n        }\n\n        if (mline.wantReceive) {\n          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);\n        }\n\n        transceivers[sdpMLineIndex] = {\n          iceGatherer: transports.iceGatherer,\n          iceTransport: transports.iceTransport,\n          dtlsTransport: transports.dtlsTransport,\n          localCapabilities: localCapabilities,\n          remoteCapabilities: null,\n          rtpSender: rtpSender,\n          rtpReceiver: rtpReceiver,\n          kind: kind,\n          mid: mid,\n          sendEncodingParameters: sendEncodingParameters,\n          recvEncodingParameters: null\n        };\n      });\n      if (this.usingBundle) {\n        sdp += 'a=group:BUNDLE ' + transceivers.map(function(t) {\n          return t.mid;\n        }).join(' ') + '\\r\\n';\n      }\n      tracks.forEach(function(mline, sdpMLineIndex) {\n        var transceiver = transceivers[sdpMLineIndex];\n        sdp += SDPUtils.writeMediaSection(transceiver,\n            transceiver.localCapabilities, 'offer', self.localStreams[0]);\n      });\n\n      this._pendingOffer = transceivers;\n      var desc = new RTCSessionDescription({\n        type: 'offer',\n        sdp: sdp\n      });\n      if (arguments.length && typeof arguments[0] === 'function') {\n        window.setTimeout(arguments[0], 0, desc);\n      }\n      return Promise.resolve(desc);\n    };\n\n    window.RTCPeerConnection.prototype.createAnswer = function() {\n      var self = this;\n\n      var sdp = SDPUtils.writeSessionBoilerplate();\n      if (this.usingBundle) {\n        sdp += 'a=group:BUNDLE ' + this.transceivers.map(function(t) {\n          return t.mid;\n        }).join(' ') + '\\r\\n';\n      }\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.isDatachannel) {\n          sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n' +\n              'c=IN IP4 0.0.0.0\\r\\n' +\n              'a=mid:' + transceiver.mid + '\\r\\n';\n          return;\n        }\n        // Calculate intersection of capabilities.\n        var commonCapabilities = self._getCommonCapabilities(\n            transceiver.localCapabilities,\n            transceiver.remoteCapabilities);\n\n        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,\n            'answer', self.localStreams[0]);\n      });\n\n      var desc = new RTCSessionDescription({\n        type: 'answer',\n        sdp: sdp\n      });\n      if (arguments.length && typeof arguments[0] === 'function') {\n        window.setTimeout(arguments[0], 0, desc);\n      }\n      return Promise.resolve(desc);\n    };\n\n    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n      if (!candidate) {\n        this.transceivers.forEach(function(transceiver) {\n          transceiver.iceTransport.addRemoteCandidate({});\n        });\n      } else {\n        var mLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < this.transceivers.length; i++) {\n            if (this.transceivers[i].mid === candidate.sdpMid) {\n              mLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = this.transceivers[mLineIndex];\n        if (transceiver) {\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return;\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component !== '1') {\n            return;\n          }\n          // A dirty hack to make samples work.\n          if (cand.type === 'endOfCandidates') {\n            cand = {};\n          }\n          transceiver.iceTransport.addRemoteCandidate(cand);\n\n          // update the remoteDescription.\n          var sections = SDPUtils.splitSections(this.remoteDescription.sdp);\n          sections[mLineIndex + 1] += (cand.type ? candidate.candidate.trim()\n              : 'a=end-of-candidates') + '\\r\\n';\n          this.remoteDescription.sdp = sections.join('');\n        }\n      }\n      if (arguments.length > 1 && typeof arguments[1] === 'function') {\n        window.setTimeout(arguments[1], 0);\n      }\n      return Promise.resolve();\n    };\n\n    window.RTCPeerConnection.prototype.getStats = function() {\n      var promises = [];\n      this.transceivers.forEach(function(transceiver) {\n        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n            'dtlsTransport'].forEach(function(method) {\n              if (transceiver[method]) {\n                promises.push(transceiver[method].getStats());\n              }\n            });\n      });\n      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&\n          arguments[1];\n      return new Promise(function(resolve) {\n        // shim getStats with maplike support\n        var results = new Map();\n        Promise.all(promises).then(function(res) {\n          res.forEach(function(result) {\n            Object.keys(result).forEach(function(id) {\n              results.set(id, result[id]);\n              results[id] = result[id];\n            });\n          });\n          if (cb) {\n            window.setTimeout(cb, 0, results);\n          }\n          resolve(results);\n        });\n      });\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimPeerConnection: edgeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/edge/getusermedia.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\n// Expose public methods.\nmodule.exports = function() {\n  var shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(function(e) {\n      return Promise.reject(shimError_(e));\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar browserDetails = require('../utils').browserDetails;\n\nvar firefoxShim = {\n  shimOnTrack: function() {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function() {\n    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this.mozSrcObject;\n          },\n          set: function(stream) {\n            this.mozSrcObject = stream;\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function() {\n    if (typeof window !== 'object' || !(window.RTCPeerConnection ||\n        window.mozRTCPeerConnection)) {\n      return; // probably media.peerconnection.enabled=false in about:config\n    }\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (browserDetails.version < 38) {\n          // .urls is not supported in FF < 38.\n          // create RTCIceServers with a single url.\n          if (pcConfig && pcConfig.iceServers) {\n            var newIceServers = [];\n            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n              var server = pcConfig.iceServers[i];\n              if (server.hasOwnProperty('urls')) {\n                for (var j = 0; j < server.urls.length; j++) {\n                  var newServer = {\n                    url: server.urls[j]\n                  };\n                  if (server.urls[j].indexOf('turn') === 0) {\n                    newServer.username = server.username;\n                    newServer.credential = server.credential;\n                  }\n                  newIceServers.push(newServer);\n                }\n              } else {\n                newIceServers.push(pcConfig.iceServers[i]);\n              }\n            }\n            pcConfig.iceServers = newIceServers;\n          }\n        }\n        return new mozRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;\n\n      // wrap static methods. Currently just generateCertificate.\n      if (mozRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return mozRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n\n      window.RTCSessionDescription = mozRTCSessionDescription;\n      window.RTCIceCandidate = mozRTCIceCandidate;\n    }\n\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = RTCPeerConnection.prototype[method];\n          RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                RTCIceCandidate : RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        RTCPeerConnection.prototype.addIceCandidate;\n    RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n\n    if (browserDetails.version < 48) {\n      // shim getStats with maplike support\n      var makeMapStats = function(stats) {\n        var map = new Map();\n        Object.keys(stats).forEach(function(key) {\n          map.set(key, stats[key]);\n          map[key] = stats[key];\n        });\n        return map;\n      };\n\n      var nativeGetStats = RTCPeerConnection.prototype.getStats;\n      RTCPeerConnection.prototype.getStats = function(selector, onSucc, onErr) {\n        return nativeGetStats.apply(this, [selector || null])\n          .then(function(stats) {\n            return makeMapStats(stats);\n          })\n          .then(onSucc, onErr);\n      };\n    }\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimOnTrack: firefoxShim.shimOnTrack,\n  shimSourceObject: firefoxShim.shimSourceObject,\n  shimPeerConnection: firefoxShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/firefox/getusermedia.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar logging = require('../utils').log;\nvar browserDetails = require('../utils').browserDetails;\n\n// Expose public methods.\nmodule.exports = function() {\n  var shimError_ = function(e) {\n    return {\n      name: {\n        SecurityError: 'NotAllowedError',\n        PermissionDeniedError: 'NotAllowedError'\n      }[e.name] || e.name,\n      message: {\n        'The operation is insecure.': 'The request is not allowed by the ' +\n        'user agent or the platform in the current context.'\n      }[e.message] || e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  // getUserMedia constraints shim.\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    var constraintsToFF37_ = function(c) {\n      if (typeof c !== 'object' || c.require) {\n        return c;\n      }\n      var require = [];\n      Object.keys(c).forEach(function(key) {\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n          return;\n        }\n        var r = c[key] = (typeof c[key] === 'object') ?\n            c[key] : {ideal: c[key]};\n        if (r.min !== undefined ||\n            r.max !== undefined || r.exact !== undefined) {\n          require.push(key);\n        }\n        if (r.exact !== undefined) {\n          if (typeof r.exact === 'number') {\n            r. min = r.max = r.exact;\n          } else {\n            c[key] = r.exact;\n          }\n          delete r.exact;\n        }\n        if (r.ideal !== undefined) {\n          c.advanced = c.advanced || [];\n          var oc = {};\n          if (typeof r.ideal === 'number') {\n            oc[key] = {min: r.ideal, max: r.ideal};\n          } else {\n            oc[key] = r.ideal;\n          }\n          c.advanced.push(oc);\n          delete r.ideal;\n          if (!Object.keys(r).length) {\n            delete c[key];\n          }\n        }\n      });\n      if (require.length) {\n        c.require = require;\n      }\n      return c;\n    };\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (browserDetails.version < 38) {\n      logging('spec: ' + JSON.stringify(constraints));\n      if (constraints.audio) {\n        constraints.audio = constraintsToFF37_(constraints.audio);\n      }\n      if (constraints.video) {\n        constraints.video = constraintsToFF37_(constraints.video);\n      }\n      logging('ff37: ' + JSON.stringify(constraints));\n    }\n    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {\n      onError(shimError_(e));\n    });\n  };\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      getUserMedia_(constraints, resolve, reject);\n    });\n  };\n\n  // Shim for mediaDevices on older versions.\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,\n      addEventListener: function() { },\n      removeEventListener: function() { }\n    };\n  }\n  navigator.mediaDevices.enumerateDevices =\n      navigator.mediaDevices.enumerateDevices || function() {\n        return new Promise(function(resolve) {\n          var infos = [\n            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n          ];\n          resolve(infos);\n        });\n      };\n\n  if (browserDetails.version < 41) {\n    // Work around http://bugzil.la/1169665\n    var orgEnumerateDevices =\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n    navigator.mediaDevices.enumerateDevices = function() {\n      return orgEnumerateDevices().then(undefined, function(e) {\n        if (e.name === 'NotFoundError') {\n          return [];\n        }\n        throw e;\n      });\n    };\n  }\n  if (browserDetails.version < 49) {\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      return origGetUserMedia(c).then(function(stream) {\n        // Work around https://bugzil.la/802326\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(function(track) {\n            track.stop();\n          });\n          throw new DOMException('The object can not be found here.',\n                                 'NotFoundError');\n        }\n        return stream;\n      }, function(e) {\n        return Promise.reject(shimError_(e));\n      });\n    };\n  }\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    if (browserDetails.version < 44) {\n      return getUserMedia_(constraints, onSuccess, onError);\n    }\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    console.warn('navigator.getUserMedia has been replaced by ' +\n                 'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter/src/js/safari/safari_shim.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nvar safariShim = {\n  // TODO: DrAlex, should be here, double check against LayoutTests\n  // shimOnTrack: function() { },\n\n  // TODO: once the back-end for the mac port is done, add.\n  // TODO: check for webkitGTK+\n  // shimPeerConnection: function() { },\n\n  shimGetUserMedia: function() {\n    navigator.getUserMedia = navigator.webkitGetUserMedia;\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimGetUserMedia: safariShim.shimGetUserMedia\n  // TODO\n  // shimOnTrack: safariShim.shimOnTrack,\n  // shimPeerConnection: safariShim.shimPeerConnection\n};\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc/peer.js":"var util = require('util');\nvar webrtc = require('webrtcsupport');\nvar PeerConnection = require('rtcpeerconnection');\nvar WildEmitter = require('wildemitter');\nvar FileTransfer = require('filetransfer');\n\n// the inband-v1 protocol is sending metadata inband in a serialized JSON object\n// followed by the actual data. Receiver closes the datachannel upon completion\nvar INBAND_FILETRANSFER_V1 = 'https://simplewebrtc.com/protocol/filetransfer#inband-v1';\n\nfunction Peer(options) {\n    var self = this;\n\n    this.id = options.id;\n    this.parent = options.parent;\n    this.type = options.type || 'video';\n    this.oneway = options.oneway || false;\n    this.sharemyscreen = options.sharemyscreen || false;\n    this.browserPrefix = options.prefix;\n    this.stream = options.stream;\n    this.enableDataChannels = options.enableDataChannels === undefined ? this.parent.config.enableDataChannels : options.enableDataChannels;\n    this.receiveMedia = options.receiveMedia || this.parent.config.receiveMedia;\n    this.channels = {};\n    this.sid = options.sid || Date.now().toString();\n    // Create an RTCPeerConnection via the polyfill\n    this.pc = new PeerConnection(this.parent.config.peerConnectionConfig, this.parent.config.peerConnectionConstraints);\n    this.pc.on('ice', this.onIceCandidate.bind(this));\n    this.pc.on('offer', function (offer) {\n        self.send('offer', offer);\n    });\n    this.pc.on('answer', function (offer) {\n        self.send('answer', offer);\n    });\n    this.pc.on('addStream', this.handleRemoteStreamAdded.bind(this));\n    this.pc.on('addChannel', this.handleDataChannelAdded.bind(this));\n    this.pc.on('removeStream', this.handleStreamRemoved.bind(this));\n    // Just fire negotiation needed events for now\n    // When browser re-negotiation handling seems to work\n    // we can use this as the trigger for starting the offer/answer process\n    // automatically. We'll just leave it be for now while this stabalizes.\n    this.pc.on('negotiationNeeded', this.emit.bind(this, 'negotiationNeeded'));\n    this.pc.on('iceConnectionStateChange', this.emit.bind(this, 'iceConnectionStateChange'));\n    this.pc.on('iceConnectionStateChange', function () {\n        switch (self.pc.iceConnectionState) {\n        case 'failed':\n            // currently, in chrome only the initiator goes to failed\n            // so we need to signal this to the peer\n            if (self.pc.pc.peerconnection.localDescription.type === 'offer') {\n                self.parent.emit('iceFailed', self);\n                self.send('connectivityError');\n            }\n            break;\n        }\n    });\n    this.pc.on('signalingStateChange', this.emit.bind(this, 'signalingStateChange'));\n    this.logger = this.parent.logger;\n\n    // handle screensharing/broadcast mode\n    if (options.type === 'screen') {\n        if (this.parent.localScreen && this.sharemyscreen) {\n            this.logger.log('adding local screen stream to peer connection');\n            this.pc.addStream(this.parent.localScreen);\n            this.broadcaster = options.broadcaster;\n        }\n    } else {\n        this.parent.localStreams.forEach(function (stream) {\n            self.pc.addStream(stream);\n        });\n    }\n\n    // call emitter constructor\n    WildEmitter.call(this);\n\n    this.on('channelOpen', function (channel) {\n        if (channel.protocol === INBAND_FILETRANSFER_V1) {\n            channel.onmessage = function (event) {\n                var metadata = JSON.parse(event.data);\n                var receiver = new FileTransfer.Receiver();\n                receiver.receive(metadata, channel);\n                self.emit('fileTransfer', metadata, receiver);\n                receiver.on('receivedFile', function (file, metadata) {\n                    receiver.channel.close();\n                });\n            };\n        }\n    });\n\n    // proxy events to parent\n    this.on('*', function () {\n        self.parent.emit.apply(self.parent, arguments);\n    });\n}\n\nutil.inherits(Peer, WildEmitter);\n\nPeer.prototype.handleMessage = function (message) {\n    var self = this;\n\n    this.logger.log('getting', message.type, message);\n\n    if (message.prefix) this.browserPrefix = message.prefix;\n\n    if (message.type === 'offer') {\n        // workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1064247\n        message.payload.sdp = message.payload.sdp.replace('a=fmtp:0 profile-level-id=0x42e00c;packetization-mode=1\\r\\n', '');\n        this.pc.handleOffer(message.payload, function (err) {\n            if (err) {\n                return;\n            }\n            // auto-accept\n            self.pc.answer(self.receiveMedia, function (err, sessionDescription) {\n                //self.send('answer', sessionDescription);\n            });\n        });\n    } else if (message.type === 'answer') {\n        this.pc.handleAnswer(message.payload);\n    } else if (message.type === 'candidate') {\n        this.pc.processIce(message.payload);\n    } else if (message.type === 'connectivityError') {\n        this.parent.emit('connectivityError', self);\n    } else if (message.type === 'mute') {\n        this.parent.emit('mute', {id: message.from, name: message.payload.name});\n    } else if (message.type === 'unmute') {\n        this.parent.emit('unmute', {id: message.from, name: message.payload.name});\n    }\n};\n\n// send via signalling channel\nPeer.prototype.send = function (messageType, payload) {\n    var message = {\n        to: this.id,\n        sid: this.sid,\n        broadcaster: this.broadcaster,\n        roomType: this.type,\n        type: messageType,\n        payload: payload,\n        prefix: webrtc.prefix\n    };\n    this.logger.log('sending', messageType, message);\n    this.parent.emit('message', message);\n};\n\n// send via data channel\n// returns true when message was sent and false if channel is not open\nPeer.prototype.sendDirectly = function (channel, messageType, payload) {\n    var message = {\n        type: messageType,\n        payload: payload\n    };\n    this.logger.log('sending via datachannel', channel, messageType, message);\n    var dc = this.getDataChannel(channel);\n    if (dc.readyState != 'open') return false;\n    dc.send(JSON.stringify(message));\n    return true;\n};\n\n// Internal method registering handlers for a data channel and emitting events on the peer\nPeer.prototype._observeDataChannel = function (channel) {\n    var self = this;\n    channel.onclose = this.emit.bind(this, 'channelClose', channel);\n    channel.onerror = this.emit.bind(this, 'channelError', channel);\n    channel.onmessage = function (event) {\n        self.emit('channelMessage', self, channel.label, JSON.parse(event.data), channel, event);\n    };\n    channel.onopen = this.emit.bind(this, 'channelOpen', channel);\n};\n\n// Fetch or create a data channel by the given name\nPeer.prototype.getDataChannel = function (name, opts) {\n    if (!webrtc.supportDataChannel) return this.emit('error', new Error('createDataChannel not supported'));\n    var channel = this.channels[name];\n    opts || (opts = {});\n    if (channel) return channel;\n    // if we don't have one by this label, create it\n    channel = this.channels[name] = this.pc.createDataChannel(name, opts);\n    this._observeDataChannel(channel);\n    return channel;\n};\n\nPeer.prototype.onIceCandidate = function (candidate) {\n    if (this.closed) return;\n    if (candidate) {\n        this.send('candidate', candidate);\n    } else {\n        this.logger.log(\"End of candidates.\");\n    }\n};\n\nPeer.prototype.start = function () {\n    var self = this;\n\n    // well, the webrtc api requires that we either\n    // a) create a datachannel a priori\n    // b) do a renegotiation later to add the SCTP m-line\n    // Let's do (a) first...\n    if (this.enableDataChannels) {\n        this.getDataChannel('simplewebrtc');\n    }\n\n    this.pc.offer(this.receiveMedia, function (err, sessionDescription) {\n        //self.send('offer', sessionDescription);\n    });\n};\n\nPeer.prototype.icerestart = function () {\n    var constraints = this.receiveMedia;\n    constraints.mandatory.IceRestart = true;\n    this.pc.offer(constraints, function (err, success) { });\n};\n\nPeer.prototype.end = function () {\n    if (this.closed) return;\n    this.pc.close();\n    this.handleStreamRemoved();\n};\n\nPeer.prototype.handleRemoteStreamAdded = function (event) {\n    var self = this;\n    if (this.stream) {\n        this.logger.warn('Already have a remote stream');\n    } else {\n        this.stream = event.stream;\n        // FIXME: addEventListener('ended', ...) would be nicer\n        // but does not work in firefox \n        this.stream.onended = function () {\n            self.end();\n        };\n        this.parent.emit('peerStreamAdded', this);\n    }\n};\n\nPeer.prototype.handleStreamRemoved = function () {\n    this.parent.peers.splice(this.parent.peers.indexOf(this), 1);\n    this.closed = true;\n    this.parent.emit('peerStreamRemoved', this);\n};\n\nPeer.prototype.handleDataChannelAdded = function (channel) {\n    this.channels[channel.label] = channel;\n    this._observeDataChannel(channel);\n};\n\nPeer.prototype.sendFile = function (file) {\n    var sender = new FileTransfer.Sender();\n    var dc = this.getDataChannel('filetransfer' + (new Date()).getTime(), {\n        protocol: INBAND_FILETRANSFER_V1\n    });\n    // override onopen\n    dc.onopen = function () {\n        dc.send(JSON.stringify({\n            size: file.size,\n            name: file.name\n        }));\n        sender.send(file, dc);\n    };\n    // override onclose\n    dc.onclose = function () {\n        console.log('sender received transfer');\n        sender.emit('complete');\n    };\n    return sender;\n};\n\nmodule.exports = Peer;\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc-adapter-test/adapter.js":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* More information about these options at jshint.com/docs/options */\n/* jshint browser: true, camelcase: true, curly: true, devel: true,\n   eqeqeq: true, forin: false, globalstrict: true, node: true,\n   quotmark: single, undef: true, unused: strict */\n/* global mozRTCIceCandidate, mozRTCPeerConnection, Promise,\nmozRTCSessionDescription, webkitRTCPeerConnection, MediaStreamTrack,\nMediaStream, RTCIceGatherer, RTCIceTransport, RTCDtlsTransport,\nRTCRtpSender, RTCRtpReceiver*/\n/* exported trace,requestUserMedia */\n\n'use strict';\n\nvar getUserMedia = null;\nvar attachMediaStream = null;\nvar reattachMediaStream = null;\nvar webrtcDetectedBrowser = null;\nvar webrtcDetectedVersion = null;\nvar webrtcMinimumVersion = null;\nvar webrtcUtils = {\n  log: function() {\n    // suppress console.log output when being included as a module.\n    if (typeof module !== 'undefined' ||\n        typeof require === 'function' && typeof define === 'function') {\n      return;\n    }\n    console.log.apply(console, arguments);\n  },\n  extractVersion: function(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  }\n};\n\nfunction trace(text) {\n  // This function is used for logging.\n  if (text[text.length - 1] === '\\n') {\n    text = text.substring(0, text.length - 1);\n  }\n  if (window.performance) {\n    var now = (window.performance.now() / 1000).toFixed(3);\n    webrtcUtils.log(now + ': ' + text);\n  } else {\n    webrtcUtils.log(text);\n  }\n}\n\nif (typeof window === 'object') {\n  if (window.HTMLMediaElement &&\n    !('srcObject' in window.HTMLMediaElement.prototype)) {\n    // Shim the srcObject property, once, when HTMLMediaElement is found.\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n      get: function() {\n        // If prefixed srcObject property exists, return it.\n        // Otherwise use the shimmed property, _srcObject\n        return 'mozSrcObject' in this ? this.mozSrcObject : this._srcObject;\n      },\n      set: function(stream) {\n        if ('mozSrcObject' in this) {\n          this.mozSrcObject = stream;\n        } else {\n          // Use _srcObject as a private property for this shim\n          this._srcObject = stream;\n          // TODO: revokeObjectUrl(this.src) when !stream to release resources?\n          this.src = URL.createObjectURL(stream);\n        }\n      }\n    });\n  }\n  // Proxy existing globals\n  getUserMedia = window.navigator && window.navigator.getUserMedia;\n}\n\n// Attach a media stream to an element.\nattachMediaStream = function(element, stream) {\n  element.srcObject = stream;\n};\n\nreattachMediaStream = function(to, from) {\n  to.srcObject = from.srcObject;\n};\n\nif (typeof window === 'undefined' || !window.navigator) {\n  webrtcUtils.log('This does not appear to be a browser');\n  webrtcDetectedBrowser = 'not a browser';\n} else if (navigator.mozGetUserMedia) {\n  webrtcUtils.log('This appears to be Firefox');\n\n  webrtcDetectedBrowser = 'firefox';\n\n  // the detected firefox version.\n  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,\n      /Firefox\\/([0-9]+)\\./, 1);\n\n  // the minimum firefox version still supported by adapter.\n  webrtcMinimumVersion = 31;\n\n  // Shim for RTCPeerConnection on older versions.\n  if (!window.RTCPeerConnection) {\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n      if (webrtcDetectedVersion < 38) {\n        // .urls is not supported in FF < 38.\n        // create RTCIceServers with a single url.\n        if (pcConfig && pcConfig.iceServers) {\n          var newIceServers = [];\n          for (var i = 0; i < pcConfig.iceServers.length; i++) {\n            var server = pcConfig.iceServers[i];\n            if (server.hasOwnProperty('urls')) {\n              for (var j = 0; j < server.urls.length; j++) {\n                var newServer = {\n                  url: server.urls[j]\n                };\n                if (server.urls[j].indexOf('turn') === 0) {\n                  newServer.username = server.username;\n                  newServer.credential = server.credential;\n                }\n                newIceServers.push(newServer);\n              }\n            } else {\n              newIceServers.push(pcConfig.iceServers[i]);\n            }\n          }\n          pcConfig.iceServers = newIceServers;\n        }\n      }\n      return new mozRTCPeerConnection(pcConfig, pcConstraints); // jscs:ignore requireCapitalizedConstructors\n    };\n    window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;\n\n    // wrap static methods. Currently just generateCertificate.\n    if (mozRTCPeerConnection.generateCertificate) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          if (arguments.length) {\n            return mozRTCPeerConnection.generateCertificate.apply(null,\n                arguments);\n          } else {\n            return mozRTCPeerConnection.generateCertificate;\n          }\n        }\n      });\n    }\n\n    window.RTCSessionDescription = mozRTCSessionDescription;\n    window.RTCIceCandidate = mozRTCIceCandidate;\n  }\n\n  // getUserMedia constraints shim.\n  getUserMedia = function(constraints, onSuccess, onError) {\n    var constraintsToFF37 = function(c) {\n      if (typeof c !== 'object' || c.require) {\n        return c;\n      }\n      var require = [];\n      Object.keys(c).forEach(function(key) {\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n          return;\n        }\n        var r = c[key] = (typeof c[key] === 'object') ?\n            c[key] : {ideal: c[key]};\n        if (r.min !== undefined ||\n            r.max !== undefined || r.exact !== undefined) {\n          require.push(key);\n        }\n        if (r.exact !== undefined) {\n          if (typeof r.exact === 'number') {\n            r.min = r.max = r.exact;\n          } else {\n            c[key] = r.exact;\n          }\n          delete r.exact;\n        }\n        if (r.ideal !== undefined) {\n          c.advanced = c.advanced || [];\n          var oc = {};\n          if (typeof r.ideal === 'number') {\n            oc[key] = {min: r.ideal, max: r.ideal};\n          } else {\n            oc[key] = r.ideal;\n          }\n          c.advanced.push(oc);\n          delete r.ideal;\n          if (!Object.keys(r).length) {\n            delete c[key];\n          }\n        }\n      });\n      if (require.length) {\n        c.require = require;\n      }\n      return c;\n    };\n    if (webrtcDetectedVersion < 38) {\n      webrtcUtils.log('spec: ' + JSON.stringify(constraints));\n      if (constraints.audio) {\n        constraints.audio = constraintsToFF37(constraints.audio);\n      }\n      if (constraints.video) {\n        constraints.video = constraintsToFF37(constraints.video);\n      }\n      webrtcUtils.log('ff37: ' + JSON.stringify(constraints));\n    }\n    return navigator.mozGetUserMedia(constraints, onSuccess, onError);\n  };\n\n  navigator.getUserMedia = getUserMedia;\n\n  // Shim for mediaDevices on older versions.\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: requestUserMedia,\n      addEventListener: function() { },\n      removeEventListener: function() { }\n    };\n  }\n  navigator.mediaDevices.enumerateDevices =\n      navigator.mediaDevices.enumerateDevices || function() {\n    return new Promise(function(resolve) {\n      var infos = [\n        {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n        {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n      ];\n      resolve(infos);\n    });\n  };\n\n  if (webrtcDetectedVersion < 41) {\n    // Work around http://bugzil.la/1169665\n    var orgEnumerateDevices =\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n    navigator.mediaDevices.enumerateDevices = function() {\n      return orgEnumerateDevices().then(undefined, function(e) {\n        if (e.name === 'NotFoundError') {\n          return [];\n        }\n        throw e;\n      });\n    };\n  }\n} else if (navigator.webkitGetUserMedia && window.webkitRTCPeerConnection) {\n  webrtcUtils.log('This appears to be Chrome');\n\n  webrtcDetectedBrowser = 'chrome';\n\n  // the detected chrome version.\n  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,\n      /Chrom(e|ium)\\/([0-9]+)\\./, 2);\n\n  // the minimum chrome version still supported by adapter.\n  webrtcMinimumVersion = 38;\n\n  // The RTCPeerConnection object.\n  window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // Translate iceTransportPolicy to iceTransports,\n    // see https://code.google.com/p/webrtc/issues/detail?id=4869\n    if (pcConfig && pcConfig.iceTransportPolicy) {\n      pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n    }\n\n    var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints); // jscs:ignore requireCapitalizedConstructors\n    var origGetStats = pc.getStats.bind(pc);\n    pc.getStats = function(selector, successCallback, errorCallback) { // jshint ignore: line\n      var self = this;\n      var args = arguments;\n\n      // If selector is a function then we are in the old style stats so just\n      // pass back the original getStats format to avoid breaking old users.\n      if (arguments.length > 0 && typeof selector === 'function') {\n        return origGetStats(selector, successCallback);\n      }\n\n      var fixChromeStats = function(response) {\n        var standardReport = {};\n        var reports = response.result();\n        reports.forEach(function(report) {\n          var standardStats = {\n            id: report.id,\n            timestamp: report.timestamp,\n            type: report.type\n          };\n          report.names().forEach(function(name) {\n            standardStats[name] = report.stat(name);\n          });\n          standardReport[standardStats.id] = standardStats;\n        });\n\n        return standardReport;\n      };\n\n      if (arguments.length >= 2) {\n        var successCallbackWrapper = function(response) {\n          args[1](fixChromeStats(response));\n        };\n\n        return origGetStats.apply(this, [successCallbackWrapper, arguments[0]]);\n      }\n\n      // promise-support\n      return new Promise(function(resolve, reject) {\n        if (args.length === 1 && selector === null) {\n          origGetStats.apply(self, [\n              function(response) {\n                resolve.apply(null, [fixChromeStats(response)]);\n              }, reject]);\n        } else {\n          origGetStats.apply(self, [resolve, reject]);\n        }\n      });\n    };\n\n    return pc;\n  };\n  window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;\n\n  // wrap static methods. Currently just generateCertificate.\n  if (webkitRTCPeerConnection.generateCertificate) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get: function() {\n        if (arguments.length) {\n          return webkitRTCPeerConnection.generateCertificate.apply(null,\n              arguments);\n        } else {\n          return webkitRTCPeerConnection.generateCertificate;\n        }\n      }\n    });\n  }\n\n  // add promise support\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    var nativeMethod = webkitRTCPeerConnection.prototype[method];\n    webkitRTCPeerConnection.prototype[method] = function() {\n      var self = this;\n      if (arguments.length < 1 || (arguments.length === 1 &&\n          typeof(arguments[0]) === 'object')) {\n        var opts = arguments.length === 1 ? arguments[0] : undefined;\n        return new Promise(function(resolve, reject) {\n          nativeMethod.apply(self, [resolve, reject, opts]);\n        });\n      } else {\n        return nativeMethod.apply(this, arguments);\n      }\n    };\n  });\n\n  ['setLocalDescription', 'setRemoteDescription',\n      'addIceCandidate'].forEach(function(method) {\n    var nativeMethod = webkitRTCPeerConnection.prototype[method];\n    webkitRTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      var self = this;\n      return new Promise(function(resolve, reject) {\n        nativeMethod.apply(self, [args[0],\n            function() {\n              resolve();\n              if (args.length >= 2) {\n                args[1].apply(null, []);\n              }\n            },\n            function(err) {\n              reject(err);\n              if (args.length >= 3) {\n                args[2].apply(null, [err]);\n              }\n            }]\n          );\n      });\n    };\n  });\n\n  // getUserMedia constraints shim.\n  var constraintsToChrome = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    var cc = {};\n    Object.keys(c).forEach(function(key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      var oldname = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function(mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  getUserMedia = function(constraints, onSuccess, onError) {\n    if (constraints.audio) {\n      constraints.audio = constraintsToChrome(constraints.audio);\n    }\n    if (constraints.video) {\n      constraints.video = constraintsToChrome(constraints.video);\n    }\n    webrtcUtils.log('chrome: ' + JSON.stringify(constraints));\n    return navigator.webkitGetUserMedia(constraints, onSuccess, onError);\n  };\n  navigator.getUserMedia = getUserMedia;\n\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: requestUserMedia,\n                              enumerateDevices: function() {\n      return new Promise(function(resolve) {\n        var kinds = {audio: 'audioinput', video: 'videoinput'};\n        return MediaStreamTrack.getSources(function(devices) {\n          resolve(devices.map(function(device) {\n            return {label: device.label,\n                    kind: kinds[device.kind],\n                    deviceId: device.id,\n                    groupId: ''};\n          }));\n        });\n      });\n    }};\n  }\n\n  // A shim for getUserMedia method on the mediaDevices object.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (!navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      return requestUserMedia(constraints);\n    };\n  } else {\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n    // function which returns a Promise, it does not accept spec-style\n    // constraints.\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      webrtcUtils.log('spec:   ' + JSON.stringify(c)); // whitespace for alignment\n      c.audio = constraintsToChrome(c.audio);\n      c.video = constraintsToChrome(c.video);\n      webrtcUtils.log('chrome: ' + JSON.stringify(c));\n      return origGetUserMedia(c);\n    };\n  }\n\n  // Dummy devicechange event methods.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n    navigator.mediaDevices.addEventListener = function() {\n      webrtcUtils.log('Dummy mediaDevices.addEventListener called.');\n    };\n  }\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n    navigator.mediaDevices.removeEventListener = function() {\n      webrtcUtils.log('Dummy mediaDevices.removeEventListener called.');\n    };\n  }\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    if (webrtcDetectedVersion >= 43) {\n      element.srcObject = stream;\n    } else if (typeof element.src !== 'undefined') {\n      element.src = URL.createObjectURL(stream);\n    } else {\n      webrtcUtils.log('Error attaching stream to element.');\n    }\n  };\n  reattachMediaStream = function(to, from) {\n    if (webrtcDetectedVersion >= 43) {\n      to.srcObject = from.srcObject;\n    } else {\n      to.src = from.src;\n    }\n  };\n\n} else if (navigator.mediaDevices && navigator.userAgent.match(\n    /Edge\\/(\\d+).(\\d+)$/)) {\n  webrtcUtils.log('This appears to be Edge');\n  webrtcDetectedBrowser = 'edge';\n\n  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,\n      /Edge\\/(\\d+).(\\d+)$/, 2);\n\n  // The minimum version still supported by adapter.\n  // This is the build number for Edge.\n  webrtcMinimumVersion = 10547;\n\n  if (window.RTCIceGatherer) {\n    // Generate an alphanumeric identifier for cname or mids.\n    // TODO: use UUIDs instead? https://gist.github.com/jed/982883\n    var generateIdentifier = function() {\n      return Math.random().toString(36).substr(2, 10);\n    };\n\n    // The RTCP CNAME used by all peerconnections from the same JS.\n    var localCName = generateIdentifier();\n\n    // SDP helpers - to be moved into separate module.\n    var SDPUtils = {};\n\n    // Splits SDP into lines, dealing with both CRLF and LF.\n    SDPUtils.splitLines = function(blob) {\n      return blob.trim().split('\\n').map(function(line) {\n        return line.trim();\n      });\n    };\n\n    // Splits SDP into sessionpart and mediasections. Ensures CRLF.\n    SDPUtils.splitSections = function(blob) {\n      var parts = blob.split('\\r\\nm=');\n      return parts.map(function(part, index) {\n        return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n      });\n    };\n\n    // Returns lines that start with a certain prefix.\n    SDPUtils.matchPrefix = function(blob, prefix) {\n      return SDPUtils.splitLines(blob).filter(function(line) {\n        return line.indexOf(prefix) === 0;\n      });\n    };\n\n    // Parses an ICE candidate line. Sample input:\n    // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8 rport 55996\"\n    SDPUtils.parseCandidate = function(line) {\n      var parts;\n      // Parse both variants.\n      if (line.indexOf('a=candidate:') === 0) {\n        parts = line.substring(12).split(' ');\n      } else {\n        parts = line.substring(10).split(' ');\n      }\n\n      var candidate = {\n        foundation: parts[0],\n        component: parts[1],\n        protocol: parts[2].toLowerCase(),\n        priority: parseInt(parts[3], 10),\n        ip: parts[4],\n        port: parseInt(parts[5], 10),\n        // skip parts[6] == 'typ'\n        type: parts[7]\n      };\n\n      for (var i = 8; i < parts.length; i += 2) {\n        switch (parts[i]) {\n          case 'raddr':\n            candidate.relatedAddress = parts[i + 1];\n            break;\n          case 'rport':\n            candidate.relatedPort = parseInt(parts[i + 1], 10);\n            break;\n          case 'tcptype':\n            candidate.tcpType = parts[i + 1];\n            break;\n          default: // Unknown extensions are silently ignored.\n            break;\n        }\n      }\n      return candidate;\n    };\n\n    // Translates a candidate object into SDP candidate attribute.\n    SDPUtils.writeCandidate = function(candidate) {\n      var sdp = [];\n      sdp.push(candidate.foundation);\n      sdp.push(candidate.component);\n      sdp.push(candidate.protocol.toUpperCase());\n      sdp.push(candidate.priority);\n      sdp.push(candidate.ip);\n      sdp.push(candidate.port);\n\n      var type = candidate.type;\n      sdp.push('typ');\n      sdp.push(type);\n      if (type !== 'host' && candidate.relatedAddress &&\n          candidate.relatedPort) {\n        sdp.push('raddr');\n        sdp.push(candidate.relatedAddress); // was: relAddr\n        sdp.push('rport');\n        sdp.push(candidate.relatedPort); // was: relPort\n      }\n      if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n        sdp.push('tcptype');\n        sdp.push(candidate.tcpType);\n      }\n      return 'candidate:' + sdp.join(' ');\n    };\n\n    // Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n    // a=rtpmap:111 opus/48000/2\n    SDPUtils.parseRtpMap = function(line) {\n      var parts = line.substr(9).split(' ');\n      var parsed = {\n        payloadType: parseInt(parts.shift(), 10) // was: id\n      };\n\n      parts = parts[0].split('/');\n\n      parsed.name = parts[0];\n      parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n      parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1; // was: channels\n      return parsed;\n    };\n\n    // Generate an a=rtpmap line from RTCRtpCodecCapability or RTCRtpCodecParameters.\n    SDPUtils.writeRtpMap = function(codec) {\n      var pt = codec.payloadType;\n      if (codec.preferredPayloadType !== undefined) {\n        pt = codec.preferredPayloadType;\n      }\n      return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n          (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\\r\\n';\n    };\n\n    // Parses an ftmp line, returns dictionary. Sample input:\n    // a=fmtp:96 vbr=on;cng=on\n    // Also deals with vbr=on; cng=on\n    SDPUtils.parseFmtp = function(line) {\n      var parsed = {};\n      var kv;\n      var parts = line.substr(line.indexOf(' ') + 1).split(';');\n      for (var j = 0; j < parts.length; j++) {\n        kv = parts[j].trim().split('=');\n        parsed[kv[0].trim()] = kv[1];\n      }\n      return parsed;\n    };\n\n    // Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\n    SDPUtils.writeFtmp = function(codec) {\n      var line = '';\n      var pt = codec.payloadType;\n      if (codec.preferredPayloadType !== undefined) {\n        pt = codec.preferredPayloadType;\n      }\n      if (codec.parameters && codec.parameters.length) {\n        var params = [];\n        Object.keys(codec.parameters).forEach(function(param) {\n          params.push(param + '=' + codec.parameters[param]);\n        });\n        line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n      }\n      return line;\n    };\n\n    // Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n    // a=rtcp-fb:98 nack rpsi\n    SDPUtils.parseRtcpFb = function(line) {\n      var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n      return {\n        type: parts.shift(),\n        parameter: parts.join(' ')\n      };\n    };\n    // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\n    SDPUtils.writeRtcpFb = function(codec) {\n      var lines = '';\n      var pt = codec.payloadType;\n      if (codec.preferredPayloadType !== undefined) {\n        pt = codec.preferredPayloadType;\n      }\n      if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n        // FIXME: special handling for trr-int?\n        codec.rtcpFeedback.forEach(function(fb) {\n          lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + ' ' + fb.parameter +\n              '\\r\\n';\n        });\n      }\n      return lines;\n    };\n\n    // Parses an RFC 5576 ssrc media attribute. Sample input:\n    // a=ssrc:3735928559 cname:something\n    SDPUtils.parseSsrcMedia = function(line) {\n      var sp = line.indexOf(' ');\n      var parts = {\n        ssrc: line.substr(7, sp - 7),\n      };\n      var colon = line.indexOf(':', sp);\n      if (colon > -1) {\n        parts.attribute = line.substr(sp + 1, colon - sp - 1);\n        parts.value = line.substr(colon + 1);\n      } else {\n        parts.attribute = line.substr(sp + 1);\n      }\n      return parts;\n    };\n\n    // Extracts DTLS parameters from SDP media section or sessionpart.\n    // FIXME: for consistency with other functions this should only\n    //   get the fingerprint line as input. See also getIceParameters.\n    SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      lines = lines.concat(SDPUtils.splitLines(sessionpart)); // Search in session part, too.\n      var fpLine = lines.filter(function(line) {\n        return line.indexOf('a=fingerprint:') === 0;\n      })[0].substr(14);\n      // Note: a=setup line is ignored since we use the 'auto' role.\n      var dtlsParameters = {\n        role: 'auto',\n        fingerprints: [{\n          algorithm: fpLine.split(' ')[0],\n          value: fpLine.split(' ')[1]\n        }]\n      };\n      return dtlsParameters;\n    };\n\n    // Serializes DTLS parameters to SDP.\n    SDPUtils.writeDtlsParameters = function(params, setupType) {\n      var sdp = 'a=setup:' + setupType + '\\r\\n';\n      params.fingerprints.forEach(function(fp) {\n        sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n      });\n      return sdp;\n    };\n    // Parses ICE information from SDP media section or sessionpart.\n    // FIXME: for consistency with other functions this should only\n    //   get the ice-ufrag and ice-pwd lines as input.\n    SDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      lines = lines.concat(SDPUtils.splitLines(sessionpart)); // Search in session part, too.\n      var iceParameters = {\n        usernameFragment: lines.filter(function(line) {\n          return line.indexOf('a=ice-ufrag:') === 0;\n        })[0].substr(12),\n        password: lines.filter(function(line) {\n          return line.indexOf('a=ice-pwd:') === 0;\n        })[0].substr(10)\n      };\n      return iceParameters;\n    };\n\n    // Serializes ICE parameters to SDP.\n    SDPUtils.writeIceParameters = function(params) {\n      return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n          'a=ice-pwd:' + params.password + '\\r\\n';\n    };\n\n    // Parses the SDP media section and returns RTCRtpParameters.\n    SDPUtils.parseRtpParameters = function(mediaSection) {\n      var description = {\n        codecs: [],\n        headerExtensions: [],\n        fecMechanisms: [],\n        rtcp: []\n      };\n      var lines = SDPUtils.splitLines(mediaSection);\n      var mline = lines[0].split(' ');\n      for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n        var pt = mline[i];\n        var rtpmapline = SDPUtils.matchPrefix(\n            mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n        if (rtpmapline) {\n          var codec = SDPUtils.parseRtpMap(rtpmapline);\n          var fmtps = SDPUtils.matchPrefix(\n              mediaSection, 'a=fmtp:' + pt + ' ');\n          // Only the first a=fmtp:<pt> is considered.\n          codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n          codec.rtcpFeedback = SDPUtils.matchPrefix(\n              mediaSection, 'a=rtcp-fb:' + pt + ' ')\n            .map(SDPUtils.parseRtcpFb);\n          description.codecs.push(codec);\n        }\n      }\n      // FIXME: parse headerExtensions, fecMechanisms and rtcp.\n      return description;\n    };\n\n    // Generates parts of the SDP media section describing the capabilities / parameters.\n    SDPUtils.writeRtpDescription = function(kind, caps) {\n      var sdp = '';\n\n      // Build the mline.\n      sdp += 'm=' + kind + ' ';\n      sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n      sdp += ' UDP/TLS/RTP/SAVPF ';\n      sdp += caps.codecs.map(function(codec) {\n        if (codec.preferredPayloadType !== undefined) {\n          return codec.preferredPayloadType;\n        }\n        return codec.payloadType;\n      }).join(' ') + '\\r\\n';\n\n      sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n      sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n      // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n      caps.codecs.forEach(function(codec) {\n        sdp += SDPUtils.writeRtpMap(codec);\n        sdp += SDPUtils.writeFtmp(codec);\n        sdp += SDPUtils.writeRtcpFb(codec);\n      });\n      // FIXME: add headerExtensions, fecMechanismş and rtcp.\n      sdp += 'a=rtcp-mux\\r\\n';\n      return sdp;\n    };\n\n    SDPUtils.writeSessionBoilerplate = function() {\n      // FIXME: sess-id should be an NTP timestamp.\n      return 'v=0\\r\\n' +\n          'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\\r\\n' +\n          's=-\\r\\n' +\n          't=0 0\\r\\n';\n    };\n\n    SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n      var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n      // Map ICE parameters (ufrag, pwd) to SDP.\n      sdp += SDPUtils.writeIceParameters(\n          transceiver.iceGatherer.getLocalParameters());\n\n      // Map DTLS parameters to SDP.\n      sdp += SDPUtils.writeDtlsParameters(\n          transceiver.dtlsTransport.getLocalParameters(),\n          type === 'offer' ? 'actpass' : 'active');\n\n      sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n      if (transceiver.rtpSender && transceiver.rtpReceiver) {\n        sdp += 'a=sendrecv\\r\\n';\n      } else if (transceiver.rtpSender) {\n        sdp += 'a=sendonly\\r\\n';\n      } else if (transceiver.rtpReceiver) {\n        sdp += 'a=recvonly\\r\\n';\n      } else {\n        sdp += 'a=inactive\\r\\n';\n      }\n\n      // FIXME: for RTX there might be multiple SSRCs. Not implemented in Edge yet.\n      if (transceiver.rtpSender) {\n        var msid = 'msid:' + stream.id + ' ' +\n            transceiver.rtpSender.track.id + '\\r\\n';\n        sdp += 'a=' + msid;\n        sdp += 'a=ssrc:' + transceiver.sendSsrc + ' ' + msid;\n      }\n      // FIXME: this should be written by writeRtpDescription.\n      sdp += 'a=ssrc:' + transceiver.sendSsrc + ' cname:' +\n          localCName + '\\r\\n';\n      return sdp;\n    };\n\n    // Gets the direction from the mediaSection or the sessionpart.\n    SDPUtils.getDirection = function(mediaSection, sessionpart) {\n      // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n      var lines = SDPUtils.splitLines(mediaSection);\n      for (var i = 0; i < lines.length; i++) {\n        switch (lines[i]) {\n          case 'a=sendrecv':\n          case 'a=sendonly':\n          case 'a=recvonly':\n          case 'a=inactive':\n            return lines[i].substr(2);\n        }\n      }\n      if (sessionpart) {\n        return SDPUtils.getDirection(sessionpart);\n      }\n      return 'sendrecv';\n    };\n\n    // ORTC defines an RTCIceCandidate object but no constructor.\n    // Not implemented in Edge.\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function(args) {\n        return args;\n      };\n    }\n    // ORTC does not have a session description object but\n    // other browsers (i.e. Chrome) that will support both PC and ORTC\n    // in the future might have this defined already.\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function(args) {\n        return args;\n      };\n    }\n\n    window.RTCPeerConnection = function(config) {\n      var self = this;\n\n      this.onicecandidate = null;\n      this.onaddstream = null;\n      this.onremovestream = null;\n      this.onsignalingstatechange = null;\n      this.oniceconnectionstatechange = null;\n      this.onnegotiationneeded = null;\n      this.ondatachannel = null;\n\n      this.localStreams = [];\n      this.remoteStreams = [];\n      this.getLocalStreams = function() { return self.localStreams; };\n      this.getRemoteStreams = function() { return self.remoteStreams; };\n\n      this.localDescription = new RTCSessionDescription({\n        type: '',\n        sdp: ''\n      });\n      this.remoteDescription = new RTCSessionDescription({\n        type: '',\n        sdp: ''\n      });\n      this.signalingState = 'stable';\n      this.iceConnectionState = 'new';\n\n      this.iceOptions = {\n        gatherPolicy: 'all',\n        iceServers: []\n      };\n      if (config && config.iceTransportPolicy) {\n        switch (config.iceTransportPolicy) {\n          case 'all':\n          case 'relay':\n            this.iceOptions.gatherPolicy = config.iceTransportPolicy;\n            break;\n          case 'none':\n            // FIXME: remove once implementation and spec have added this.\n            throw new TypeError('iceTransportPolicy \"none\" not supported');\n        }\n      }\n      if (config && config.iceServers) {\n        // Edge does not like\n        // 1) stun:\n        // 2) turn: that does not have all of turn:host:port?transport=udp\n        // 3) an array of urls\n        config.iceServers.forEach(function(server) {\n          if (server.urls) {\n            var url;\n            if (typeof(server.urls) === 'string') {\n              url = server.urls;\n            } else {\n              url = server.urls[0];\n            }\n            if (url.indexOf('transport=udp') !== -1) {\n              self.iceServers.push({\n                username: server.username,\n                credential: server.credential,\n                urls: url\n              });\n            }\n          }\n        });\n      }\n\n      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n      // everything that is needed to describe a SDP m-line.\n      this.transceivers = [];\n\n      // since the iceGatherer is currently created in createOffer but we\n      // must not emit candidates until after setLocalDescription we buffer\n      // them in this array.\n      this._localIceCandidatesBuffer = [];\n    };\n\n    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {\n      var self = this;\n      // FIXME: need to apply ice candidates in a way which is async but in-order\n      this._localIceCandidatesBuffer.forEach(function(event) {\n        if (self.onicecandidate !== null) {\n          self.onicecandidate(event);\n        }\n      });\n      this._localIceCandidatesBuffer = [];\n    };\n\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      this.localStreams.push(stream.clone());\n      this._maybeFireNegotiationNeeded();\n    };\n\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\n      var idx = this.localStreams.indexOf(stream);\n      if (idx > -1) {\n        this.localStreams.splice(idx, 1);\n        this._maybeFireNegotiationNeeded();\n      }\n    };\n\n    // Determines the intersection of local and remote capabilities.\n    window.RTCPeerConnection.prototype._getCommonCapabilities =\n        function(localCapabilities, remoteCapabilities) {\n      var commonCapabilities = {\n        codecs: [],\n        headerExtensions: [],\n        fecMechanisms: []\n      };\n      localCapabilities.codecs.forEach(function(lCodec) {\n        for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n          var rCodec = remoteCapabilities.codecs[i];\n          if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n              lCodec.clockRate === rCodec.clockRate &&\n              lCodec.numChannels === rCodec.numChannels) {\n            // push rCodec so we reply with offerer payload type\n            commonCapabilities.codecs.push(rCodec);\n\n            // FIXME: also need to determine intersection between\n            // .rtcpFeedback and .parameters\n            break;\n          }\n        }\n      });\n\n      localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n        for (var i = 0; i < remoteCapabilities.headerExtensions.length; i++) {\n          var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n          if (lHeaderExtension.uri === rHeaderExtension.uri) {\n            commonCapabilities.headerExtensions.push(rHeaderExtension);\n            break;\n          }\n        }\n      });\n\n      // FIXME: fecMechanisms\n      return commonCapabilities;\n    };\n\n    // Create ICE gatherer, ICE transport and DTLS transport.\n    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =\n        function(mid, sdpMLineIndex) {\n      var self = this;\n      var iceGatherer = new RTCIceGatherer(self.iceOptions);\n      var iceTransport = new RTCIceTransport(iceGatherer);\n      iceGatherer.onlocalcandidate = function(evt) {\n        var event = {};\n        event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n        var cand = evt.candidate;\n        // Edge emits an empty object for RTCIceCandidateComplete‥\n        if (!cand || Object.keys(cand).length === 0) {\n          // polyfill since RTCIceGatherer.state is not implemented in Edge 10547 yet.\n          if (iceGatherer.state === undefined) {\n            iceGatherer.state = 'completed';\n          }\n\n          // Emit a candidate with type endOfCandidates to make the samples work.\n          // Edge requires addIceCandidate with this empty candidate to start checking.\n          // The real solution is to signal end-of-candidates to the other side when\n          // getting the null candidate but some apps (like the samples) don't do that.\n          event.candidate.candidate =\n              'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';\n        } else {\n          // RTCIceCandidate doesn't have a component, needs to be added\n          cand.component = iceTransport.component === 'RTCP' ? 2 : 1;\n          event.candidate.candidate = SDPUtils.writeCandidate(cand);\n        }\n\n        var complete = self.transceivers.every(function(transceiver) {\n          return transceiver.iceGatherer &&\n              transceiver.iceGatherer.state === 'completed';\n        });\n        // FIXME: update .localDescription with candidate and (potentially) end-of-candidates.\n        //     To make this harder, the gatherer might emit candidates before localdescription\n        //     is set. To make things worse, gather.getLocalCandidates still errors in\n        //     Edge 10547 when no candidates have been gathered yet.\n\n        if (self.onicecandidate !== null) {\n          // Emit candidate if localDescription is set.\n          // Also emits null candidate when all gatherers are complete.\n          if (self.localDescription && self.localDescription.type === '') {\n            self._localIceCandidatesBuffer.push(event);\n            if (complete) {\n              self._localIceCandidatesBuffer.push({});\n            }\n          } else {\n            self.onicecandidate(event);\n            if (complete) {\n              self.onicecandidate({});\n            }\n          }\n        }\n      };\n      iceTransport.onicestatechange = function() {\n        self._updateConnectionState();\n      };\n\n      var dtlsTransport = new RTCDtlsTransport(iceTransport);\n      dtlsTransport.ondtlsstatechange = function() {\n        self._updateConnectionState();\n      };\n      dtlsTransport.onerror = function() {\n        // onerror does not set state to failed by itself.\n        dtlsTransport.state = 'failed';\n        self._updateConnectionState();\n      };\n\n      return {\n        iceGatherer: iceGatherer,\n        iceTransport: iceTransport,\n        dtlsTransport: dtlsTransport\n      };\n    };\n\n    // Start the RTP Sender and Receiver for a transceiver.\n    window.RTCPeerConnection.prototype._transceive = function(transceiver,\n        send, recv) {\n      var params = this._getCommonCapabilities(transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n      if (send && transceiver.rtpSender) {\n        params.encodings = [{\n          ssrc: transceiver.sendSsrc\n        }];\n        params.rtcp = {\n          cname: localCName,\n          ssrc: transceiver.recvSsrc\n        };\n        transceiver.rtpSender.send(params);\n      }\n      if (recv && transceiver.rtpReceiver) {\n        params.encodings = [{\n          ssrc: transceiver.recvSsrc\n        }];\n        params.rtcp = {\n          cname: transceiver.cname,\n          ssrc: transceiver.sendSsrc\n        };\n        transceiver.rtpReceiver.receive(params);\n      }\n    };\n\n    window.RTCPeerConnection.prototype.setLocalDescription =\n        function(description) {\n      var self = this;\n      if (description.type === 'offer') {\n        if (!this._pendingOffer) {\n        } else {\n          this.transceivers = this._pendingOffer;\n          delete this._pendingOffer;\n        }\n      } else if (description.type === 'answer') {\n        var sections = SDPUtils.splitSections(self.remoteDescription.sdp);\n        var sessionpart = sections.shift();\n        sections.forEach(function(mediaSection, sdpMLineIndex) {\n          var transceiver = self.transceivers[sdpMLineIndex];\n          var iceGatherer = transceiver.iceGatherer;\n          var iceTransport = transceiver.iceTransport;\n          var dtlsTransport = transceiver.dtlsTransport;\n          var localCapabilities = transceiver.localCapabilities;\n          var remoteCapabilities = transceiver.remoteCapabilities;\n          var rejected = mediaSection.split('\\n', 1)[0]\n              .split(' ', 2)[1] === '0';\n\n          if (!rejected) {\n            var remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n                sessionpart);\n            iceTransport.start(iceGatherer, remoteIceParameters, 'controlled');\n\n            var remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n              sessionpart);\n            dtlsTransport.start(remoteDtlsParameters);\n\n            // Calculate intersection of capabilities.\n            var params = self._getCommonCapabilities(localCapabilities,\n                remoteCapabilities);\n\n            // Start the RTCRtpSender. The RTCRtpReceiver for this transceiver\n            // has already been started in setRemoteDescription.\n            self._transceive(transceiver,\n                params.codecs.length > 0,\n                false);\n          }\n        });\n      }\n\n      this.localDescription = description;\n      switch (description.type) {\n        case 'offer':\n          this._updateSignalingState('have-local-offer');\n          break;\n        case 'answer':\n          this._updateSignalingState('stable');\n          break;\n        default:\n          throw new TypeError('unsupported type \"' + description.type + '\"');\n      }\n\n      // If a success callback was provided, emit ICE candidates after it has been\n      // executed. Otherwise, emit callback after the Promise is resolved.\n      var hasCallback = arguments.length > 1 &&\n        typeof arguments[1] === 'function';\n      if (hasCallback) {\n        var cb = arguments[1];\n        window.setTimeout(function() {\n          cb();\n          self._emitBufferedCandidates();\n        }, 0);\n      }\n      var p = Promise.resolve();\n      p.then(function() {\n        if (!hasCallback) {\n          window.setTimeout(self._emitBufferedCandidates.bind(self), 0);\n        }\n      });\n      return p;\n    };\n\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n        function(description) {\n      var self = this;\n      var stream = new MediaStream();\n      var sections = SDPUtils.splitSections(description.sdp);\n      var sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var lines = SDPUtils.splitLines(mediaSection);\n        var mline = lines[0].substr(2).split(' ');\n        var kind = mline[0];\n        var rejected = mline[1] === '0';\n        var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n\n        var transceiver;\n        var iceGatherer;\n        var iceTransport;\n        var dtlsTransport;\n        var rtpSender;\n        var rtpReceiver;\n        var sendSsrc;\n        var recvSsrc;\n        var localCapabilities;\n\n        // FIXME: ensure the mediaSection has rtcp-mux set.\n        var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n        var remoteIceParameters;\n        var remoteDtlsParameters;\n        if (!rejected) {\n          remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n              sessionpart);\n          remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n              sessionpart);\n        }\n        var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0].substr(6);\n\n        var cname;\n        // Gets the first SSRC. Note that with RTX there might be multiple SSRCs.\n        var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n            .map(function(line) {\n              return SDPUtils.parseSsrcMedia(line);\n            })\n            .filter(function(obj) {\n              return obj.attribute === 'cname';\n            })[0];\n        if (remoteSsrc) {\n          recvSsrc = parseInt(remoteSsrc.ssrc, 10);\n          cname = remoteSsrc.value;\n        }\n\n        if (description.type === 'offer') {\n          var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);\n\n          localCapabilities = RTCRtpReceiver.getCapabilities(kind);\n          sendSsrc = (2 * sdpMLineIndex + 2) * 1001;\n\n          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);\n\n          // FIXME: not correct when there are multiple streams but that is\n          // not currently supported in this shim.\n          stream.addTrack(rtpReceiver.track);\n\n          // FIXME: look at direction.\n          if (self.localStreams.length > 0 &&\n              self.localStreams[0].getTracks().length >= sdpMLineIndex) {\n            // FIXME: actually more complicated, needs to match types etc\n            var localtrack = self.localStreams[0].getTracks()[sdpMLineIndex];\n            rtpSender = new RTCRtpSender(localtrack, transports.dtlsTransport);\n          }\n\n          self.transceivers[sdpMLineIndex] = {\n            iceGatherer: transports.iceGatherer,\n            iceTransport: transports.iceTransport,\n            dtlsTransport: transports.dtlsTransport,\n            localCapabilities: localCapabilities,\n            remoteCapabilities: remoteCapabilities,\n            rtpSender: rtpSender,\n            rtpReceiver: rtpReceiver,\n            kind: kind,\n            mid: mid,\n            cname: cname,\n            sendSsrc: sendSsrc,\n            recvSsrc: recvSsrc\n          };\n          // Start the RTCRtpReceiver now. The RTPSender is started in setLocalDescription.\n          self._transceive(self.transceivers[sdpMLineIndex],\n              false,\n              direction === 'sendrecv' || direction === 'sendonly');\n        } else if (description.type === 'answer' && !rejected) {\n          transceiver = self.transceivers[sdpMLineIndex];\n          iceGatherer = transceiver.iceGatherer;\n          iceTransport = transceiver.iceTransport;\n          dtlsTransport = transceiver.dtlsTransport;\n          rtpSender = transceiver.rtpSender;\n          rtpReceiver = transceiver.rtpReceiver;\n          sendSsrc = transceiver.sendSsrc;\n          //recvSsrc = transceiver.recvSsrc;\n          localCapabilities = transceiver.localCapabilities;\n\n          self.transceivers[sdpMLineIndex].recvSsrc = recvSsrc;\n          self.transceivers[sdpMLineIndex].remoteCapabilities =\n              remoteCapabilities;\n          self.transceivers[sdpMLineIndex].cname = cname;\n\n          iceTransport.start(iceGatherer, remoteIceParameters, 'controlling');\n          dtlsTransport.start(remoteDtlsParameters);\n\n          self._transceive(transceiver,\n              direction === 'sendrecv' || direction === 'recvonly',\n              direction === 'sendrecv' || direction === 'sendonly');\n\n          if (rtpReceiver &&\n              (direction === 'sendrecv' || direction === 'sendonly')) {\n            stream.addTrack(rtpReceiver.track);\n          } else {\n            // FIXME: actually the receiver should be created later.\n            delete transceiver.rtpReceiver;\n          }\n        }\n      });\n\n      this.remoteDescription = description;\n      switch (description.type) {\n        case 'offer':\n          this._updateSignalingState('have-remote-offer');\n          break;\n        case 'answer':\n          this._updateSignalingState('stable');\n          break;\n        default:\n          throw new TypeError('unsupported type \"' + description.type + '\"');\n      }\n      window.setTimeout(function() {\n        if (self.onaddstream !== null && stream.getTracks().length) {\n          self.remoteStreams.push(stream);\n          window.setTimeout(function() {\n            self.onaddstream({stream: stream});\n          }, 0);\n        }\n      }, 0);\n      if (arguments.length > 1 && typeof arguments[1] === 'function') {\n        window.setTimeout(arguments[1], 0);\n      }\n      return Promise.resolve();\n    };\n\n    window.RTCPeerConnection.prototype.close = function() {\n      this.transceivers.forEach(function(transceiver) {\n        /* not yet\n        if (transceiver.iceGatherer) {\n          transceiver.iceGatherer.close();\n        }\n        */\n        if (transceiver.iceTransport) {\n          transceiver.iceTransport.stop();\n        }\n        if (transceiver.dtlsTransport) {\n          transceiver.dtlsTransport.stop();\n        }\n        if (transceiver.rtpSender) {\n          transceiver.rtpSender.stop();\n        }\n        if (transceiver.rtpReceiver) {\n          transceiver.rtpReceiver.stop();\n        }\n      });\n      // FIXME: clean up tracks, local streams, remote streams, etc\n      this._updateSignalingState('closed');\n    };\n\n    // Update the signaling state.\n    window.RTCPeerConnection.prototype._updateSignalingState =\n        function(newState) {\n      this.signalingState = newState;\n      if (this.onsignalingstatechange !== null) {\n        this.onsignalingstatechange();\n      }\n    };\n\n    // Determine whether to fire the negotiationneeded event.\n    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =\n        function() {\n      // Fire away (for now).\n      if (this.onnegotiationneeded !== null) {\n        this.onnegotiationneeded();\n      }\n    };\n\n    // Update the connection state.\n    window.RTCPeerConnection.prototype._updateConnectionState =\n        function() {\n      var self = this;\n      var newState;\n      var states = {\n        'new': 0,\n        closed: 0,\n        connecting: 0,\n        checking: 0,\n        connected: 0,\n        completed: 0,\n        failed: 0\n      };\n      this.transceivers.forEach(function(transceiver) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      });\n      // ICETransport.completed and connected are the same for this purpose.\n      states.connected += states.completed;\n\n      newState = 'new';\n      if (states.failed > 0) {\n        newState = 'failed';\n      } else if (states.connecting > 0 || states.checking > 0) {\n        newState = 'connecting';\n      } else if (states.disconnected > 0) {\n        newState = 'disconnected';\n      } else if (states.new > 0) {\n        newState = 'new';\n      } else if (states.connecting > 0 || states.completed > 0) {\n        newState = 'connected';\n      }\n\n      if (newState !== self.iceConnectionState) {\n        self.iceConnectionState = newState;\n        if (this.oniceconnectionstatechange !== null) {\n          this.oniceconnectionstatechange();\n        }\n      }\n    };\n\n    window.RTCPeerConnection.prototype.createOffer = function() {\n      var self = this;\n      if (this._pendingOffer) {\n        throw new Error('createOffer called while there is a pending offer.');\n      }\n      var offerOptions;\n      if (arguments.length === 1 && typeof arguments[0] !== 'function') {\n        offerOptions = arguments[0];\n      } else if (arguments.length === 3) {\n        offerOptions = arguments[2];\n      }\n\n      var tracks = [];\n      var numAudioTracks = 0;\n      var numVideoTracks = 0;\n      // Default to sendrecv.\n      if (this.localStreams.length) {\n        numAudioTracks = this.localStreams[0].getAudioTracks().length;\n        numVideoTracks = this.localStreams[0].getVideoTracks().length;\n      }\n      // Determine number of audio and video tracks we need to send/recv.\n      if (offerOptions) {\n        // Reject Chrome legacy constraints.\n        if (offerOptions.mandatory || offerOptions.optional) {\n          throw new TypeError(\n              'Legacy mandatory/optional constraints not supported.');\n        }\n        if (offerOptions.offerToReceiveAudio !== undefined) {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n        if (offerOptions.offerToReceiveVideo !== undefined) {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n      if (this.localStreams.length) {\n        // Push local streams.\n        this.localStreams[0].getTracks().forEach(function(track) {\n          tracks.push({\n            kind: track.kind,\n            track: track,\n            wantReceive: track.kind === 'audio' ?\n                numAudioTracks > 0 : numVideoTracks > 0\n          });\n          if (track.kind === 'audio') {\n            numAudioTracks--;\n          } else if (track.kind === 'video') {\n            numVideoTracks--;\n          }\n        });\n      }\n      // Create M-lines for recvonly streams.\n      while (numAudioTracks > 0 || numVideoTracks > 0) {\n        if (numAudioTracks > 0) {\n          tracks.push({\n            kind: 'audio',\n            wantReceive: true\n          });\n          numAudioTracks--;\n        }\n        if (numVideoTracks > 0) {\n          tracks.push({\n            kind: 'video',\n            wantReceive: true\n          });\n          numVideoTracks--;\n        }\n      }\n\n      var sdp = SDPUtils.writeSessionBoilerplate();\n      var transceivers = [];\n      tracks.forEach(function(mline, sdpMLineIndex) {\n        // For each track, create an ice gatherer, ice transport, dtls transport,\n        // potentially rtpsender and rtpreceiver.\n        var track = mline.track;\n        var kind = mline.kind;\n        var mid = generateIdentifier();\n\n        var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);\n\n        var localCapabilities = RTCRtpSender.getCapabilities(kind);\n        var rtpSender;\n        var rtpReceiver;\n\n        // generate an ssrc now, to be used later in rtpSender.send\n        var sendSsrc = (2 * sdpMLineIndex + 1) * 1001;\n        if (track) {\n          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);\n        }\n\n        if (mline.wantReceive) {\n          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);\n        }\n\n        transceivers[sdpMLineIndex] = {\n          iceGatherer: transports.iceGatherer,\n          iceTransport: transports.iceTransport,\n          dtlsTransport: transports.dtlsTransport,\n          localCapabilities: localCapabilities,\n          remoteCapabilities: null,\n          rtpSender: rtpSender,\n          rtpReceiver: rtpReceiver,\n          kind: kind,\n          mid: mid,\n          sendSsrc: sendSsrc,\n          recvSsrc: null\n        };\n        var transceiver = transceivers[sdpMLineIndex];\n        sdp += SDPUtils.writeMediaSection(transceiver,\n            transceiver.localCapabilities, 'offer', self.localStreams[0]);\n      });\n\n      this._pendingOffer = transceivers;\n      var desc = new RTCSessionDescription({\n        type: 'offer',\n        sdp: sdp\n      });\n      if (arguments.length && typeof arguments[0] === 'function') {\n        window.setTimeout(arguments[0], 0, desc);\n      }\n      return Promise.resolve(desc);\n    };\n\n    window.RTCPeerConnection.prototype.createAnswer = function() {\n      var self = this;\n      var answerOptions;\n      if (arguments.length === 1 && typeof arguments[0] !== 'function') {\n        answerOptions = arguments[0];\n      } else if (arguments.length === 3) {\n        answerOptions = arguments[2];\n      }\n\n      var sdp = SDPUtils.writeSessionBoilerplate();\n      this.transceivers.forEach(function(transceiver) {\n        // Calculate intersection of capabilities.\n        var commonCapabilities = self._getCommonCapabilities(\n            transceiver.localCapabilities,\n            transceiver.remoteCapabilities);\n\n        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,\n            'answer', self.localStreams[0]);\n      });\n\n      var desc = new RTCSessionDescription({\n        type: 'answer',\n        sdp: sdp\n      });\n      if (arguments.length && typeof arguments[0] === 'function') {\n        window.setTimeout(arguments[0], 0, desc);\n      }\n      return Promise.resolve(desc);\n    };\n\n    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n      var mLineIndex = candidate.sdpMLineIndex;\n      if (candidate.sdpMid) {\n        for (var i = 0; i < this.transceivers.length; i++) {\n          if (this.transceivers[i].mid === candidate.sdpMid) {\n            mLineIndex = i;\n            break;\n          }\n        }\n      }\n      var transceiver = this.transceivers[mLineIndex];\n      if (transceiver) {\n        var cand = Object.keys(candidate.candidate).length > 0 ?\n            SDPUtils.parseCandidate(candidate.candidate) : {};\n        // Ignore Chrome's invalid candidates since Edge does not like them.\n        if (cand.protocol === 'tcp' && cand.port === 0) {\n          return;\n        }\n        // Ignore RTCP candidates, we assume RTCP-MUX.\n        if (cand.component !== '1') {\n          return;\n        }\n        // A dirty hack to make samples work.\n        if (cand.type === 'endOfCandidates') {\n          cand = {};\n        }\n        transceiver.iceTransport.addRemoteCandidate(cand);\n      }\n      if (arguments.length > 1 && typeof arguments[1] === 'function') {\n        window.setTimeout(arguments[1], 0);\n      }\n      return Promise.resolve();\n    };\n\n    window.RTCPeerConnection.prototype.getStats = function() {\n      var promises = [];\n      this.transceivers.forEach(function(transceiver) {\n        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n            'dtlsTransport'].forEach(function(method) {\n          if (transceiver[method]) {\n            promises.push(transceiver[method].getStats());\n          }\n        });\n      });\n      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&\n          arguments[1];\n      return new Promise(function(resolve) {\n        var results = {};\n        Promise.all(promises).then(function(res) {\n          res.forEach(function(result) {\n            Object.keys(result).forEach(function(id) {\n              results[id] = result[id];\n            });\n          });\n          if (cb) {\n            window.setTimeout(cb, 0, results);\n          }\n          resolve(results);\n        });\n      });\n    };\n  }\n} else {\n  webrtcUtils.log('Browser does not appear to be WebRTC-capable');\n}\n\n// Polyfill ontrack on browsers that don't yet have it\nif (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n    window.RTCPeerConnection.prototype)) {\n  Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n    get: function() { return this._ontrack; },\n    set: function(f) {\n      var self = this;\n      if (this._ontrack) {\n        this.removeEventListener('track', this._ontrack);\n        this.removeEventListener('addstream', this._ontrackpoly);\n      }\n      this.addEventListener('track', this._ontrack = f);\n      this.addEventListener('addstream', this._ontrackpoly = function(e) {\n        if (webrtcDetectedBrowser === 'chrome') {\n          // onaddstream does not fire when a track is added to an existing stream.\n          // but stream.onaddtrack is implemented so we use thたt\n          e.stream.addEventListener('addtrack', function(te) {\n            var event = new Event('track');\n            event.track = te.track;\n            event.receiver = {track: te.track};\n            event.streams = [e.stream];\n            self.dispatchEvent(event);\n          });\n        }\n        e.stream.getTracks().forEach(function(track) {\n          var event = new Event('track');\n          event.track = track;\n          event.receiver = {track: track};\n          event.streams = [e.stream];\n          this.dispatchEvent(event);\n        }.bind(this));\n      }.bind(this));\n    }\n  });\n}\n\n// Returns the result of getUserMedia as a Promise.\nfunction requestUserMedia(constraints) {\n  return new Promise(function(resolve, reject) {\n    getUserMedia(constraints, resolve, reject);\n  });\n}\n\nvar webrtcTesting = {};\ntry {\n  Object.defineProperty(webrtcTesting, 'version', {\n    set: function(version) {\n      webrtcDetectedVersion = version;\n    }\n  });\n} catch (e) {}\n\nif (typeof module !== 'undefined') {\n  var RTCPeerConnection;\n  var RTCIceCandidate;\n  var RTCSessionDescription;\n  if (typeof window !== 'undefined') {\n    RTCPeerConnection = window.RTCPeerConnection;\n    RTCIceCandidate = window.RTCIceCandidate;\n    RTCSessionDescription = window.RTCSessionDescription;\n  }\n  module.exports = {\n    RTCPeerConnection: RTCPeerConnection,\n    RTCIceCandidate: RTCIceCandidate,\n    RTCSessionDescription: RTCSessionDescription,\n    getUserMedia: getUserMedia,\n    attachMediaStream: attachMediaStream,\n    reattachMediaStream: reattachMediaStream,\n    webrtcDetectedBrowser: webrtcDetectedBrowser,\n    webrtcDetectedVersion: webrtcDetectedVersion,\n    webrtcMinimumVersion: webrtcMinimumVersion,\n    webrtcTesting: webrtcTesting,\n    webrtcUtils: webrtcUtils\n    //requestUserMedia: not exposed on purpose.\n    //trace: not exposed on purpose.\n  };\n} else if ((typeof require === 'function') && (typeof define === 'function')) {\n  // Expose objects and functions when RequireJS is doing the loading.\n  define([], function() {\n    return {\n      RTCPeerConnection: window.RTCPeerConnection,\n      RTCIceCandidate: window.RTCIceCandidate,\n      RTCSessionDescription: window.RTCSessionDescription,\n      getUserMedia: getUserMedia,\n      attachMediaStream: attachMediaStream,\n      reattachMediaStream: reattachMediaStream,\n      webrtcDetectedBrowser: webrtcDetectedBrowser,\n      webrtcDetectedVersion: webrtcDetectedVersion,\n      webrtcMinimumVersion: webrtcMinimumVersion,\n      webrtcTesting: webrtcTesting,\n      webrtcUtils: webrtcUtils\n      //requestUserMedia: not exposed on purpose.\n      //trace: not exposed on purpose.\n    };\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-webrtc/node_modules/webrtc/webrtc.bundle.js":"(function(e){if(\"function\"==typeof bootstrap)bootstrap(\"webrtc\",e);else if(\"object\"==typeof exports)module.exports=e();else if(\"function\"==typeof define&&define.amd)define(e);else if(\"undefined\"!=typeof ses){if(!ses.ok())return;ses.makeWebRTC=e}else\"undefined\"!=typeof window?window.WebRTC=e():global.WebRTC=e()})(function(){var define,ses,bootstrap,module,exports;\nreturn (function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require==\"function\"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error(\"Cannot find module '\"+n+\"'\")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require==\"function\"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){\nvar util = require('util');\nvar webrtc = require('webrtcsupport');\nvar WildEmitter = require('wildemitter');\nvar mockconsole = require('mockconsole');\nvar localMedia = require('localmedia');\nvar Peer = require('./peer');\n\n\nfunction WebRTC(opts) {\n    var self = this;\n    var options = opts || {};\n    var config = this.config = {\n            debug: false,\n            // makes the entire PC config overridable\n            peerConnectionConfig: {\n                iceServers: [{\"url\": \"stun:stun.l.google.com:19302\"}]\n            },\n            peerConnectionConstraints: {\n                optional: [\n                    {DtlsSrtpKeyAgreement: true}\n                ]\n            },\n            receiveMedia: {\n                mandatory: {\n                    OfferToReceiveAudio: true,\n                    OfferToReceiveVideo: true\n                }\n            },\n            enableDataChannels: true\n        };\n    var item;\n\n    // expose screensharing check\n    this.screenSharingSupport = webrtc.screenSharing;\n\n    // We also allow a 'logger' option. It can be any object that implements\n    // log, warn, and error methods.\n    // We log nothing by default, following \"the rule of silence\":\n    // http://www.linfo.org/rule_of_silence.html\n    this.logger = function () {\n        // we assume that if you're in debug mode and you didn't\n        // pass in a logger, you actually want to log as much as\n        // possible.\n        if (opts.debug) {\n            return opts.logger || console;\n        } else {\n        // or we'll use your logger which should have its own logic\n        // for output. Or we'll return the no-op.\n            return opts.logger || mockconsole;\n        }\n    }();\n\n    // set options\n    for (item in options) {\n        this.config[item] = options[item];\n    }\n\n    // check for support\n    if (!webrtc.support) {\n        this.logger.error('Your browser doesn\\'t seem to support WebRTC');\n    }\n\n    // where we'll store our peer connections\n    this.peers = [];\n\n    // call localMedia constructor\n    localMedia.call(this, this.config);\n\n    this.on('speaking', function () {\n        if (!self.hardMuted) {\n            // FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\n            self.peers.forEach(function (peer) {\n                if (peer.enableDataChannels) {\n                    var dc = peer.getDataChannel('hark');\n                    if (dc.readyState != 'open') return;\n                    dc.send(JSON.stringify({type: 'speaking'}));\n                }\n            });\n        }\n    });\n    this.on('stoppedSpeaking', function () {\n        if (!self.hardMuted) {\n            // FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\n            self.peers.forEach(function (peer) {\n                if (peer.enableDataChannels) {\n                    var dc = peer.getDataChannel('hark');\n                    if (dc.readyState != 'open') return;\n                    dc.send(JSON.stringify({type: 'stoppedSpeaking'}));\n                }\n            });\n        }\n    });\n    this.on('volumeChange', function (volume, treshold) {\n        if (!self.hardMuted) {\n            // FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\n            self.peers.forEach(function (peer) {\n                if (peer.enableDataChannels) {\n                    var dc = peer.getDataChannel('hark');\n                    if (dc.readyState != 'open') return;\n                    dc.send(JSON.stringify({type: 'volume', volume: volume }));\n                }\n            });\n        }\n    });\n\n    // log events in debug mode\n    if (this.config.debug) {\n        this.on('*', function (event, val1, val2) {\n            var logger;\n            // if you didn't pass in a logger and you explicitly turning on debug\n            // we're just going to assume you're wanting log output with console\n            if (self.config.logger === mockconsole) {\n                logger = console;\n            } else {\n                logger = self.logger;\n            }\n            logger.log('event:', event, val1, val2);\n        });\n    }\n}\n\nutil.inherits(WebRTC, localMedia);\n\nWebRTC.prototype.createPeer = function (opts) {\n    var peer;\n    opts.parent = this;\n    peer = new Peer(opts);\n    this.peers.push(peer);\n    return peer;\n};\n\n// removes peers\nWebRTC.prototype.removePeers = function (id, type) {\n    this.getPeers(id, type).forEach(function (peer) {\n        peer.end();\n    });\n};\n\n// fetches all Peer objects by session id and/or type\nWebRTC.prototype.getPeers = function (sessionId, type) {\n    return this.peers.filter(function (peer) {\n        return (!sessionId || peer.id === sessionId) && (!type || peer.type === type);\n    });\n};\n\n// sends message to all\nWebRTC.prototype.sendToAll = function (message, payload) {\n    this.peers.forEach(function (peer) {\n        peer.send(message, payload);\n    });\n};\n\n// sends message to all using a datachannel\n// only sends to anyone who has an open datachannel\nWebRTC.prototype.sendDirectlyToAll = function (channel, message, payload) {\n    this.peers.forEach(function (peer) {\n        if (peer.enableDataChannels) {\n            peer.sendDirectly(channel, message, payload);\n        }\n    });\n};\n\nmodule.exports = WebRTC;\n\n},{\"./peer\":3,\"localmedia\":7,\"mockconsole\":6,\"util\":2,\"webrtcsupport\":5,\"wildemitter\":4}],2:[function(require,module,exports){\nvar events = require('events');\n\nexports.isArray = isArray;\nexports.isDate = function(obj){return Object.prototype.toString.call(obj) === '[object Date]'};\nexports.isRegExp = function(obj){return Object.prototype.toString.call(obj) === '[object RegExp]'};\n\n\nexports.print = function () {};\nexports.puts = function () {};\nexports.debug = function() {};\n\nexports.inspect = function(obj, showHidden, depth, colors) {\n  var seen = [];\n\n  var stylize = function(str, styleType) {\n    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n    var styles =\n        { 'bold' : [1, 22],\n          'italic' : [3, 23],\n          'underline' : [4, 24],\n          'inverse' : [7, 27],\n          'white' : [37, 39],\n          'grey' : [90, 39],\n          'black' : [30, 39],\n          'blue' : [34, 39],\n          'cyan' : [36, 39],\n          'green' : [32, 39],\n          'magenta' : [35, 39],\n          'red' : [31, 39],\n          'yellow' : [33, 39] };\n\n    var style =\n        { 'special': 'cyan',\n          'number': 'blue',\n          'boolean': 'yellow',\n          'undefined': 'grey',\n          'null': 'bold',\n          'string': 'green',\n          'date': 'magenta',\n          // \"name\": intentionally not styling\n          'regexp': 'red' }[styleType];\n\n    if (style) {\n      return '\\u001b[' + styles[style][0] + 'm' + str +\n             '\\u001b[' + styles[style][1] + 'm';\n    } else {\n      return str;\n    }\n  };\n  if (! colors) {\n    stylize = function(str, styleType) { return str; };\n  }\n\n  function format(value, recurseTimes) {\n    // Provide a hook for user-specified inspect functions.\n    // Check that value is an object with an inspect function on it\n    if (value && typeof value.inspect === 'function' &&\n        // Filter out the util module, it's inspect function is special\n        value !== exports &&\n        // Also filter out any prototype objects using the circular check.\n        !(value.constructor && value.constructor.prototype === value)) {\n      return value.inspect(recurseTimes);\n    }\n\n    // Primitive types cannot have properties\n    switch (typeof value) {\n      case 'undefined':\n        return stylize('undefined', 'undefined');\n\n      case 'string':\n        var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                                 .replace(/'/g, \"\\\\'\")\n                                                 .replace(/\\\\\"/g, '\"') + '\\'';\n        return stylize(simple, 'string');\n\n      case 'number':\n        return stylize('' + value, 'number');\n\n      case 'boolean':\n        return stylize('' + value, 'boolean');\n    }\n    // For some reason typeof null is \"object\", so special case here.\n    if (value === null) {\n      return stylize('null', 'null');\n    }\n\n    // Look up the keys of the object.\n    var visible_keys = Object_keys(value);\n    var keys = showHidden ? Object_getOwnPropertyNames(value) : visible_keys;\n\n    // Functions without properties can be shortcutted.\n    if (typeof value === 'function' && keys.length === 0) {\n      if (isRegExp(value)) {\n        return stylize('' + value, 'regexp');\n      } else {\n        var name = value.name ? ': ' + value.name : '';\n        return stylize('[Function' + name + ']', 'special');\n      }\n    }\n\n    // Dates without properties can be shortcutted\n    if (isDate(value) && keys.length === 0) {\n      return stylize(value.toUTCString(), 'date');\n    }\n\n    var base, type, braces;\n    // Determine the object type\n    if (isArray(value)) {\n      type = 'Array';\n      braces = ['[', ']'];\n    } else {\n      type = 'Object';\n      braces = ['{', '}'];\n    }\n\n    // Make functions say that they are functions\n    if (typeof value === 'function') {\n      var n = value.name ? ': ' + value.name : '';\n      base = (isRegExp(value)) ? ' ' + value : ' [Function' + n + ']';\n    } else {\n      base = '';\n    }\n\n    // Make dates with properties first say the date\n    if (isDate(value)) {\n      base = ' ' + value.toUTCString();\n    }\n\n    if (keys.length === 0) {\n      return braces[0] + base + braces[1];\n    }\n\n    if (recurseTimes < 0) {\n      if (isRegExp(value)) {\n        return stylize('' + value, 'regexp');\n      } else {\n        return stylize('[Object]', 'special');\n      }\n    }\n\n    seen.push(value);\n\n    var output = keys.map(function(key) {\n      var name, str;\n      if (value.__lookupGetter__) {\n        if (value.__lookupGetter__(key)) {\n          if (value.__lookupSetter__(key)) {\n            str = stylize('[Getter/Setter]', 'special');\n          } else {\n            str = stylize('[Getter]', 'special');\n          }\n        } else {\n          if (value.__lookupSetter__(key)) {\n            str = stylize('[Setter]', 'special');\n          }\n        }\n      }\n      if (visible_keys.indexOf(key) < 0) {\n        name = '[' + key + ']';\n      }\n      if (!str) {\n        if (seen.indexOf(value[key]) < 0) {\n          if (recurseTimes === null) {\n            str = format(value[key]);\n          } else {\n            str = format(value[key], recurseTimes - 1);\n          }\n          if (str.indexOf('\\n') > -1) {\n            if (isArray(value)) {\n              str = str.split('\\n').map(function(line) {\n                return '  ' + line;\n              }).join('\\n').substr(2);\n            } else {\n              str = '\\n' + str.split('\\n').map(function(line) {\n                return '   ' + line;\n              }).join('\\n');\n            }\n          }\n        } else {\n          str = stylize('[Circular]', 'special');\n        }\n      }\n      if (typeof name === 'undefined') {\n        if (type === 'Array' && key.match(/^\\d+$/)) {\n          return str;\n        }\n        name = JSON.stringify('' + key);\n        if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n          name = name.substr(1, name.length - 2);\n          name = stylize(name, 'name');\n        } else {\n          name = name.replace(/'/g, \"\\\\'\")\n                     .replace(/\\\\\"/g, '\"')\n                     .replace(/(^\"|\"$)/g, \"'\");\n          name = stylize(name, 'string');\n        }\n      }\n\n      return name + ': ' + str;\n    });\n\n    seen.pop();\n\n    var numLinesEst = 0;\n    var length = output.reduce(function(prev, cur) {\n      numLinesEst++;\n      if (cur.indexOf('\\n') >= 0) numLinesEst++;\n      return prev + cur.length + 1;\n    }, 0);\n\n    if (length > 50) {\n      output = braces[0] +\n               (base === '' ? '' : base + '\\n ') +\n               ' ' +\n               output.join(',\\n  ') +\n               ' ' +\n               braces[1];\n\n    } else {\n      output = braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n    }\n\n    return output;\n  }\n  return format(obj, (typeof depth === 'undefined' ? 2 : depth));\n};\n\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && Object.prototype.toString.call(ar) === '[object Array]');\n}\n\n\nfunction isRegExp(re) {\n  typeof re === 'object' && Object.prototype.toString.call(re) === '[object RegExp]';\n}\n\n\nfunction isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n}\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\nexports.log = function (msg) {};\n\nexports.pump = null;\n\nvar Object_keys = Object.keys || function (obj) {\n    var res = [];\n    for (var key in obj) res.push(key);\n    return res;\n};\n\nvar Object_getOwnPropertyNames = Object.getOwnPropertyNames || function (obj) {\n    var res = [];\n    for (var key in obj) {\n        if (Object.hasOwnProperty.call(obj, key)) res.push(key);\n    }\n    return res;\n};\n\nvar Object_create = Object.create || function (prototype, properties) {\n    // from es5-shim\n    var object;\n    if (prototype === null) {\n        object = { '__proto__' : null };\n    }\n    else {\n        if (typeof prototype !== 'object') {\n            throw new TypeError(\n                'typeof prototype[' + (typeof prototype) + '] != \\'object\\''\n            );\n        }\n        var Type = function () {};\n        Type.prototype = prototype;\n        object = new Type();\n        object.__proto__ = prototype;\n    }\n    if (typeof properties !== 'undefined' && Object.defineProperties) {\n        Object.defineProperties(object, properties);\n    }\n    return object;\n};\n\nexports.inherits = function(ctor, superCtor) {\n  ctor.super_ = superCtor;\n  ctor.prototype = Object_create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n};\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (typeof f !== 'string') {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(exports.inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j': return JSON.stringify(args[i++]);\n      default:\n        return x;\n    }\n  });\n  for(var x = args[i]; i < len; x = args[++i]){\n    if (x === null || typeof x !== 'object') {\n      str += ' ' + x;\n    } else {\n      str += ' ' + exports.inspect(x);\n    }\n  }\n  return str;\n};\n\n},{\"events\":8}],4:[function(require,module,exports){\n/*\nWildEmitter.js is a slim little event emitter by @henrikjoreteg largely based \non @visionmedia's Emitter from UI Kit.\n\nWhy? I wanted it standalone.\n\nI also wanted support for wildcard emitters like this:\n\nemitter.on('*', function (eventName, other, event, payloads) {\n    \n});\n\nemitter.on('somenamespace*', function (eventName, payloads) {\n    \n});\n\nPlease note that callbacks triggered by wildcard registered events also get \nthe event name as the first argument.\n*/\nmodule.exports = WildEmitter;\n\nfunction WildEmitter() {\n    this.callbacks = {};\n}\n\n// Listen on the given `event` with `fn`. Store a group name if present.\nWildEmitter.prototype.on = function (event, groupName, fn) {\n    var hasGroup = (arguments.length === 3),\n        group = hasGroup ? arguments[1] : undefined,\n        func = hasGroup ? arguments[2] : arguments[1];\n    func._groupName = group;\n    (this.callbacks[event] = this.callbacks[event] || []).push(func);\n    return this;\n};\n\n// Adds an `event` listener that will be invoked a single\n// time then automatically removed.\nWildEmitter.prototype.once = function (event, groupName, fn) {\n    var self = this,\n        hasGroup = (arguments.length === 3),\n        group = hasGroup ? arguments[1] : undefined,\n        func = hasGroup ? arguments[2] : arguments[1];\n    function on() {\n        self.off(event, on);\n        func.apply(this, arguments);\n    }\n    this.on(event, group, on);\n    return this;\n};\n\n// Unbinds an entire group\nWildEmitter.prototype.releaseGroup = function (groupName) {\n    var item, i, len, handlers;\n    for (item in this.callbacks) {\n        handlers = this.callbacks[item];\n        for (i = 0, len = handlers.length; i < len; i++) {\n            if (handlers[i]._groupName === groupName) {\n                //console.log('removing');\n                // remove it and shorten the array we're looping through\n                handlers.splice(i, 1);\n                i--;\n                len--;\n            }\n        }\n    }\n    return this;\n};\n\n// Remove the given callback for `event` or all\n// registered callbacks.\nWildEmitter.prototype.off = function (event, fn) {\n    var callbacks = this.callbacks[event],\n        i;\n\n    if (!callbacks) return this;\n\n    // remove all handlers\n    if (arguments.length === 1) {\n        delete this.callbacks[event];\n        return this;\n    }\n\n    // remove specific handler\n    i = callbacks.indexOf(fn);\n    callbacks.splice(i, 1);\n    return this;\n};\n\n/// Emit `event` with the given args.\n// also calls any `*` handlers\nWildEmitter.prototype.emit = function (event) {\n    var args = [].slice.call(arguments, 1),\n        callbacks = this.callbacks[event],\n        specialCallbacks = this.getWildcardCallbacks(event),\n        i,\n        len,\n        item,\n        listeners;\n\n    if (callbacks) {\n        listeners = callbacks.slice();\n        for (i = 0, len = listeners.length; i < len; ++i) {\n            if (listeners[i]) {\n                listeners[i].apply(this, args);\n            } else {\n                break;\n            }\n        }\n    }\n\n    if (specialCallbacks) {\n        len = specialCallbacks.length;\n        listeners = specialCallbacks.slice();\n        for (i = 0, len = listeners.length; i < len; ++i) {\n            if (listeners[i]) {\n                listeners[i].apply(this, [event].concat(args));\n            } else {\n                break;\n            }\n        }\n    }\n\n    return this;\n};\n\n// Helper for for finding special wildcard event handlers that match the event\nWildEmitter.prototype.getWildcardCallbacks = function (eventName) {\n    var item,\n        split,\n        result = [];\n\n    for (item in this.callbacks) {\n        split = item.split('*');\n        if (item === '*' || (split.length === 2 && eventName.slice(0, split[0].length) === split[0])) {\n            result = result.concat(this.callbacks[item]);\n        }\n    }\n    return result;\n};\n\n},{}],5:[function(require,module,exports){\n// created by @HenrikJoreteg\nvar prefix;\n\nif (window.mozRTCPeerConnection || navigator.mozGetUserMedia) {\n    prefix = 'moz';\n} else if (window.webkitRTCPeerConnection || navigator.webkitGetUserMedia) {\n    prefix = 'webkit';\n}\n\nvar PC = window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\nvar IceCandidate = window.mozRTCIceCandidate || window.RTCIceCandidate;\nvar SessionDescription = window.mozRTCSessionDescription || window.RTCSessionDescription;\nvar MediaStream = window.webkitMediaStream || window.MediaStream;\nvar screenSharing = window.location.protocol === 'https:' &&\n    ((window.navigator.userAgent.match('Chrome') && parseInt(window.navigator.userAgent.match(/Chrome\\/(.*) /)[1], 10) >= 26) ||\n     (window.navigator.userAgent.match('Firefox') && parseInt(window.navigator.userAgent.match(/Firefox\\/(.*)/)[1], 10) >= 33));\nvar AudioContext = window.AudioContext || window.webkitAudioContext;\nvar supportVp8 = document.createElement('video').canPlayType('video/webm; codecs=\"vp8\", vorbis') === \"probably\";\nvar getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia || navigator.mozGetUserMedia;\n\n// export support flags and constructors.prototype && PC\nmodule.exports = {\n    prefix: prefix,\n    support: !!PC && supportVp8 && !!getUserMedia,\n    // new support style\n    supportRTCPeerConnection: !!PC,\n    supportVp8: supportVp8,\n    supportGetUserMedia: !!getUserMedia,\n    supportDataChannel: !!(PC && PC.prototype && PC.prototype.createDataChannel),\n    supportWebAudio: !!(AudioContext && AudioContext.prototype.createMediaStreamSource),\n    supportMediaStream: !!(MediaStream && MediaStream.prototype.removeTrack),\n    supportScreenSharing: !!screenSharing,\n    // old deprecated style. Dont use this anymore\n    dataChannel: !!(PC && PC.prototype && PC.prototype.createDataChannel),\n    webAudio: !!(AudioContext && AudioContext.prototype.createMediaStreamSource),\n    mediaStream: !!(MediaStream && MediaStream.prototype.removeTrack),\n    screenSharing: !!screenSharing,\n    // constructors\n    AudioContext: AudioContext,\n    PeerConnection: PC,\n    SessionDescription: SessionDescription,\n    IceCandidate: IceCandidate,\n    MediaStream: MediaStream,\n    getUserMedia: getUserMedia\n};\n\n},{}],6:[function(require,module,exports){\nvar methods = \"assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn\".split(\",\");\nvar l = methods.length;\nvar fn = function () {};\nvar mockconsole = {};\n\nwhile (l--) {\n    mockconsole[methods[l]] = fn;\n}\n\nmodule.exports = mockconsole;\n\n},{}],9:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n\n},{}],8:[function(require,module,exports){\nvar process=require(\"__browserify_process\");if (!process.EventEmitter) process.EventEmitter = function () {};\n\nvar EventEmitter = exports.EventEmitter = process.EventEmitter;\nvar isArray = typeof Array.isArray === 'function'\n    ? Array.isArray\n    : function (xs) {\n        return Object.prototype.toString.call(xs) === '[object Array]'\n    }\n;\nfunction indexOf (xs, x) {\n    if (xs.indexOf) return xs.indexOf(x);\n    for (var i = 0; i < xs.length; i++) {\n        if (x === xs[i]) return i;\n    }\n    return -1;\n}\n\n// By default EventEmitters will print a warning if more than\n// 10 listeners are added to it. This is a useful default which\n// helps finding memory leaks.\n//\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nvar defaultMaxListeners = 10;\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!this._events) this._events = {};\n  this._events.maxListeners = n;\n};\n\n\nEventEmitter.prototype.emit = function(type) {\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events || !this._events.error ||\n        (isArray(this._events.error) && !this._events.error.length))\n    {\n      if (arguments[1] instanceof Error) {\n        throw arguments[1]; // Unhandled 'error' event\n      } else {\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\n      }\n      return false;\n    }\n  }\n\n  if (!this._events) return false;\n  var handler = this._events[type];\n  if (!handler) return false;\n\n  if (typeof handler == 'function') {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        var args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n    return true;\n\n  } else if (isArray(handler)) {\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var listeners = handler.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n    return true;\n\n  } else {\n    return false;\n  }\n};\n\n// EventEmitter is defined in src/node_events.cc\n// EventEmitter.prototype.emit() is also defined there.\nEventEmitter.prototype.addListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('addListener only takes instances of Function');\n  }\n\n  if (!this._events) this._events = {};\n\n  // To avoid recursion in the case that type == \"newListeners\"! Before\n  // adding it to the listeners, first emit \"newListeners\".\n  this.emit('newListener', type, listener);\n\n  if (!this._events[type]) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  } else if (isArray(this._events[type])) {\n\n    // Check for listener leak\n    if (!this._events[type].warned) {\n      var m;\n      if (this._events.maxListeners !== undefined) {\n        m = this._events.maxListeners;\n      } else {\n        m = defaultMaxListeners;\n      }\n\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n        console.trace();\n      }\n    }\n\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  } else {\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  var self = this;\n  self.on(type, function g() {\n    self.removeListener(type, g);\n    listener.apply(this, arguments);\n  });\n\n  return this;\n};\n\nEventEmitter.prototype.removeListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('removeListener only takes instances of Function');\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (!this._events || !this._events[type]) return this;\n\n  var list = this._events[type];\n\n  if (isArray(list)) {\n    var i = indexOf(list, listener);\n    if (i < 0) return this;\n    list.splice(i, 1);\n    if (list.length == 0)\n      delete this._events[type];\n  } else if (this._events[type] === listener) {\n    delete this._events[type];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  if (arguments.length === 0) {\n    this._events = {};\n    return this;\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (type && this._events && this._events[type]) this._events[type] = null;\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  if (!this._events) this._events = {};\n  if (!this._events[type]) this._events[type] = [];\n  if (!isArray(this._events[type])) {\n    this._events[type] = [this._events[type]];\n  }\n  return this._events[type];\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (typeof emitter._events[type] === 'function')\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\n},{\"__browserify_process\":9}],3:[function(require,module,exports){\nvar util = require('util');\nvar webrtc = require('webrtcsupport');\nvar PeerConnection = require('rtcpeerconnection');\nvar WildEmitter = require('wildemitter');\nvar FileTransfer = require('filetransfer');\n\n// the inband-v1 protocol is sending metadata inband in a serialized JSON object\n// followed by the actual data. Receiver closes the datachannel upon completion\nvar INBAND_FILETRANSFER_V1 = 'https://simplewebrtc.com/protocol/filetransfer#inband-v1';\n\nfunction Peer(options) {\n    var self = this;\n\n    this.id = options.id;\n    this.parent = options.parent;\n    this.type = options.type || 'video';\n    this.oneway = options.oneway || false;\n    this.sharemyscreen = options.sharemyscreen || false;\n    this.browserPrefix = options.prefix;\n    this.stream = options.stream;\n    this.enableDataChannels = options.enableDataChannels === undefined ? this.parent.config.enableDataChannels : options.enableDataChannels;\n    this.receiveMedia = options.receiveMedia || this.parent.config.receiveMedia;\n    this.channels = {};\n    this.sid = options.sid || Date.now().toString();\n    // Create an RTCPeerConnection via the polyfill\n    this.pc = new PeerConnection(this.parent.config.peerConnectionConfig, this.parent.config.peerConnectionConstraints);\n    this.pc.on('ice', this.onIceCandidate.bind(this));\n    this.pc.on('offer', function (offer) {\n        self.send('offer', offer);\n    });\n    this.pc.on('answer', function (offer) {\n        self.send('answer', offer);\n    });\n    this.pc.on('addStream', this.handleRemoteStreamAdded.bind(this));\n    this.pc.on('addChannel', this.handleDataChannelAdded.bind(this));\n    this.pc.on('removeStream', this.handleStreamRemoved.bind(this));\n    // Just fire negotiation needed events for now\n    // When browser re-negotiation handling seems to work\n    // we can use this as the trigger for starting the offer/answer process\n    // automatically. We'll just leave it be for now while this stabalizes.\n    this.pc.on('negotiationNeeded', this.emit.bind(this, 'negotiationNeeded'));\n    this.pc.on('iceConnectionStateChange', this.emit.bind(this, 'iceConnectionStateChange'));\n    this.pc.on('iceConnectionStateChange', function () {\n        switch (self.pc.iceConnectionState) {\n        case 'failed':\n            // currently, in chrome only the initiator goes to failed\n            // so we need to signal this to the peer\n            if (self.pc.pc.peerconnection.localDescription.type === 'offer') {\n                self.parent.emit('iceFailed', self);\n                self.send('connectivityError');\n            }\n            break;\n        }\n    });\n    this.pc.on('signalingStateChange', this.emit.bind(this, 'signalingStateChange'));\n    this.logger = this.parent.logger;\n\n    // handle screensharing/broadcast mode\n    if (options.type === 'screen') {\n        if (this.parent.localScreen && this.sharemyscreen) {\n            this.logger.log('adding local screen stream to peer connection');\n            this.pc.addStream(this.parent.localScreen);\n            this.broadcaster = options.broadcaster;\n        }\n    } else {\n        this.parent.localStreams.forEach(function (stream) {\n            self.pc.addStream(stream);\n        });\n    }\n\n    // call emitter constructor\n    WildEmitter.call(this);\n\n    this.on('channelOpen', function (channel) {\n        if (channel.protocol === INBAND_FILETRANSFER_V1) {\n            channel.onmessage = function (event) {\n                var metadata = JSON.parse(event.data);\n                var receiver = new FileTransfer.Receiver();\n                receiver.receive(metadata, channel);\n                self.emit('fileTransfer', metadata, receiver);\n                receiver.on('receivedFile', function (file, metadata) {\n                    receiver.channel.close();\n                });\n            };\n        }\n    });\n\n    // proxy events to parent\n    this.on('*', function () {\n        self.parent.emit.apply(self.parent, arguments);\n    });\n}\n\nutil.inherits(Peer, WildEmitter);\n\nPeer.prototype.handleMessage = function (message) {\n    var self = this;\n\n    this.logger.log('getting', message.type, message);\n\n    if (message.prefix) this.browserPrefix = message.prefix;\n\n    if (message.type === 'offer') {\n        // workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1064247\n        message.payload.sdp = message.payload.sdp.replace('a=fmtp:0 profile-level-id=0x42e00c;packetization-mode=1\\r\\n', '');\n        this.pc.handleOffer(message.payload, function (err) {\n            if (err) {\n                return;\n            }\n            // auto-accept\n            self.pc.answer(self.receiveMedia, function (err, sessionDescription) {\n                //self.send('answer', sessionDescription);\n            });\n        });\n    } else if (message.type === 'answer') {\n        this.pc.handleAnswer(message.payload);\n    } else if (message.type === 'candidate') {\n        this.pc.processIce(message.payload);\n    } else if (message.type === 'connectivityError') {\n        this.parent.emit('connectivityError', self);\n    } else if (message.type === 'mute') {\n        this.parent.emit('mute', {id: message.from, name: message.payload.name});\n    } else if (message.type === 'unmute') {\n        this.parent.emit('unmute', {id: message.from, name: message.payload.name});\n    }\n};\n\n// send via signalling channel\nPeer.prototype.send = function (messageType, payload) {\n    var message = {\n        to: this.id,\n        sid: this.sid,\n        broadcaster: this.broadcaster,\n        roomType: this.type,\n        type: messageType,\n        payload: payload,\n        prefix: webrtc.prefix\n    };\n    this.logger.log('sending', messageType, message);\n    this.parent.emit('message', message);\n};\n\n// send via data channel\n// returns true when message was sent and false if channel is not open\nPeer.prototype.sendDirectly = function (channel, messageType, payload) {\n    var message = {\n        type: messageType,\n        payload: payload\n    };\n    this.logger.log('sending via datachannel', channel, messageType, message);\n    var dc = this.getDataChannel(channel);\n    if (dc.readyState != 'open') return false;\n    dc.send(JSON.stringify(message));\n    return true;\n};\n\n// Internal method registering handlers for a data channel and emitting events on the peer\nPeer.prototype._observeDataChannel = function (channel) {\n    var self = this;\n    channel.onclose = this.emit.bind(this, 'channelClose', channel);\n    channel.onerror = this.emit.bind(this, 'channelError', channel);\n    channel.onmessage = function (event) {\n        self.emit('channelMessage', self, channel.label, JSON.parse(event.data), channel, event);\n    };\n    channel.onopen = this.emit.bind(this, 'channelOpen', channel);\n};\n\n// Fetch or create a data channel by the given name\nPeer.prototype.getDataChannel = function (name, opts) {\n    if (!webrtc.supportDataChannel) return this.emit('error', new Error('createDataChannel not supported'));\n    var channel = this.channels[name];\n    opts || (opts = {});\n    if (channel) return channel;\n    // if we don't have one by this label, create it\n    channel = this.channels[name] = this.pc.createDataChannel(name, opts);\n    this._observeDataChannel(channel);\n    return channel;\n};\n\nPeer.prototype.onIceCandidate = function (candidate) {\n    if (this.closed) return;\n    if (candidate) {\n        this.send('candidate', candidate);\n    } else {\n        this.logger.log(\"End of candidates.\");\n    }\n};\n\nPeer.prototype.start = function () {\n    var self = this;\n\n    // well, the webrtc api requires that we either\n    // a) create a datachannel a priori\n    // b) do a renegotiation later to add the SCTP m-line\n    // Let's do (a) first...\n    if (this.enableDataChannels) {\n        this.getDataChannel('simplewebrtc');\n    }\n\n    this.pc.offer(this.receiveMedia, function (err, sessionDescription) {\n        //self.send('offer', sessionDescription);\n    });\n};\n\nPeer.prototype.icerestart = function () {\n    var constraints = this.receiveMedia;\n    constraints.mandatory.IceRestart = true;\n    this.pc.offer(constraints, function (err, success) { });\n};\n\nPeer.prototype.end = function () {\n    if (this.closed) return;\n    this.pc.close();\n    this.handleStreamRemoved();\n};\n\nPeer.prototype.handleRemoteStreamAdded = function (event) {\n    var self = this;\n    if (this.stream) {\n        this.logger.warn('Already have a remote stream');\n    } else {\n        this.stream = event.stream;\n        // FIXME: addEventListener('ended', ...) would be nicer\n        // but does not work in firefox \n        this.stream.onended = function () {\n            self.end();\n        };\n        this.parent.emit('peerStreamAdded', this);\n    }\n};\n\nPeer.prototype.handleStreamRemoved = function () {\n    this.parent.peers.splice(this.parent.peers.indexOf(this), 1);\n    this.closed = true;\n    this.parent.emit('peerStreamRemoved', this);\n};\n\nPeer.prototype.handleDataChannelAdded = function (channel) {\n    this.channels[channel.label] = channel;\n    this._observeDataChannel(channel);\n};\n\nPeer.prototype.sendFile = function (file) {\n    var sender = new FileTransfer.Sender();\n    var dc = this.getDataChannel('filetransfer' + (new Date()).getTime(), {\n        protocol: INBAND_FILETRANSFER_V1\n    });\n    // override onopen\n    dc.onopen = function () {\n        dc.send(JSON.stringify({\n            size: file.size,\n            name: file.name\n        }));\n        sender.send(file, dc);\n    };\n    // override onclose\n    dc.onclose = function () {\n        console.log('sender received transfer');\n        sender.emit('complete');\n    };\n    return sender;\n};\n\nmodule.exports = Peer;\n\n},{\"filetransfer\":11,\"rtcpeerconnection\":10,\"util\":2,\"webrtcsupport\":5,\"wildemitter\":4}],12:[function(require,module,exports){\n// getUserMedia helper by @HenrikJoreteg\nvar func = (window.navigator.getUserMedia ||\n            window.navigator.webkitGetUserMedia ||\n            window.navigator.mozGetUserMedia ||\n            window.navigator.msGetUserMedia);\n\n\nmodule.exports = function (constraints, cb) {\n    var options, error;\n    var haveOpts = arguments.length === 2;\n    var defaultOpts = {video: true, audio: true};\n    var denied = 'PermissionDeniedError';\n    var notSatisfied = 'ConstraintNotSatisfiedError';\n\n    // make constraints optional\n    if (!haveOpts) {\n        cb = constraints;\n        constraints = defaultOpts;\n    }\n\n    // treat lack of browser support like an error\n    if (!func) {\n        // throw proper error per spec\n        error = new Error('MediaStreamError');\n        error.name = 'NotSupportedError';\n\n        // keep all callbacks async\n        return window.setTimeout(function () {\n            cb(error);\n        }, 0);\n    }\n\n    // make requesting media from non-http sources trigger an error\n    // current browsers silently drop the request instead\n    var protocol = window.location.protocol;\n    if (protocol !== 'http:' && protocol !== 'https:') {\n        error = new Error('MediaStreamError');\n        error.name = 'NotSupportedError';\n\n        // keep all callbacks async\n        return window.setTimeout(function () {\n            cb(error);\n        }, 0);\n    }\n\n    // normalize error handling when no media types are requested\n    if (!constraints.audio && !constraints.video) {\n        error = new Error('MediaStreamError');\n        error.name = 'NoMediaRequestedError';\n\n        // keep all callbacks async\n        return window.setTimeout(function () {\n            cb(error);\n        }, 0);\n    }\n\n    if (localStorage && localStorage.useFirefoxFakeDevice === \"true\") {\n        constraints.fake = true;\n    }\n\n    func.call(window.navigator, constraints, function (stream) {\n        cb(null, stream);\n    }, function (err) {\n        var error;\n        // coerce into an error object since FF gives us a string\n        // there are only two valid names according to the spec\n        // we coerce all non-denied to \"constraint not satisfied\".\n        if (typeof err === 'string') {\n            error = new Error('MediaStreamError');\n            if (err === denied) {\n                error.name = denied;\n            } else {\n                error.name = notSatisfied;\n            }\n        } else {\n            // if we get an error object make sure '.name' property is set\n            // according to spec: http://dev.w3.org/2011/webrtc/editor/getusermedia.html#navigatorusermediaerror-and-navigatorusermediaerrorcallback\n            error = err;\n            if (!error.name) {\n                // this is likely chrome which\n                // sets a property called \"ERROR_DENIED\" on the error object\n                // if so we make sure to set a name\n                if (error[denied]) {\n                    err.name = denied;\n                } else {\n                    err.name = notSatisfied;\n                }\n            }\n        }\n\n        cb(error);\n    });\n};\n\n},{}],7:[function(require,module,exports){\nvar util = require('util');\nvar hark = require('hark');\nvar webrtc = require('webrtcsupport');\nvar getUserMedia = require('getusermedia');\nvar getScreenMedia = require('getscreenmedia');\nvar WildEmitter = require('wildemitter');\nvar GainController = require('mediastream-gain');\nvar mockconsole = require('mockconsole');\n\n\nfunction LocalMedia(opts) {\n    WildEmitter.call(this);\n\n    var config = this.config = {\n        autoAdjustMic: false,\n        detectSpeakingEvents: true,\n        media: {\n            audio: true,\n            video: true\n        },\n        logger: mockconsole\n    };\n\n    var item;\n    for (item in opts) {\n        this.config[item] = opts[item];\n    }\n\n    this.logger = config.logger;\n    this._log = this.logger.log.bind(this.logger, 'LocalMedia:');\n    this._logerror = this.logger.error.bind(this.logger, 'LocalMedia:');\n\n    this.screenSharingSupport = webrtc.screenSharing;\n\n    this.localStreams = [];\n    this.localScreens = [];\n\n    if (!webrtc.support) {\n        this._logerror('Your browser does not support local media capture.');\n    }\n}\n\nutil.inherits(LocalMedia, WildEmitter);\n\n\nLocalMedia.prototype.start = function (mediaConstraints, cb) {\n    var self = this;\n    var constraints = mediaConstraints || this.config.media;\n\n    getUserMedia(constraints, function (err, stream) {\n        if (!err) {\n            if (constraints.audio && self.config.detectSpeakingEvents) {\n                self.setupAudioMonitor(stream, self.config.harkOptions);\n            }\n            self.localStreams.push(stream);\n\n            if (self.config.autoAdjustMic) {\n                self.gainController = new GainController(stream);\n                // start out somewhat muted if we can track audio\n                self.setMicIfEnabled(0.5);\n            }\n\n            // TODO: might need to migrate to the video tracks onended\n            // FIXME: firefox does not seem to trigger this...\n            stream.onended = function () {\n                /*\n                var idx = self.localStreams.indexOf(stream);\n                if (idx > -1) {\n                    self.localScreens.splice(idx, 1);\n                }\n                self.emit('localStreamStopped', stream);\n                */\n            };\n\n            self.emit('localStream', stream);\n        }\n        if (cb) {\n            return cb(err, stream);\n        }\n    });\n};\n\nLocalMedia.prototype.stop = function (stream) {\n    var self = this;\n    // FIXME: duplicates cleanup code until fixed in FF\n    if (stream) {\n        stream.stop();\n        self.emit('localStreamStopped', stream);\n        var idx = self.localStreams.indexOf(stream);\n        if (idx > -1) {\n            self.localStreams = self.localStreams.splice(idx, 1);\n        }\n    } else {\n        if (this.audioMonitor) {\n            this.audioMonitor.stop();\n            delete this.audioMonitor;\n        }\n        this.localStreams.forEach(function (stream) {\n            stream.stop();\n            self.emit('localStreamStopped', stream);\n        });\n        this.localStreams = [];\n    }\n};\n\nLocalMedia.prototype.startScreenShare = function (cb) {\n    var self = this;\n    getScreenMedia(function (err, stream) {\n        if (!err) {\n            self.localScreens.push(stream);\n\n            // TODO: might need to migrate to the video tracks onended\n            // Firefox does not support .onended but it does not support\n            // screensharing either\n            stream.onended = function () {\n                var idx = self.localScreens.indexOf(stream);\n                if (idx > -1) {\n                    self.localScreens.splice(idx, 1);\n                }\n                self.emit('localScreenStopped', stream);\n            };\n            self.emit('localScreen', stream);\n        }\n\n        // enable the callback\n        if (cb) {\n            return cb(err, stream);\n        }\n    });\n};\n\nLocalMedia.prototype.stopScreenShare = function (stream) {\n    if (stream) {\n        stream.stop();\n    } else {\n        this.localScreens.forEach(function (stream) {\n            stream.stop();\n        });\n        this.localScreens = [];\n    }\n};\n\n// Audio controls\nLocalMedia.prototype.mute = function () {\n    this._audioEnabled(false);\n    this.hardMuted = true;\n    this.emit('audioOff');\n};\n\nLocalMedia.prototype.unmute = function () {\n    this._audioEnabled(true);\n    this.hardMuted = false;\n    this.emit('audioOn');\n};\n\nLocalMedia.prototype.setupAudioMonitor = function (stream, harkOptions) {\n    this._log('Setup audio');\n    var audio = this.audioMonitor = hark(stream, harkOptions);\n    var self = this;\n    var timeout;\n\n    audio.on('speaking', function () {\n        self.emit('speaking');\n        if (self.hardMuted) {\n            return;\n        }\n        self.setMicIfEnabled(1);\n    });\n\n    audio.on('stopped_speaking', function () {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        timeout = setTimeout(function () {\n            self.emit('stoppedSpeaking');\n            if (self.hardMuted) {\n                return;\n            }\n            self.setMicIfEnabled(0.5);\n        }, 1000);\n    });\n    audio.on('volume_change', function (volume, treshold) {\n        self.emit('volumeChange', volume, treshold);\n    });\n};\n\n// We do this as a seperate method in order to\n// still leave the \"setMicVolume\" as a working\n// method.\nLocalMedia.prototype.setMicIfEnabled = function (volume) {\n    if (!this.config.autoAdjustMic) {\n        return;\n    }\n    this.gainController.setGain(volume);\n};\n\n// Video controls\nLocalMedia.prototype.pauseVideo = function () {\n    this._videoEnabled(false);\n    this.emit('videoOff');\n};\nLocalMedia.prototype.resumeVideo = function () {\n    this._videoEnabled(true);\n    this.emit('videoOn');\n};\n\n// Combined controls\nLocalMedia.prototype.pause = function () {\n    this.mute();\n    this.pauseVideo();\n};\nLocalMedia.prototype.resume = function () {\n    this.unmute();\n    this.resumeVideo();\n};\n\n// Internal methods for enabling/disabling audio/video\nLocalMedia.prototype._audioEnabled = function (bool) {\n    // work around for chrome 27 bug where disabling tracks\n    // doesn't seem to work (works in canary, remove when working)\n    this.setMicIfEnabled(bool ? 1 : 0);\n    this.localStreams.forEach(function (stream) {\n        stream.getAudioTracks().forEach(function (track) {\n            track.enabled = !!bool;\n        });\n    });\n};\nLocalMedia.prototype._videoEnabled = function (bool) {\n    this.localStreams.forEach(function (stream) {\n        stream.getVideoTracks().forEach(function (track) {\n            track.enabled = !!bool;\n        });\n    });\n};\n\n// check if all audio streams are enabled\nLocalMedia.prototype.isAudioEnabled = function () {\n    var enabled = true;\n    this.localStreams.forEach(function (stream) {\n        stream.getAudioTracks().forEach(function (track) {\n            enabled = enabled && track.enabled;\n        });\n    });\n    return enabled;\n};\n\n// check if all video streams are enabled\nLocalMedia.prototype.isVideoEnabled = function () {\n    var enabled = true;\n    this.localStreams.forEach(function (stream) {\n        stream.getVideoTracks().forEach(function (track) {\n            enabled = enabled && track.enabled;\n        });\n    });\n    return enabled;\n};\n\n// Backwards Compat\nLocalMedia.prototype.startLocalMedia = LocalMedia.prototype.start;\nLocalMedia.prototype.stopLocalMedia = LocalMedia.prototype.stop;\n\n// fallback for old .localStream behaviour\nObject.defineProperty(LocalMedia.prototype, 'localStream', {\n    get: function () {\n        return this.localStreams.length > 0 ? this.localStreams[0] : null;\n    }\n});\n// fallback for old .localScreen behaviour\nObject.defineProperty(LocalMedia.prototype, 'localScreen', {\n    get: function () {\n        return this.localScreens.length > 0 ? this.localScreens[0] : null;\n    }\n});\n\nmodule.exports = LocalMedia;\n\n},{\"getscreenmedia\":14,\"getusermedia\":12,\"hark\":13,\"mediastream-gain\":15,\"mockconsole\":6,\"util\":2,\"webrtcsupport\":5,\"wildemitter\":4}],16:[function(require,module,exports){\n//     Underscore.js 1.8.2\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.2';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var isArrayLike = function(collection) {\n    var length = collection && collection.length;\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, target, fromIndex) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    if (array == null) return [];\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = array.length; i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, 'length').length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = list && list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    var i = 0, length = array && array.length;\n    if (typeof isSorted == 'number') {\n      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n    } else if (isSorted && length) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (item !== item) {\n      return _.findIndex(slice.call(array, i), _.isNaN);\n    }\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  _.lastIndexOf = function(array, item, from) {\n    var idx = array ? array.length : 0;\n    if (typeof from == 'number') {\n      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);\n    }\n    if (item !== item) {\n      return _.findLastIndex(slice.call(array, 0, idx), _.isNaN);\n    }\n    while (--idx >= 0) if (array[idx] === item) return idx;\n    return -1;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = array != null && array.length;\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createIndexFinder(1);\n\n  _.findLastIndex = createIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    \n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of \n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n  \n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n\n},{}],11:[function(require,module,exports){\nvar WildEmitter = require('wildemitter');\nvar util = require('util');\n\nfunction Sender(opts) {\n    WildEmitter.call(this);\n    var options = opts || {};\n    this.config = {\n        chunksize: 16384,\n        pacing: 0\n    };\n    // set our config from options\n    var item;\n    for (item in options) {\n        this.config[item] = options[item];\n    }\n\n    this.file = null;\n    this.channel = null;\n}\nutil.inherits(Sender, WildEmitter);\n\nSender.prototype.send = function (file, channel) {\n    var self = this;\n    this.file = file;\n    this.channel = channel;\n    var sliceFile = function(offset) {\n        var reader = new window.FileReader();\n        reader.onload = (function() {\n            return function(e) {\n                self.channel.send(e.target.result);\n                self.emit('progress', offset, file.size, e.target.result);\n                if (file.size > offset + e.target.result.byteLength) {\n                    window.setTimeout(sliceFile, self.config.pacing, offset + self.config.chunksize);\n                } else {\n                    self.emit('progress', file.size, file.size, null);\n                    self.emit('sentFile');\n                }\n            };\n        })(file);\n        var slice = file.slice(offset, offset + self.config.chunksize);\n        reader.readAsArrayBuffer(slice);\n    };\n    window.setTimeout(sliceFile, 0, 0);\n};\n\nfunction Receiver() {\n    WildEmitter.call(this);\n\n    this.receiveBuffer = [];\n    this.received = 0;\n    this.metadata = {};\n    this.channel = null;\n}\nutil.inherits(Receiver, WildEmitter);\n\nReceiver.prototype.receive = function (metadata, channel) {\n    var self = this;\n\n    if (metadata) {\n        this.metadata = metadata;\n    }\n    this.channel = channel;\n    // chrome only supports arraybuffers and those make it easier to calc the hash\n    channel.binaryType = 'arraybuffer';\n    this.channel.onmessage = function (event) {\n        var len = event.data.byteLength;\n        self.received += len;\n        self.receiveBuffer.push(event.data);\n\n        self.emit('progress', self.received, self.metadata.size, event.data);\n        if (self.received === self.metadata.size) {\n            self.emit('receivedFile', new window.Blob(self.receiveBuffer), self.metadata);\n            self.receiveBuffer = []; // discard receivebuffer\n        } else if (self.received > self.metadata.size) {\n            // FIXME\n            console.error('received more than expected, discarding...');\n            self.receiveBuffer = []; // just discard...\n\n        }\n    };\n};\n\nmodule.exports = {};\nmodule.exports.support = window && window.File && window.FileReader && window.Blob;\nmodule.exports.Sender = Sender;\nmodule.exports.Receiver = Receiver;\n\n},{\"util\":2,\"wildemitter\":4}],10:[function(require,module,exports){\nvar _ = require('underscore');\nvar util = require('util');\nvar webrtc = require('webrtcsupport');\nvar SJJ = require('sdp-jingle-json');\nvar WildEmitter = require('wildemitter');\nvar peerconn = require('traceablepeerconnection');\n\nfunction PeerConnection(config, constraints) {\n    var self = this;\n    var item;\n    WildEmitter.call(this);\n\n    config = config || {};\n    config.iceServers = config.iceServers || [];\n\n    // make sure this only gets enabled in Google Chrome\n    // EXPERIMENTAL FLAG, might get removed without notice\n    this.enableChromeNativeSimulcast = false;\n    if (constraints && constraints.optional &&\n            webrtc.prefix === 'webkit' &&\n            navigator.appVersion.match(/Chromium\\//) === null) {\n        constraints.optional.forEach(function (constraint, idx) {\n            if (constraint.enableChromeNativeSimulcast) {\n                self.enableChromeNativeSimulcast = true;\n            }\n        });\n    }\n\n    // EXPERIMENTAL FLAG, might get removed without notice\n    this.enableMultiStreamHacks = false;\n    if (constraints && constraints.optional) {\n        constraints.optional.forEach(function (constraint, idx) {\n            if (constraint.enableMultiStreamHacks) {\n                self.enableMultiStreamHacks = true;\n            }\n        });\n    }\n    // EXPERIMENTAL FLAG, might get removed without notice\n    this.restrictBandwidth = 0;\n    if (constraints && constraints.optional) {\n        constraints.optional.forEach(function (constraint, idx) {\n            if (constraint.andyetRestrictBandwidth) {\n                self.restrictBandwidth = constraint.andyetRestrictBandwidth;\n            }\n        });\n    }\n\n    // EXPERIMENTAL FLAG, might get removed without notice\n    // bundle up ice candidates, only works for jingle mode\n    // number > 0 is the delay to wait for additional candidates\n    // ~20ms seems good\n    this.batchIceCandidates = 0;\n    if (constraints && constraints.optional) {\n        constraints.optional.forEach(function (constraint, idx) {\n            if (constraint.andyetBatchIce) {\n                self.batchIceCandidates = constraint.andyetBatchIce;\n            }\n        });\n    }\n    this.batchedIceCandidates = [];\n\n    // EXPERIMENTAL FLAG, might get removed without notice\n    this.assumeSetLocalSuccess = false;\n    if (constraints && constraints.optional) {\n        constraints.optional.forEach(function (constraint, idx) {\n            if (constraint.andyetAssumeSetLocalSuccess) {\n                self.assumeSetLocalSuccess = constraint.andyetAssumeSetLocalSuccess;\n            }\n        });\n    }\n\n\n    this.pc = new peerconn(config, constraints);\n\n    this.getLocalStreams = this.pc.getLocalStreams.bind(this.pc);\n    this.getRemoteStreams = this.pc.getRemoteStreams.bind(this.pc);\n    this.addStream = this.pc.addStream.bind(this.pc);\n    this.removeStream = this.pc.removeStream.bind(this.pc);\n\n    // proxy events \n    this.pc.on('*', function () {\n        self.emit.apply(self, arguments);\n    });\n\n    // proxy some events directly\n    this.pc.onremovestream = this.emit.bind(this, 'removeStream');\n    this.pc.onaddstream = this.emit.bind(this, 'addStream');\n    this.pc.onnegotiationneeded = this.emit.bind(this, 'negotiationNeeded');\n    this.pc.oniceconnectionstatechange = this.emit.bind(this, 'iceConnectionStateChange');\n    this.pc.onsignalingstatechange = this.emit.bind(this, 'signalingStateChange');\n\n    // handle ice candidate and data channel events\n    this.pc.onicecandidate = this._onIce.bind(this);\n    this.pc.ondatachannel = this._onDataChannel.bind(this);\n\n    this.localDescription = {\n        contents: []\n    };\n    this.remoteDescription = {\n        contents: []\n    };\n\n    this.config = {\n        debug: false,\n        ice: {},\n        sid: '',\n        isInitiator: true,\n        sdpSessionID: Date.now(),\n        useJingle: false\n    };\n\n    // apply our config\n    for (item in config) {\n        this.config[item] = config[item];\n    }\n\n    if (this.config.debug) {\n        this.on('*', function (eventName, event) {\n            var logger = config.logger || console;\n            logger.log('PeerConnection event:', arguments);\n        });\n    }\n    this.hadLocalStunCandidate = false;\n    this.hadRemoteStunCandidate = false;\n    this.hadLocalRelayCandidate = false;\n    this.hadRemoteRelayCandidate = false;\n\n    this.hadLocalIPv6Candidate = false;\n    this.hadRemoteIPv6Candidate = false;\n\n    // keeping references for all our data channels\n    // so they dont get garbage collected\n    // can be removed once the following bugs have been fixed\n    // https://crbug.com/405545 \n    // https://bugzilla.mozilla.org/show_bug.cgi?id=964092\n    // to be filed for opera\n    this._remoteDataChannels = [];\n    this._localDataChannels = [];\n}\n\nutil.inherits(PeerConnection, WildEmitter);\n\nObject.defineProperty(PeerConnection.prototype, 'signalingState', {\n    get: function () {\n        return this.pc.signalingState;\n    }\n});\nObject.defineProperty(PeerConnection.prototype, 'iceConnectionState', {\n    get: function () {\n        return this.pc.iceConnectionState;\n    }\n});\n\nPeerConnection.prototype._role = function () {\n    return this.isInitiator ? 'initiator' : 'responder';\n};\n\n// Add a stream to the peer connection object\nPeerConnection.prototype.addStream = function (stream) {\n    this.localStream = stream;\n    this.pc.addStream(stream);\n};\n\n// helper function to check if a remote candidate is a stun/relay\n// candidate or an ipv6 candidate\nPeerConnection.prototype._checkLocalCandidate = function (candidate) {\n    var cand = SJJ.toCandidateJSON(candidate);\n    if (cand.type == 'srflx') {\n        this.hadLocalStunCandidate = true;\n    } else if (cand.type == 'relay') {\n        this.hadLocalRelayCandidate = true;\n    }\n    if (cand.ip.indexOf(':') != -1) {\n        this.hadLocalIPv6Candidate = true;\n    }\n};\n\n// helper function to check if a remote candidate is a stun/relay\n// candidate or an ipv6 candidate\nPeerConnection.prototype._checkRemoteCandidate = function (candidate) {\n    var cand = SJJ.toCandidateJSON(candidate);\n    if (cand.type == 'srflx') {\n        this.hadRemoteStunCandidate = true;\n    } else if (cand.type == 'relay') {\n        this.hadRemoteRelayCandidate = true;\n    }\n    if (cand.ip.indexOf(':') != -1) {\n        this.hadRemoteIPv6Candidate = true;\n    }\n};\n\n\n// Init and add ice candidate object with correct constructor\nPeerConnection.prototype.processIce = function (update, cb) {\n    cb = cb || function () {};\n    var self = this;\n\n    // ignore any added ice candidates to avoid errors. why does the\n    // spec not do this?\n    if (this.pc.signalingState === 'closed') return cb();\n\n    if (update.contents || (update.jingle && update.jingle.contents)) {\n        var contentNames = _.pluck(this.remoteDescription.contents, 'name');\n        var contents = update.contents || update.jingle.contents;\n\n        contents.forEach(function (content) {\n            var transport = content.transport || {};\n            var candidates = transport.candidates || [];\n            var mline = contentNames.indexOf(content.name);\n            var mid = content.name;\n\n            candidates.forEach(\n                function (candidate) {\n                var iceCandidate = SJJ.toCandidateSDP(candidate) + '\\r\\n';\n                self.pc.addIceCandidate(\n                    new webrtc.IceCandidate({\n                        candidate: iceCandidate,\n                        sdpMLineIndex: mline,\n                        sdpMid: mid\n                    }), function () {\n                        // well, this success callback is pretty meaningless\n                    },\n                    function (err) {\n                        self.emit('error', err);\n                    }\n                );\n                self._checkRemoteCandidate(iceCandidate);\n            });\n        });\n    } else {\n        // working around https://code.google.com/p/webrtc/issues/detail?id=3669\n        if (update.candidate && update.candidate.candidate.indexOf('a=') !== 0) {\n            update.candidate.candidate = 'a=' + update.candidate.candidate;\n        }\n\n        self.pc.addIceCandidate(\n            new webrtc.IceCandidate(update.candidate),\n            function () { },\n            function (err) {\n                self.emit('error', err);\n            }\n        );\n        self._checkRemoteCandidate(update.candidate.candidate);\n    }\n    cb();\n};\n\n// Generate and emit an offer with the given constraints\nPeerConnection.prototype.offer = function (constraints, cb) {\n    var self = this;\n    var hasConstraints = arguments.length === 2;\n    var mediaConstraints = hasConstraints ? constraints : {\n            mandatory: {\n                OfferToReceiveAudio: true,\n                OfferToReceiveVideo: true\n            }\n        };\n    cb = hasConstraints ? cb : constraints;\n    cb = cb || function () {};\n\n    if (this.pc.signalingState === 'closed') return cb('Already closed');\n\n    // Actually generate the offer\n    this.pc.createOffer(\n        function (offer) {\n            // does not work for jingle, but jingle.js doesn't need\n            // this hack...\n            if (self.assumeSetLocalSuccess) {\n                self.emit('offer', offer);\n                cb(null, offer);\n            }\n            self.pc.setLocalDescription(offer,\n                function () {\n                    var jingle;\n                    var expandedOffer = {\n                        type: 'offer',\n                        sdp: offer.sdp\n                    };\n                    if (self.config.useJingle) {\n                        jingle = SJJ.toSessionJSON(offer.sdp, {\n                            role: self._role(),\n                            direction: 'outgoing'\n                        });\n                        jingle.sid = self.config.sid;\n                        self.localDescription = jingle;\n\n                        // Save ICE credentials\n                        _.each(jingle.contents, function (content) {\n                            var transport = content.transport || {};\n                            if (transport.ufrag) {\n                                self.config.ice[content.name] = {\n                                    ufrag: transport.ufrag,\n                                    pwd: transport.pwd\n                                };\n                            }\n                        });\n\n                        expandedOffer.jingle = jingle;\n                    }\n                    expandedOffer.sdp.split('\\r\\n').forEach(function (line) {\n                        if (line.indexOf('a=candidate:') === 0) {\n                            self._checkLocalCandidate(line);\n                        }\n                    });\n\n                    if (!self.assumeSetLocalSuccess) {\n                        self.emit('offer', expandedOffer);\n                        cb(null, expandedOffer);\n                    }\n                },\n                function (err) {\n                    self.emit('error', err);\n                    cb(err);\n                }\n            );\n        },\n        function (err) {\n            self.emit('error', err);\n            cb(err);\n        },\n        mediaConstraints\n    );\n};\n\n\n// Process an incoming offer so that ICE may proceed before deciding\n// to answer the request.\nPeerConnection.prototype.handleOffer = function (offer, cb) {\n    cb = cb || function () {};\n    var self = this;\n    offer.type = 'offer';\n    if (offer.jingle) {\n        if (this.enableChromeNativeSimulcast) {\n            offer.jingle.contents.forEach(function (content) {\n                if (content.name === 'video') {\n                    content.description.googConferenceFlag = true;\n                }\n            });\n        }\n        /*\n        if (this.enableMultiStreamHacks) {\n            // add a mixed video stream as first stream\n            offer.jingle.contents.forEach(function (content) {\n                if (content.name === 'video') {\n                    var sources = content.description.sources || [];\n                    if (sources.length === 0 || sources[0].ssrc !== \"3735928559\") {\n                        sources.unshift({\n                            ssrc: \"3735928559\", // 0xdeadbeef\n                            parameters: [\n                                {\n                                    key: \"cname\",\n                                    value: \"deadbeef\"\n                                },\n                                {\n                                    key: \"msid\",\n                                    value: \"mixyourfecintothis please\"\n                                }\n                            ]\n                        });\n                        content.description.sources = sources;\n                    }\n                }\n            });\n        }\n        */\n        if (self.restrictBandwidth > 0) {\n            offer.jingle = SJJ.toSessionJSON(offer.sdp, {\n                role: self._role(),\n                direction: 'incoming'\n            });\n            if (offer.jingle.contents.length >= 2 && offer.jingle.contents[1].name === 'video') {\n                var content = offer.jingle.contents[1];\n                var hasBw = content.description && content.description.bandwidth;\n                if (!hasBw) {\n                    offer.jingle.contents[1].description.bandwidth = { type:'AS', bandwidth: self.restrictBandwidth.toString() };\n                    offer.sdp = SJJ.toSessionSDP(offer.jingle, {\n                        sid: self.config.sdpSessionID,\n                        role: self._role(),\n                        direction: 'outgoing'\n                    });\n                }\n            }\n        }\n        offer.sdp = SJJ.toSessionSDP(offer.jingle, {\n            sid: self.config.sdpSessionID,\n            role: self._role(),\n            direction: 'incoming'\n        });\n        self.remoteDescription = offer.jingle;\n    }\n    offer.sdp.split('\\r\\n').forEach(function (line) {\n        if (line.indexOf('a=candidate:') === 0) {\n            self._checkRemoteCandidate(line);\n        }\n    });\n    self.pc.setRemoteDescription(new webrtc.SessionDescription(offer),\n        function () {\n            cb();\n        },\n        cb\n    );\n};\n\n// Answer an offer with audio only\nPeerConnection.prototype.answerAudioOnly = function (cb) {\n    var mediaConstraints = {\n            mandatory: {\n                OfferToReceiveAudio: true,\n                OfferToReceiveVideo: false\n            }\n        };\n    this._answer(mediaConstraints, cb);\n};\n\n// Answer an offer without offering to recieve\nPeerConnection.prototype.answerBroadcastOnly = function (cb) {\n    var mediaConstraints = {\n            mandatory: {\n                OfferToReceiveAudio: false,\n                OfferToReceiveVideo: false\n            }\n        };\n    this._answer(mediaConstraints, cb);\n};\n\n// Answer an offer with given constraints default is audio/video\nPeerConnection.prototype.answer = function (constraints, cb) {\n    var self = this;\n    var hasConstraints = arguments.length === 2;\n    var callback = hasConstraints ? cb : constraints;\n    var mediaConstraints = hasConstraints ? constraints : {\n            mandatory: {\n                OfferToReceiveAudio: true,\n                OfferToReceiveVideo: true\n            }\n        };\n\n    this._answer(mediaConstraints, callback);\n};\n\n// Process an answer\nPeerConnection.prototype.handleAnswer = function (answer, cb) {\n    cb = cb || function () {};\n    var self = this;\n    if (answer.jingle) {\n        answer.sdp = SJJ.toSessionSDP(answer.jingle, {\n            sid: self.config.sdpSessionID,\n            role: self._role(),\n            direction: 'incoming'\n        });\n        self.remoteDescription = answer.jingle;\n    }\n    answer.sdp.split('\\r\\n').forEach(function (line) {\n        if (line.indexOf('a=candidate:') === 0) {\n            self._checkRemoteCandidate(line);\n        }\n    });\n    self.pc.setRemoteDescription(\n        new webrtc.SessionDescription(answer),\n        function () {\n            cb(null);\n        },\n        cb\n    );\n};\n\n// Close the peer connection\nPeerConnection.prototype.close = function () {\n    this.pc.close();\n\n    this._localDataChannels = [];\n    this._remoteDataChannels = [];\n\n    this.emit('close');\n};\n\n// Internal code sharing for various types of answer methods\nPeerConnection.prototype._answer = function (constraints, cb) {\n    cb = cb || function () {};\n    var self = this;\n    if (!this.pc.remoteDescription) {\n        // the old API is used, call handleOffer\n        throw new Error('remoteDescription not set');\n    }\n\n    if (this.pc.signalingState === 'closed') return cb('Already closed');\n\n    self.pc.createAnswer(\n        function (answer) {\n            var sim = [];\n            var rtx = [];\n            if (self.enableChromeNativeSimulcast) {\n                // native simulcast part 1: add another SSRC\n                answer.jingle = SJJ.toSessionJSON(answer.sdp, {\n                    role: self._role(),\n                    direction: 'outgoing'\n                });\n                if (answer.jingle.contents.length >= 2 && answer.jingle.contents[1].name === 'video') {\n                    var hasSimgroup = false;\n                    var groups = answer.jingle.contents[1].description.sourceGroups || [];\n                    var hasSim = false;\n                    groups.forEach(function (group) {\n                        if (group.semantics == 'SIM') hasSim = true;\n                    });\n                    if (!hasSim &&\n                        answer.jingle.contents[1].description.sources.length) {\n                        var newssrc = JSON.parse(JSON.stringify(answer.jingle.contents[1].description.sources[0]));\n                        newssrc.ssrc = '' + Math.floor(Math.random() * 0xffffffff); // FIXME: look for conflicts\n                        answer.jingle.contents[1].description.sources.push(newssrc);\n\n                        sim.push(answer.jingle.contents[1].description.sources[0].ssrc);\n                        sim.push(newssrc.ssrc);\n                        groups.push({\n                            semantics: 'SIM',\n                            sources: sim\n                        });\n\n                        // also create an RTX one for the SIM one\n                        var rtxssrc = JSON.parse(JSON.stringify(newssrc));\n                        rtxssrc.ssrc = '' + Math.floor(Math.random() * 0xffffffff); // FIXME: look for conflicts\n                        answer.jingle.contents[1].description.sources.push(rtxssrc);\n                        groups.push({\n                            semantics: 'FID',\n                            sources: [newssrc.ssrc, rtxssrc.ssrc]\n                        });\n\n                        answer.jingle.contents[1].description.sourceGroups = groups;\n                        answer.sdp = SJJ.toSessionSDP(answer.jingle, {\n                            sid: self.config.sdpSessionID,\n                            role: self._role(),\n                            direction: 'outgoing'\n                        });\n                    }\n                }\n            }\n            if (self.assumeSetLocalSuccess) {\n                // not safe to do when doing simulcast mangling\n                self.emit('answer', answer);\n                cb(null, answer);\n            }\n            self.pc.setLocalDescription(answer,\n                function () {\n                    var expandedAnswer = {\n                        type: 'answer',\n                        sdp: answer.sdp\n                    };\n                    if (self.config.useJingle) {\n                        var jingle = SJJ.toSessionJSON(answer.sdp, {\n                            role: self._role(),\n                            direction: 'outgoing'\n                        });\n                        jingle.sid = self.config.sid;\n                        self.localDescription = jingle;\n                        expandedAnswer.jingle = jingle;\n                    }\n                    if (self.enableChromeNativeSimulcast) {\n                        // native simulcast part 2: \n                        // signal multiple tracks to the receiver\n                        // for anything in the SIM group\n                        if (!expandedAnswer.jingle) {\n                            expandedAnswer.jingle = SJJ.toSessionJSON(answer.sdp, {\n                                role: self._role(),\n                                direction: 'outgoing'\n                            });\n                        }\n                        var groups = expandedAnswer.jingle.contents[1].description.sourceGroups || [];\n                        expandedAnswer.jingle.contents[1].description.sources.forEach(function (source, idx) {\n                            // the floor idx/2 is a hack that relies on a particular order\n                            // of groups, alternating between sim and rtx\n                            source.parameters = source.parameters.map(function (parameter) {\n                                if (parameter.key === 'msid') {\n                                    parameter.value += '-' + Math.floor(idx / 2);\n                                }\n                                return parameter;\n                            });\n                        });\n                        expandedAnswer.sdp = SJJ.toSessionSDP(expandedAnswer.jingle, {\n                            sid: self.sdpSessionID,\n                            role: self._role(),\n                            direction: 'outgoing'\n                        });\n                    }\n                    expandedAnswer.sdp.split('\\r\\n').forEach(function (line) {\n                        if (line.indexOf('a=candidate:') === 0) {\n                            self._checkLocalCandidate(line);\n                        }\n                    });\n                    if (!self.assumeSetLocalSuccess) {\n                        self.emit('answer', expandedAnswer);\n                        cb(null, expandedAnswer);\n                    }\n                },\n                function (err) {\n                    self.emit('error', err);\n                    cb(err);\n                }\n            );\n        },\n        function (err) {\n            self.emit('error', err);\n            cb(err);\n        },\n        constraints\n    );\n};\n\n// Internal method for emitting ice candidates on our peer object\nPeerConnection.prototype._onIce = function (event) {\n    var self = this;\n    if (event.candidate) {\n        var ice = event.candidate;\n\n        var expandedCandidate = {\n            candidate: event.candidate\n        };\n        this._checkLocalCandidate(ice.candidate);\n\n        var cand = SJJ.toCandidateJSON(ice.candidate);\n        if (self.config.useJingle) {\n            if (!ice.sdpMid) { // firefox doesn't set this\n                ice.sdpMid = self.localDescription.contents[ice.sdpMLineIndex].name;\n            }\n            if (!self.config.ice[ice.sdpMid]) {\n                var jingle = SJJ.toSessionJSON(self.pc.localDescription.sdp, {\n                    role: self._role(),\n                    direction: 'outgoing'\n                });\n                _.each(jingle.contents, function (content) {\n                    var transport = content.transport || {};\n                    if (transport.ufrag) {\n                        self.config.ice[content.name] = {\n                            ufrag: transport.ufrag,\n                            pwd: transport.pwd\n                        };\n                    }\n                });\n            }\n            expandedCandidate.jingle = {\n                contents: [{\n                    name: ice.sdpMid,\n                    creator: self._role(),\n                    transport: {\n                        transType: 'iceUdp',\n                        ufrag: self.config.ice[ice.sdpMid].ufrag,\n                        pwd: self.config.ice[ice.sdpMid].pwd,\n                        candidates: [\n                            cand\n                        ]\n                    }\n                }]\n            };\n            if (self.batchIceCandidates > 0) {\n                if (self.batchedIceCandidates.length === 0) {\n                    window.setTimeout(function () {\n                        var contents = {};\n                        self.batchedIceCandidates.forEach(function (content) {\n                            content = content.contents[0];\n                            if (!contents[content.name]) contents[content.name] = content;\n                            contents[content.name].transport.candidates.push(content.transport.candidates[0]);\n                        });\n                        var newCand = { \n                            jingle: {\n                                contents: []\n                            }\n                        };\n                        Object.keys(contents).forEach(function (name) {\n                            newCand.jingle.contents.push(contents[name]);\n                        });\n                        self.batchedIceCandidates = [];\n                        self.emit('ice', newCand);\n                    }, self.batchIceCandidates);\n                }\n                self.batchedIceCandidates.push(expandedCandidate.jingle);\n                return;\n            }\n\n        }\n        this.emit('ice', expandedCandidate);\n    } else {\n        this.emit('endOfCandidates');\n    }\n};\n\n// Internal method for processing a new data channel being added by the\n// other peer.\nPeerConnection.prototype._onDataChannel = function (event) {\n    // make sure we keep a reference so this doesn't get garbage collected\n    var channel = event.channel;\n    this._remoteDataChannels.push(channel);\n\n    this.emit('addChannel', channel);\n};\n\n// Create a data channel spec reference:\n// http://dev.w3.org/2011/webrtc/editor/webrtc.html#idl-def-RTCDataChannelInit\nPeerConnection.prototype.createDataChannel = function (name, opts) {\n    var channel = this.pc.createDataChannel(name, opts);\n\n    // make sure we keep a reference so this doesn't get garbage collected\n    this._localDataChannels.push(channel);\n\n    return channel;\n};\n\n// a wrapper around getStats which hides the differences (where possible)\nPeerConnection.prototype.getStats = function (cb) {\n    if (webrtc.prefix === 'moz') {\n        this.pc.getStats(\n            function (res) {\n                var items = [];\n                for (var result in res) {\n                    if (typeof res[result] === 'object') {\n                        items.push(res[result]);\n                    }\n                }\n                cb(null, items);\n            },\n            cb\n        );\n    } else {\n        this.pc.getStats(function (res) {\n            var items = [];\n            res.result().forEach(function (result) {\n                var item = {};\n                result.names().forEach(function (name) {\n                    item[name] = result.stat(name);\n                });\n                item.id = result.id;\n                item.type = result.type;\n                item.timestamp = result.timestamp;\n                items.push(item);\n            });\n            cb(null, items);\n        });\n    }\n};\n\nmodule.exports = PeerConnection;\n\n},{\"sdp-jingle-json\":17,\"traceablepeerconnection\":18,\"underscore\":16,\"util\":2,\"webrtcsupport\":5,\"wildemitter\":4}],17:[function(require,module,exports){\nvar toSDP = require('./lib/tosdp');\nvar toJSON = require('./lib/tojson');\n\n\n// Converstion from JSON to SDP\n\nexports.toIncomingSDPOffer = function (session) {\n    return toSDP.toSessionSDP(session, {\n        role: 'responder',\n        direction: 'incoming'\n    });\n};\nexports.toOutgoingSDPOffer = function (session) {\n    return toSDP.toSessionSDP(session, {\n        role: 'initiator',\n        direction: 'outgoing'\n    });\n};\nexports.toIncomingSDPAnswer = function (session) {\n    return toSDP.toSessionSDP(session, {\n        role: 'initiator',\n        direction: 'incoming'\n    });\n};\nexports.toOutgoingSDPAnswer = function (session) {\n    return toSDP.toSessionSDP(session, {\n        role: 'responder',\n        direction: 'outgoing'\n    });\n};\nexports.toIncomingMediaSDPOffer = function (media) {\n    return toSDP.toMediaSDP(media, {\n        role: 'responder',\n        direction: 'incoming'\n    });\n};\nexports.toOutgoingMediaSDPOffer = function (media) {\n    return toSDP.toMediaSDP(media, {\n        role: 'initiator',\n        direction: 'outgoing'\n    });\n};\nexports.toIncomingMediaSDPAnswer = function (media) {\n    return toSDP.toMediaSDP(media, {\n        role: 'initiator',\n        direction: 'incoming'\n    });\n};\nexports.toOutgoingMediaSDPAnswer = function (media) {\n    return toSDP.toMediaSDP(media, {\n        role: 'responder',\n        direction: 'outgoing'\n    });\n};\nexports.toCandidateSDP = toSDP.toCandidateSDP;\nexports.toMediaSDP = toSDP.toMediaSDP;\nexports.toSessionSDP = toSDP.toSessionSDP;\n\n\n// Conversion from SDP to JSON\n\nexports.toIncomingJSONOffer = function (sdp, creators) {\n    return toJSON.toSessionJSON(sdp, {\n        role: 'responder',\n        direction: 'incoming',\n        creators: creators\n    });\n};\nexports.toOutgoingJSONOffer = function (sdp, creators) {\n    return toJSON.toSessionJSON(sdp, {\n        role: 'initiator',\n        direction: 'outgoing',\n        creators: creators\n    });\n};\nexports.toIncomingJSONAnswer = function (sdp, creators) {\n    return toJSON.toSessionJSON(sdp, {\n        role: 'initiator',\n        direction: 'incoming',\n        creators: creators\n    });\n};\nexports.toOutgoingJSONAnswer = function (sdp, creators) {\n    return toJSON.toSessionJSON(sdp, {\n        role: 'responder',\n        direction: 'outgoing',\n        creators: creators\n    });\n};\nexports.toIncomingMediaJSONOffer = function (sdp, creator) {\n    return toJSON.toMediaJSON(sdp, {\n        role: 'responder',\n        direction: 'incoming',\n        creator: creator\n    });\n};\nexports.toOutgoingMediaJSONOffer = function (sdp, creator) {\n    return toJSON.toMediaJSON(sdp, {\n        role: 'initiator',\n        direction: 'outgoing',\n        creator: creator\n    });\n};\nexports.toIncomingMediaJSONAnswer = function (sdp, creator) {\n    return toJSON.toMediaJSON(sdp, {\n        role: 'initiator',\n        direction: 'incoming',\n        creator: creator\n    });\n};\nexports.toOutgoingMediaJSONAnswer = function (sdp, creator) {\n    return toJSON.toMediaJSON(sdp, {\n        role: 'responder',\n        direction: 'outgoing',\n        creator: creator\n    });\n};\nexports.toCandidateJSON = toJSON.toCandidateJSON;\nexports.toMediaJSON = toJSON.toMediaJSON;\nexports.toSessionJSON = toJSON.toSessionJSON;\n\n},{\"./lib/tojson\":19,\"./lib/tosdp\":20}],14:[function(require,module,exports){\n// getScreenMedia helper by @HenrikJoreteg\nvar getUserMedia = require('getusermedia');\n\n// cache for constraints and callback\nvar cache = {};\n\nmodule.exports = function (constraints, cb) {\n    var hasConstraints = arguments.length === 2;\n    var callback = hasConstraints ? cb : constraints;\n    var error;\n\n    if (typeof window === 'undefined' || window.location.protocol === 'http:') {\n        error = new Error('NavigatorUserMediaError');\n        error.name = 'HTTPS_REQUIRED';\n        return callback(error);\n    }\n\n    if (window.navigator.userAgent.match('Chrome')) {\n        var chromever = parseInt(window.navigator.userAgent.match(/Chrome\\/(.*) /)[1], 10);\n        var maxver = 33;\n        var isCef = !window.chrome.webstore;\n        // \"known\" crash in chrome 34 and 35 on linux\n        if (window.navigator.userAgent.match('Linux')) maxver = 35;\n        if (isCef || (chromever >= 26 && chromever <= maxver)) {\n            // chrome 26 - chrome 33 way to do it -- requires bad chrome://flags\n            // note: this is basically in maintenance mode and will go away soon\n            constraints = (hasConstraints && constraints) || {\n                video: {\n                    mandatory: {\n                        googLeakyBucket: true,\n                        maxWidth: window.screen.width,\n                        maxHeight: window.screen.height,\n                        maxFrameRate: 3,\n                        chromeMediaSource: 'screen'\n                    }\n                }\n            };\n            getUserMedia(constraints, callback);\n        } else {\n            // chrome 34+ way requiring an extension\n            var pending = window.setTimeout(function () {\n                error = new Error('NavigatorUserMediaError');\n                error.name = 'EXTENSION_UNAVAILABLE';\n                return callback(error);\n            }, 1000);\n            cache[pending] = [callback, hasConstraints ? constraint : null];\n            window.postMessage({ type: 'getScreen', id: pending }, '*');\n        }\n    } else if (window.navigator.userAgent.match('Firefox')) {\n        var ffver = parseInt(window.navigator.userAgent.match(/Firefox\\/(.*)/)[1], 10);\n        if (ffver >= 33) {\n            constraints = (hasConstraints && constraints) || {\n                video: {\n                    mozMediaSource: 'window',\n                    mediaSource: 'window'\n                }\n            }\n            getUserMedia(constraints, function (err, stream) {\n                callback(err, stream);\n                // workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1045810\n                if (!err) {\n                    var lastTime = stream.currentTime;\n                    var polly = window.setInterval(function () {\n                        if (!stream) window.clearInterval(polly);\n                        if (stream.currentTime == lastTime) {\n                            window.clearInterval(polly);\n                            if (stream.onended) {\n                                stream.onended();\n                            }\n                        }\n                        lastTime = stream.currentTime;\n                    }, 500);\n                }\n            });\n        } else {\n            error = new Error('NavigatorUserMediaError');\n            error.name = 'EXTENSION_UNAVAILABLE'; // does not make much sense but...\n        }\n    }\n};\n\nwindow.addEventListener('message', function (event) {\n    if (event.origin != window.location.origin) {\n        return;\n    }\n    if (event.data.type == 'gotScreen' && cache[event.data.id]) {\n        var data = cache[event.data.id];\n        var constraints = data[1];\n        var callback = data[0];\n        delete cache[event.data.id];\n\n        if (event.data.sourceId === '') { // user canceled\n            var error = new Error('NavigatorUserMediaError');\n            error.name = 'PERMISSION_DENIED';\n            callback(error);\n        } else {\n            constraints = constraints || {audio: false, video: {\n                mandatory: {\n                    chromeMediaSource: 'desktop',\n                    maxWidth: window.screen.width,\n                    maxHeight: window.screen.height,\n                    maxFrameRate: 3\n                },\n                optional: [\n                    {googLeakyBucket: true},\n                    {googTemporalLayeredScreencast: true}\n                ]\n            }};\n            constraints.video.mandatory.chromeMediaSourceId = event.data.sourceId;\n            getUserMedia(constraints, callback);\n        }\n    } else if (event.data.type == 'getScreenPending') {\n        window.clearTimeout(event.data.id);\n    }\n});\n\n},{\"getusermedia\":12}],13:[function(require,module,exports){\nvar WildEmitter = require('wildemitter');\n\nfunction getMaxVolume (analyser, fftBins) {\n  var maxVolume = -Infinity;\n  analyser.getFloatFrequencyData(fftBins);\n\n  for(var i=4, ii=fftBins.length; i < ii; i++) {\n    if (fftBins[i] > maxVolume && fftBins[i] < 0) {\n      maxVolume = fftBins[i];\n    }\n  };\n\n  return maxVolume;\n}\n\n\nvar audioContextType = window.AudioContext || window.webkitAudioContext;\n// use a single audio context due to hardware limits\nvar audioContext = null;\nmodule.exports = function(stream, options) {\n  var harker = new WildEmitter();\n\n\n  // make it not break in non-supported browsers\n  if (!audioContextType) return harker;\n\n  //Config\n  var options = options || {},\n      smoothing = (options.smoothing || 0.1),\n      interval = (options.interval || 50),\n      threshold = options.threshold,\n      play = options.play,\n      history = options.history || 10,\n      running = true;\n\n  //Setup Audio Context\n  if (!audioContext) {\n    audioContext = new audioContextType();\n  }\n  var sourceNode, fftBins, analyser;\n\n  analyser = audioContext.createAnalyser();\n  analyser.fftSize = 512;\n  analyser.smoothingTimeConstant = smoothing;\n  fftBins = new Float32Array(analyser.fftSize);\n\n  if (stream.jquery) stream = stream[0];\n  if (stream instanceof HTMLAudioElement || stream instanceof HTMLVideoElement) {\n    //Audio Tag\n    sourceNode = audioContext.createMediaElementSource(stream);\n    if (typeof play === 'undefined') play = true;\n    threshold = threshold || -50;\n  } else {\n    //WebRTC Stream\n    sourceNode = audioContext.createMediaStreamSource(stream);\n    threshold = threshold || -50;\n  }\n\n  sourceNode.connect(analyser);\n  if (play) analyser.connect(audioContext.destination);\n\n  harker.speaking = false;\n\n  harker.setThreshold = function(t) {\n    threshold = t;\n  };\n\n  harker.setInterval = function(i) {\n    interval = i;\n  };\n  \n  harker.stop = function() {\n    running = false;\n    harker.emit('volume_change', -100, threshold);\n    if (harker.speaking) {\n      harker.speaking = false;\n      harker.emit('stopped_speaking');\n    }\n  };\n  harker.speakingHistory = [];\n  for (var i = 0; i < history; i++) {\n      harker.speakingHistory.push(0);\n  }\n\n  // Poll the analyser node to determine if speaking\n  // and emit events if changed\n  var looper = function() {\n    setTimeout(function() {\n    \n      //check if stop has been called\n      if(!running) {\n        return;\n      }\n      \n      var currentVolume = getMaxVolume(analyser, fftBins);\n\n      harker.emit('volume_change', currentVolume, threshold);\n\n      var history = 0;\n      if (currentVolume > threshold && !harker.speaking) {\n        // trigger quickly, short history\n        for (var i = harker.speakingHistory.length - 3; i < harker.speakingHistory.length; i++) {\n          history += harker.speakingHistory[i];\n        }\n        if (history >= 2) {\n          harker.speaking = true;\n          harker.emit('speaking');\n        }\n      } else if (currentVolume < threshold && harker.speaking) {\n        for (var i = 0; i < harker.speakingHistory.length; i++) {\n          history += harker.speakingHistory[i];\n        }\n        if (history == 0) {\n          harker.speaking = false;\n          harker.emit('stopped_speaking');\n        }\n      }\n      harker.speakingHistory.shift();\n      harker.speakingHistory.push(0 + (currentVolume > threshold));\n\n      looper();\n    }, interval);\n  };\n  looper();\n\n\n  return harker;\n}\n\n},{\"wildemitter\":4}],15:[function(require,module,exports){\nvar support = require('webrtcsupport');\n\n\nfunction GainController(stream) {\n    this.support = support.webAudio && support.mediaStream;\n\n    // set our starting value\n    this.gain = 1;\n\n    if (this.support) {\n        var context = this.context = new support.AudioContext();\n        this.microphone = context.createMediaStreamSource(stream);\n        this.gainFilter = context.createGain();\n        this.destination = context.createMediaStreamDestination();\n        this.outputStream = this.destination.stream;\n        this.microphone.connect(this.gainFilter);\n        this.gainFilter.connect(this.destination);\n        stream.addTrack(this.outputStream.getAudioTracks()[0]);\n        stream.removeTrack(stream.getAudioTracks()[0]);\n    }\n    this.stream = stream;\n}\n\n// setting\nGainController.prototype.setGain = function (val) {\n    // check for support\n    if (!this.support) return;\n    this.gainFilter.gain.value = val;\n    this.gain = val;\n};\n\nGainController.prototype.getGain = function () {\n    return this.gain;\n};\n\nGainController.prototype.off = function () {\n    return this.setGain(0);\n};\n\nGainController.prototype.on = function () {\n    this.setGain(1);\n};\n\n\nmodule.exports = GainController;\n\n},{\"webrtcsupport\":5}],20:[function(require,module,exports){\nvar SENDERS = require('./senders');\n\n\nexports.toSessionSDP = function (session, opts) {\n    var role = opts.role || 'initiator';\n    var direction = opts.direction || 'outgoing';\n    var sid = opts.sid || session.sid || Date.now();\n    var time = opts.time || Date.now();\n\n    var sdp = [\n        'v=0',\n        'o=- ' + sid + ' ' + time + ' IN IP4 0.0.0.0',\n        's=-',\n        't=0 0'\n    ];\n\n    var groups = session.groups || [];\n    groups.forEach(function (group) {\n        sdp.push('a=group:' + group.semantics + ' ' + group.contents.join(' '));\n    });\n\n    var contents = session.contents || [];\n    contents.forEach(function (content) {\n        sdp.push(exports.toMediaSDP(content, opts));\n    });\n\n    return sdp.join('\\r\\n') + '\\r\\n';\n};\n\nexports.toMediaSDP = function (content, opts) {\n    var sdp = [];\n\n    var role = opts.role || 'initiator';\n    var direction = opts.direction || 'outgoing';\n\n    var desc = content.description;\n    var transport = content.transport;\n    var payloads = desc.payloads || [];\n    var fingerprints = (transport && transport.fingerprints) || [];\n\n    var mline = [];\n    if (desc.descType == 'datachannel') {\n        mline.push('application');\n        mline.push('1');\n        mline.push('DTLS/SCTP');\n        if (transport.sctp) {\n            transport.sctp.forEach(function (map) {\n                mline.push(map.number);\n            });\n        }\n    } else {\n        mline.push(desc.media);\n        mline.push('1');\n        if ((desc.encryption && desc.encryption.length > 0) || (fingerprints.length > 0)) {\n            mline.push('RTP/SAVPF');\n        } else {\n            mline.push('RTP/AVPF');\n        }\n        payloads.forEach(function (payload) {\n            mline.push(payload.id);\n        });\n    }\n\n\n    sdp.push('m=' + mline.join(' '));\n\n    sdp.push('c=IN IP4 0.0.0.0');\n    if (desc.bandwidth && desc.bandwidth.type && desc.bandwidth.bandwidth) {\n        sdp.push('b=' + desc.bandwidth.type + ':' + desc.bandwidth.bandwidth);\n    }\n    if (desc.descType == 'rtp') {\n        sdp.push('a=rtcp:1 IN IP4 0.0.0.0');\n    }\n\n    if (transport) {\n        if (transport.ufrag) {\n            sdp.push('a=ice-ufrag:' + transport.ufrag);\n        }\n        if (transport.pwd) {\n            sdp.push('a=ice-pwd:' + transport.pwd);\n        }\n\n        var pushedSetup = false;\n        fingerprints.forEach(function (fingerprint) {\n            sdp.push('a=fingerprint:' + fingerprint.hash + ' ' + fingerprint.value);\n            if (fingerprint.setup && !pushedSetup) {\n                sdp.push('a=setup:' + fingerprint.setup);\n            }\n        });\n\n        if (transport.sctp) {\n            transport.sctp.forEach(function (map) {\n                sdp.push('a=sctpmap:' + map.number + ' ' + map.protocol + ' ' + map.streams);\n            });\n        }\n    }\n\n    if (desc.descType == 'rtp') {\n        sdp.push('a=' + (SENDERS[role][direction][content.senders] || 'sendrecv'));\n    }\n    sdp.push('a=mid:' + content.name);\n\n    if (desc.mux) {\n        sdp.push('a=rtcp-mux');\n    }\n\n    var encryption = desc.encryption || [];\n    encryption.forEach(function (crypto) {\n        sdp.push('a=crypto:' + crypto.tag + ' ' + crypto.cipherSuite + ' ' + crypto.keyParams + (crypto.sessionParams ? ' ' + crypto.sessionParams : ''));\n    });\n    if (desc.googConferenceFlag) {\n        sdp.push('a=x-google-flag:conference');\n    }\n\n    payloads.forEach(function (payload) {\n        var rtpmap = 'a=rtpmap:' + payload.id + ' ' + payload.name + '/' + payload.clockrate;\n        if (payload.channels && payload.channels != '1') {\n            rtpmap += '/' + payload.channels;\n        }\n        sdp.push(rtpmap);\n\n        if (payload.parameters && payload.parameters.length) {\n            var fmtp = ['a=fmtp:' + payload.id];\n            var parameters = [];\n            payload.parameters.forEach(function (param) {\n                parameters.push((param.key ? param.key + '=' : '') + param.value);\n            });\n            fmtp.push(parameters.join(';'));\n            sdp.push(fmtp.join(' '));\n        }\n\n        if (payload.feedback) {\n            payload.feedback.forEach(function (fb) {\n                if (fb.type === 'trr-int') {\n                    sdp.push('a=rtcp-fb:' + payload.id + ' trr-int ' + (fb.value ? fb.value : '0'));\n                } else {\n                    sdp.push('a=rtcp-fb:' + payload.id + ' ' + fb.type + (fb.subtype ? ' ' + fb.subtype : ''));\n                }\n            });\n        }\n    });\n\n    if (desc.feedback) {\n        desc.feedback.forEach(function (fb) {\n            if (fb.type === 'trr-int') {\n                sdp.push('a=rtcp-fb:* trr-int ' + (fb.value ? fb.value : '0'));\n            } else {\n                sdp.push('a=rtcp-fb:* ' + fb.type + (fb.subtype ? ' ' + fb.subtype : ''));\n            }\n        });\n    }\n\n    var hdrExts = desc.headerExtensions || [];\n    hdrExts.forEach(function (hdr) {\n        sdp.push('a=extmap:' + hdr.id + (hdr.senders ? '/' + SENDERS[role][direction][hdr.senders] : '') + ' ' + hdr.uri);\n    });\n\n    var ssrcGroups = desc.sourceGroups || [];\n    ssrcGroups.forEach(function (ssrcGroup) {\n        sdp.push('a=ssrc-group:' + ssrcGroup.semantics + ' ' + ssrcGroup.sources.join(' '));\n    });\n\n    var ssrcs = desc.sources || [];\n    ssrcs.forEach(function (ssrc) {\n        for (var i = 0; i < ssrc.parameters.length; i++) {\n            var param = ssrc.parameters[i];\n            sdp.push('a=ssrc:' + (ssrc.ssrc || desc.ssrc) + ' ' + param.key + (param.value ? (':' + param.value) : ''));\n        }\n    });\n\n    var candidates = transport.candidates || [];\n    candidates.forEach(function (candidate) {\n        sdp.push(exports.toCandidateSDP(candidate));\n    });\n\n    return sdp.join('\\r\\n');\n};\n\nexports.toCandidateSDP = function (candidate) {\n    var sdp = [];\n\n    sdp.push(candidate.foundation);\n    sdp.push(candidate.component);\n    sdp.push(candidate.protocol.toUpperCase());\n    sdp.push(candidate.priority);\n    sdp.push(candidate.ip);\n    sdp.push(candidate.port);\n\n    var type = candidate.type;\n    sdp.push('typ');\n    sdp.push(type);\n    if (type === 'srflx' || type === 'prflx' || type === 'relay') {\n        if (candidate.relAddr && candidate.relPort) {\n            sdp.push('raddr');\n            sdp.push(candidate.relAddr);\n            sdp.push('rport');\n            sdp.push(candidate.relPort);\n        }\n    }\n    if (candidate.tcpType && candidate.protocol.toUpperCase() == 'TCP') {\n        sdp.push('tcptype');\n        sdp.push(candidate.tcpType);\n    }\n\n    sdp.push('generation');\n    sdp.push(candidate.generation || '0');\n\n    // FIXME: apparently this is wrong per spec\n    // but then, we need this when actually putting this into\n    // SDP so it's going to stay.\n    // decision needs to be revisited when browsers dont\n    // accept this any longer\n    return 'a=candidate:' + sdp.join(' ');\n};\n\n},{\"./senders\":21}],19:[function(require,module,exports){\nvar SENDERS = require('./senders');\nvar parsers = require('./parsers');\nvar idCounter = Math.random();\n\n\nexports._setIdCounter = function (counter) {\n    idCounter = counter;\n};\n\nexports.toSessionJSON = function (sdp, opts) {\n    var i;\n    var creators = opts.creators || [];\n    var role = opts.role || 'initiator';\n    var direction = opts.direction || 'outgoing';\n\n\n    // Divide the SDP into session and media sections.\n    var media = sdp.split('\\r\\nm=');\n    for (i = 1; i < media.length; i++) {\n        media[i] = 'm=' + media[i];\n        if (i !== media.length - 1) {\n            media[i] += '\\r\\n';\n        }\n    }\n    var session = media.shift() + '\\r\\n';\n    var sessionLines = parsers.lines(session);\n    var parsed = {};\n\n    var contents = [];\n    for (i = 0; i < media.length; i++) {\n        contents.push(exports.toMediaJSON(media[i], session, {\n            role: role,\n            direction: direction,\n            creator: creators[i] || 'initiator'\n        }));\n    }\n    parsed.contents = contents;\n\n    var groupLines = parsers.findLines('a=group:', sessionLines);\n    if (groupLines.length) {\n        parsed.groups = parsers.groups(groupLines);\n    }\n\n    return parsed;\n};\n\nexports.toMediaJSON = function (media, session, opts) {\n    var creator = opts.creator || 'initiator';\n    var role = opts.role || 'initiator';\n    var direction = opts.direction || 'outgoing';\n\n    var lines = parsers.lines(media);\n    var sessionLines = parsers.lines(session);\n    var mline = parsers.mline(lines[0]);\n\n    var content = {\n        creator: creator,\n        name: mline.media,\n        description: {\n            descType: 'rtp',\n            media: mline.media,\n            payloads: [],\n            encryption: [],\n            feedback: [],\n            headerExtensions: []\n        },\n        transport: {\n            transType: 'iceUdp',\n            candidates: [],\n            fingerprints: []\n        }\n    };\n    if (mline.media == 'application') {\n        // FIXME: the description is most likely to be independent\n        // of the SDP and should be processed by other parts of the library\n        content.description = {\n            descType: 'datachannel'\n        };\n        content.transport.sctp = [];\n    }\n    var desc = content.description;\n    var trans = content.transport;\n\n    // If we have a mid, use that for the content name instead.\n    var mid = parsers.findLine('a=mid:', lines);\n    if (mid) {\n        content.name = mid.substr(6);\n    }\n\n    if (parsers.findLine('a=sendrecv', lines, sessionLines)) {\n        content.senders = 'both';\n    } else if (parsers.findLine('a=sendonly', lines, sessionLines)) {\n        content.senders = SENDERS[role][direction].sendonly;\n    } else if (parsers.findLine('a=recvonly', lines, sessionLines)) {\n        content.senders = SENDERS[role][direction].recvonly;\n    } else if (parsers.findLine('a=inactive', lines, sessionLines)) {\n        content.senders = 'none';\n    }\n\n    if (desc.descType == 'rtp') {\n        var bandwidth = parsers.findLine('b=', lines);\n        if (bandwidth) {\n            desc.bandwidth = parsers.bandwidth(bandwidth);\n        }\n\n        var ssrc = parsers.findLine('a=ssrc:', lines);\n        if (ssrc) {\n            desc.ssrc = ssrc.substr(7).split(' ')[0];\n        }\n\n        var rtpmapLines = parsers.findLines('a=rtpmap:', lines);\n        rtpmapLines.forEach(function (line) {\n            var payload = parsers.rtpmap(line);\n            payload.parameters = [];\n            payload.feedback = [];\n\n            var fmtpLines = parsers.findLines('a=fmtp:' + payload.id, lines);\n            // There should only be one fmtp line per payload\n            fmtpLines.forEach(function (line) {\n                payload.parameters = parsers.fmtp(line);\n            });\n\n            var fbLines = parsers.findLines('a=rtcp-fb:' + payload.id, lines);\n            fbLines.forEach(function (line) {\n                payload.feedback.push(parsers.rtcpfb(line));\n            });\n\n            desc.payloads.push(payload);\n        });\n\n        var cryptoLines = parsers.findLines('a=crypto:', lines, sessionLines);\n        cryptoLines.forEach(function (line) {\n            desc.encryption.push(parsers.crypto(line));\n        });\n\n        if (parsers.findLine('a=rtcp-mux', lines)) {\n            desc.mux = true;\n        }\n\n        var fbLines = parsers.findLines('a=rtcp-fb:*', lines);\n        fbLines.forEach(function (line) {\n            desc.feedback.push(parsers.rtcpfb(line));\n        });\n\n        var extLines = parsers.findLines('a=extmap:', lines);\n        extLines.forEach(function (line) {\n            var ext = parsers.extmap(line);\n\n            ext.senders = SENDERS[role][direction][ext.senders];\n\n            desc.headerExtensions.push(ext);\n        });\n\n        var ssrcGroupLines = parsers.findLines('a=ssrc-group:', lines);\n        desc.sourceGroups = parsers.sourceGroups(ssrcGroupLines || []);\n\n        var ssrcLines = parsers.findLines('a=ssrc:', lines);\n        desc.sources = parsers.sources(ssrcLines || []);\n\n        if (parsers.findLine('a=x-google-flag:conference', lines, sessionLines)) {\n            desc.googConferenceFlag = true;\n        }\n    }\n\n    // transport specific attributes\n    var fingerprintLines = parsers.findLines('a=fingerprint:', lines, sessionLines);\n    var setup = parsers.findLine('a=setup:', lines, sessionLines);\n    fingerprintLines.forEach(function (line) {\n        var fp = parsers.fingerprint(line);\n        if (setup) {\n            fp.setup = setup.substr(8);\n        }\n        trans.fingerprints.push(fp);\n    });\n\n    var ufragLine = parsers.findLine('a=ice-ufrag:', lines, sessionLines);\n    var pwdLine = parsers.findLine('a=ice-pwd:', lines, sessionLines);\n    if (ufragLine && pwdLine) {\n        trans.ufrag = ufragLine.substr(12);\n        trans.pwd = pwdLine.substr(10);\n        trans.candidates = [];\n\n        var candidateLines = parsers.findLines('a=candidate:', lines, sessionLines);\n        candidateLines.forEach(function (line) {\n            trans.candidates.push(exports.toCandidateJSON(line));\n        });\n    }\n\n    if (desc.descType == 'datachannel') {\n        var sctpmapLines = parsers.findLines('a=sctpmap:', lines);\n        sctpmapLines.forEach(function (line) {\n            var sctp = parsers.sctpmap(line);\n            trans.sctp.push(sctp);\n        });\n    }\n\n    return content;\n};\n\nexports.toCandidateJSON = function (line) {\n    var candidate = parsers.candidate(line.split('\\r\\n')[0]);\n    candidate.id = (idCounter++).toString(36).substr(0, 12);\n    return candidate;\n};\n\n},{\"./parsers\":22,\"./senders\":21}],22:[function(require,module,exports){\nexports.lines = function (sdp) {\n    return sdp.split('\\r\\n').filter(function (line) {\n        return line.length > 0;\n    });\n};\n\nexports.findLine = function (prefix, mediaLines, sessionLines) {\n    var prefixLength = prefix.length;\n    for (var i = 0; i < mediaLines.length; i++) {\n        if (mediaLines[i].substr(0, prefixLength) === prefix) {\n            return mediaLines[i];\n        }\n    }\n    // Continue searching in parent session section\n    if (!sessionLines) {\n        return false;\n    }\n\n    for (var j = 0; j < sessionLines.length; j++) {\n        if (sessionLines[j].substr(0, prefixLength) === prefix) {\n            return sessionLines[j];\n        }\n    }\n\n    return false;\n};\n\nexports.findLines = function (prefix, mediaLines, sessionLines) {\n    var results = [];\n    var prefixLength = prefix.length;\n    for (var i = 0; i < mediaLines.length; i++) {\n        if (mediaLines[i].substr(0, prefixLength) === prefix) {\n            results.push(mediaLines[i]);\n        }\n    }\n    if (results.length || !sessionLines) {\n        return results;\n    }\n    for (var j = 0; j < sessionLines.length; j++) {\n        if (sessionLines[j].substr(0, prefixLength) === prefix) {\n            results.push(sessionLines[j]);\n        }\n    }\n    return results;\n};\n\nexports.mline = function (line) {\n    var parts = line.substr(2).split(' ');\n    var parsed = {\n        media: parts[0],\n        port: parts[1],\n        proto: parts[2],\n        formats: []\n    };\n    for (var i = 3; i < parts.length; i++) {\n        if (parts[i]) {\n            parsed.formats.push(parts[i]);\n        }\n    }\n    return parsed;\n};\n\nexports.rtpmap = function (line) {\n    var parts = line.substr(9).split(' ');\n    var parsed = {\n        id: parts.shift()\n    };\n\n    parts = parts[0].split('/');\n\n    parsed.name = parts[0];\n    parsed.clockrate = parts[1];\n    parsed.channels = parts.length == 3 ? parts[2] : '1';\n    return parsed;\n};\n\nexports.sctpmap = function (line) {\n    // based on -05 draft\n    var parts = line.substr(10).split(' ');\n    var parsed = {\n        number: parts.shift(),\n        protocol: parts.shift(),\n        streams: parts.shift()\n    };\n    return parsed;\n};\n\n\nexports.fmtp = function (line) {\n    var kv, key, value;\n    var parts = line.substr(line.indexOf(' ') + 1).split(';');\n    var parsed = [];\n    for (var i = 0; i < parts.length; i++) {\n        kv = parts[i].split('=');\n        key = kv[0].trim();\n        value = kv[1];\n        if (key && value) {\n            parsed.push({key: key, value: value});\n        } else if (key) {\n            parsed.push({key: '', value: key});\n        }\n    }\n    return parsed;\n};\n\nexports.crypto = function (line) {\n    var parts = line.substr(9).split(' ');\n    var parsed = {\n        tag: parts[0],\n        cipherSuite: parts[1],\n        keyParams: parts[2],\n        sessionParams: parts.slice(3).join(' ')\n    };\n    return parsed;\n};\n\nexports.fingerprint = function (line) {\n    var parts = line.substr(14).split(' ');\n    return {\n        hash: parts[0],\n        value: parts[1]\n    };\n};\n\nexports.extmap = function (line) {\n    var parts = line.substr(9).split(' ');\n    var parsed = {};\n\n    var idpart = parts.shift();\n    var sp = idpart.indexOf('/');\n    if (sp >= 0) {\n        parsed.id = idpart.substr(0, sp);\n        parsed.senders = idpart.substr(sp + 1);\n    } else {\n        parsed.id = idpart;\n        parsed.senders = 'sendrecv';\n    }\n\n    parsed.uri = parts.shift() || '';\n\n    return parsed;\n};\n\nexports.rtcpfb = function (line) {\n    var parts = line.substr(10).split(' ');\n    var parsed = {};\n    parsed.id = parts.shift();\n    parsed.type = parts.shift();\n    if (parsed.type === 'trr-int') {\n        parsed.value = parts.shift();\n    } else {\n        parsed.subtype = parts.shift() || '';\n    }\n    parsed.parameters = parts;\n    return parsed;\n};\n\nexports.candidate = function (line) {\n    var parts;\n    if (line.indexOf('a=candidate:') === 0) {\n        parts = line.substring(12).split(' ');\n    } else { // no a=candidate\n        parts = line.substring(10).split(' ');\n    }\n\n    var candidate = {\n        foundation: parts[0],\n        component: parts[1],\n        protocol: parts[2].toLowerCase(),\n        priority: parts[3],\n        ip: parts[4],\n        port: parts[5],\n        // skip parts[6] == 'typ'\n        type: parts[7],\n        generation: '0'\n    };\n\n    for (var i = 8; i < parts.length; i += 2) {\n        if (parts[i] === 'raddr') {\n            candidate.relAddr = parts[i + 1];\n        } else if (parts[i] === 'rport') {\n            candidate.relPort = parts[i + 1];\n        } else if (parts[i] === 'generation') {\n            candidate.generation = parts[i + 1];\n        } else if (parts[i] === 'tcptype') {\n            candidate.tcpType = parts[i + 1];\n        }\n    }\n\n    candidate.network = '1';\n\n    return candidate;\n};\n\nexports.sourceGroups = function (lines) {\n    var parsed = [];\n    for (var i = 0; i < lines.length; i++) {\n        var parts = lines[i].substr(13).split(' ');\n        parsed.push({\n            semantics: parts.shift(),\n            sources: parts\n        });\n    }\n    return parsed;\n};\n\nexports.sources = function (lines) {\n    // http://tools.ietf.org/html/rfc5576\n    var parsed = [];\n    var sources = {};\n    for (var i = 0; i < lines.length; i++) {\n        var parts = lines[i].substr(7).split(' ');\n        var ssrc = parts.shift();\n\n        if (!sources[ssrc]) {\n            var source = {\n                ssrc: ssrc,\n                parameters: []\n            };\n            parsed.push(source);\n\n            // Keep an index\n            sources[ssrc] = source;\n        }\n\n        parts = parts.join(' ').split(':');\n        var attribute = parts.shift();\n        var value = parts.join(':') || null;\n\n        sources[ssrc].parameters.push({\n            key: attribute,\n            value: value\n        });\n    }\n\n    return parsed;\n};\n\nexports.groups = function (lines) {\n    // http://tools.ietf.org/html/rfc5888\n    var parsed = [];\n    var parts;\n    for (var i = 0; i < lines.length; i++) {\n        parts = lines[i].substr(8).split(' ');\n        parsed.push({\n            semantics: parts.shift(),\n            contents: parts\n        });\n    }\n    return parsed;\n};\n\nexports.bandwidth = function (line) {\n    var parts = line.substr(2).split(':');\n    var parsed = {};\n    parsed.type = parts.shift();\n    parsed.bandwidth = parts.shift();\n    return parsed;\n};\n\n},{}],21:[function(require,module,exports){\nmodule.exports = {\n    initiator: {\n        incoming: {\n            initiator: 'recvonly',\n            responder: 'sendonly',\n            both: 'sendrecv',\n            none: 'inactive',\n            recvonly: 'initiator',\n            sendonly: 'responder',\n            sendrecv: 'both',\n            inactive: 'none'\n        },\n        outgoing: {\n            initiator: 'sendonly',\n            responder: 'recvonly',\n            both: 'sendrecv',\n            none: 'inactive',\n            recvonly: 'responder',\n            sendonly: 'initiator',\n            sendrecv: 'both',\n            inactive: 'none'\n        }\n    },\n    responder: {\n        incoming: {\n            initiator: 'sendonly',\n            responder: 'recvonly',\n            both: 'sendrecv',\n            none: 'inactive',\n            recvonly: 'responder',\n            sendonly: 'initiator',\n            sendrecv: 'both',\n            inactive: 'none'\n        },\n        outgoing: {\n            initiator: 'recvonly',\n            responder: 'sendonly',\n            both: 'sendrecv',\n            none: 'inactive',\n            recvonly: 'initiator',\n            sendonly: 'responder',\n            sendrecv: 'both',\n            inactive: 'none'\n        }\n    }\n};\n\n},{}],18:[function(require,module,exports){\n// based on https://github.com/ESTOS/strophe.jingle/\n// adds wildemitter support\nvar util = require('util');\nvar webrtc = require('webrtcsupport');\nvar WildEmitter = require('wildemitter');\n\nfunction dumpSDP(description) {\n    return {\n        type: description.type,\n        sdp: description.sdp\n    };\n}\n\nfunction dumpStream(stream) {\n    var info = {\n        label: stream.id,\n    };\n    if (stream.getAudioTracks().length) {\n        info.audio = stream.getAudioTracks().map(function (track) {\n            return track.id;\n        });\n    }\n    if (stream.getVideoTracks().length) {\n        info.video = stream.getVideoTracks().map(function (track) {\n            return track.id;\n        });\n    }\n    return info;\n}\n\nfunction TraceablePeerConnection(config, constraints) {\n    var self = this;\n    WildEmitter.call(this);\n\n    this.peerconnection = new webrtc.PeerConnection(config, constraints);\n\n    this.trace = function (what, info) {\n        self.emit('PeerConnectionTrace', {\n            time: new Date(),\n            type: what,\n            value: info || \"\"\n        });\n    };\n\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = function (event) {\n        self.trace('onicecandidate', event.candidate);\n        if (self.onicecandidate !== null) {\n            self.onicecandidate(event);\n        }\n    };\n    this.onaddstream = null;\n    this.peerconnection.onaddstream = function (event) {\n        self.trace('onaddstream', dumpStream(event.stream));\n        if (self.onaddstream !== null) {\n            self.onaddstream(event);\n        }\n    };\n    this.onremovestream = null;\n    this.peerconnection.onremovestream = function (event) {\n        self.trace('onremovestream', dumpStream(event.stream));\n        if (self.onremovestream !== null) {\n            self.onremovestream(event);\n        }\n    };\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = function (event) {\n        self.trace('onsignalingstatechange', self.signalingState);\n        if (self.onsignalingstatechange !== null) {\n            self.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = function (event) {\n        self.trace('oniceconnectionstatechange', self.iceConnectionState);\n        if (self.oniceconnectionstatechange !== null) {\n            self.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = function (event) {\n        self.trace('onnegotiationneeded');\n        if (self.onnegotiationneeded !== null) {\n            self.onnegotiationneeded(event);\n        }\n    };\n    self.ondatachannel = null;\n    this.peerconnection.ondatachannel = function (event) {\n        self.trace('ondatachannel', event);\n        if (self.ondatachannel !== null) {\n            self.ondatachannel(event);\n        }\n    };\n    this.getLocalStreams = this.peerconnection.getLocalStreams.bind(this.peerconnection);\n    this.getRemoteStreams = this.peerconnection.getRemoteStreams.bind(this.peerconnection);\n}\n\nutil.inherits(TraceablePeerConnection, WildEmitter);\n\nObject.defineProperty(TraceablePeerConnection.prototype, 'signalingState', {\n    get: function () {\n        return this.peerconnection.signalingState;\n    }\n});\n\nObject.defineProperty(TraceablePeerConnection.prototype, 'iceConnectionState', {\n    get: function () {\n        return this.peerconnection.iceConnectionState;\n    }\n});\n\nObject.defineProperty(TraceablePeerConnection.prototype, 'localDescription', {\n    get: function () {\n        return this.peerconnection.localDescription;\n    }\n});\n\nObject.defineProperty(TraceablePeerConnection.prototype, 'remoteDescription', {\n    get: function () {\n        return this.peerconnection.remoteDescription;\n    }\n});\n\nTraceablePeerConnection.prototype.addStream = function (stream) {\n    this.trace('addStream', dumpStream(stream));\n    this.peerconnection.addStream(stream);\n};\n\nTraceablePeerConnection.prototype.removeStream = function (stream) {\n    this.trace('removeStream', dumpStream(stream));\n    this.peerconnection.removeStream(stream);\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function (label, opts) {\n    this.trace('createDataChannel', label, opts);\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function (description, successCallback, failureCallback) {\n    var self = this;\n    this.trace('setLocalDescription', dumpSDP(description));\n    this.peerconnection.setLocalDescription(description,\n        function () {\n            self.trace('setLocalDescriptionOnSuccess');\n            successCallback();\n        },\n        function (err) {\n            self.trace('setLocalDescriptionOnFailure', err);\n            failureCallback(err);\n        }\n    );\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function (description, successCallback, failureCallback) {\n    var self = this;\n    this.trace('setRemoteDescription', dumpSDP(description));\n    this.peerconnection.setRemoteDescription(description,\n        function () {\n            self.trace('setRemoteDescriptionOnSuccess');\n            successCallback();\n        },\n        function (err) {\n            self.trace('setRemoteDescriptionOnFailure', err);\n            failureCallback(err);\n        }\n    );\n};\n\nTraceablePeerConnection.prototype.close = function () {\n    this.trace('stop');\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    if (this.peerconnection.signalingState != 'closed') {\n        this.peerconnection.close();\n    }\n};\n\nTraceablePeerConnection.prototype.createOffer = function (successCallback, failureCallback, constraints) {\n    var self = this;\n    this.trace('createOffer', constraints);\n    this.peerconnection.createOffer(\n        function (offer) {\n            self.trace('createOfferOnSuccess', dumpSDP(offer));\n            successCallback(offer);\n        },\n        function (err) {\n            self.trace('createOfferOnFailure', err);\n            failureCallback(err);\n        },\n        constraints\n    );\n};\n\nTraceablePeerConnection.prototype.createAnswer = function (successCallback, failureCallback, constraints) {\n    var self = this;\n    this.trace('createAnswer', constraints);\n    this.peerconnection.createAnswer(\n        function (answer) {\n            self.trace('createAnswerOnSuccess', dumpSDP(answer));\n            successCallback(answer);\n        },\n        function (err) {\n            self.trace('createAnswerOnFailure', err);\n            failureCallback(err);\n        },\n        constraints\n    );\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function (candidate, successCallback, failureCallback) {\n    var self = this;\n    this.trace('addIceCandidate', candidate);\n    this.peerconnection.addIceCandidate(candidate,\n        function () {\n            //self.trace('addIceCandidateOnSuccess');\n            if (successCallback) successCallback();\n        },\n        function (err) {\n            self.trace('addIceCandidateOnFailure', err);\n            if (failureCallback) failureCallback(err);\n        }\n    );\n};\n\nTraceablePeerConnection.prototype.getStats = function (callback, errback) {\n    if (navigator.mozGetUserMedia) {\n        this.peerconnection.getStats(null, callback, errback);\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\nmodule.exports = TraceablePeerConnection;\n\n},{\"util\":2,\"webrtcsupport\":5,\"wildemitter\":4}]},{},[1])(1)\n});\n;"}